{"version":3,"sources":["assets\\ddz\\ddz\\scripts\\tool\\DdzPokerCheck.ts"],"names":[],"mappings":";;;;;;AAAA,IAAK,eAGJ;AAHD,WAAK,eAAe;IAChB,8DAAa,CAAA;IACb,kEAAe,CAAA;AACnB,CAAC,EAHI,eAAe,KAAf,eAAe,QAGnB;AAED,IAAK,aAKJ;AALD,WAAK,aAAa;IACd,uDAAW,CAAA;IACd,iDAAQ,CAAA;IACR,mDAAS,CAAA;IACT,mDAAS,CAAA;AACV,CAAC,EALI,aAAa,KAAb,aAAa,QAKjB;AAED,IAAK,cAgBJ;AAhBD,WAAK,cAAc;IACf,qDAAS,CAAA;IACT,mDAAI,CAAA;IACJ,mDAAI,CAAA;IACJ,iDAAG,CAAA;IACH,qDAAK,CAAA;IACL,qDAAK,CAAA;IACL,mDAAI,CAAA;IACJ,kDAAG,CAAA;IACH,oDAAI,CAAA;IACJ,sDAAK,CAAA;IACL,oDAAI,CAAA;IACJ,kDAAQ,CAAA;IACR,kDAAQ,CAAA;IACR,gEAAe,CAAA;IACf,4DAAa,CAAA;AACjB,CAAC,EAhBI,cAAc,KAAd,cAAc,QAgBlB;AAED;IAAA;IAoCA,CAAC;IAnCiB,4BAAc,GAA5B,UAA6B,KAAa;QACtC,IAAI,KAAK,IAAI,eAAe,CAAC,QAAQ;YACjC,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACxC,IAAI,KAAK,IAAI,eAAe,CAAC,UAAU;YACnC,OAAO,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACtC,IAAA,KAAe,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,EAAhD,GAAG,QAAA,EAAE,KAAK,QAAsC,CAAC;QACtD,IAAI,MAAM,GAAG,GAAG,CAAC;QACjB,IAAI,GAAG,IAAI,CAAC;YACR,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC;QAChC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC;IAEa,0BAAY,GAA1B,UAA2B,KAAK;QAC5B,OAAO,KAAK,IAAI,eAAe,CAAC,QAAQ,IAAI,KAAK,IAAI,eAAe,CAAC,UAAU,CAAC;IACpF,CAAC;IAEa,2BAAa,GAA3B,UAA4B,KAAK;QAC7B,IAAI,KAAK,IAAI,eAAe,CAAC,QAAQ;YACjC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACnB,IAAI,KAAK,IAAI,eAAe,CAAC,UAAU;YACnC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACnB,IAAI,GAAG,GAAG,KAAK,GAAG,EAAE,CAAC;QACrB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxB,CAAC;IAEa,6BAAe,GAA7B,UAA8B,KAAK;QAC/B,IAAI,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC;YACjC,OAAO,CAAC,CAAC,CAAC;QACV,IAAA,KAAe,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,EAAhD,GAAG,QAAA,EAAE,KAAK,QAAsC,CAAC;QACtD,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,EAAE,IAAI,KAAK,IAAI,aAAa,CAAC,OAAO,IAAI,KAAK,IAAI,aAAa,CAAC,KAAK,EAAC;YACxF,OAAO,CAAC,CAAC,CAAC;SACb;QACD,OAAO,CAAC,CAAC,CAAC;IACd,CAAC;IACL,oBAAC;AAAD,CApCA,AAoCC,IAAA","file":"","sourceRoot":"/","sourcesContent":["enum DdzPokerSpecial{\r\n    RedGhost = 95,\r\n    BlackGhost = 79,\r\n}\r\n\r\nenum DdzPokerColor{\r\n    Diamond = 1,\r\n\tClub = 2,\r\n\tHeart = 3,\r\n\tSpade = 4,\r\n}\r\n\r\nenum DdzPokerWeight{\r\n    Three = 3,\r\n    Four,\r\n    Five,\r\n    Six,\r\n    Seven,\r\n    Eight,\r\n    Nine,\r\n    Ten,\r\n    Jack,\r\n    Queen,\r\n    King,\r\n    Ace = 14,\r\n    Two = 16,           // value = 2, 2+16*n\r\n    BlackGhost = 79,    // value = 79\r\n    RedGhost = 95,      // value = 95\r\n}\r\n\r\nexport default class DdzPokerCheck{\r\n    public static getPokerWeight(value: number){\r\n        if (value == DdzPokerSpecial.RedGhost)\r\n            return [DdzPokerWeight.RedGhost, 0];\r\n        if (value == DdzPokerSpecial.BlackGhost)\r\n            return [DdzPokerWeight.BlackGhost, 0];\r\n        let [num, color] = DdzPokerCheck.getPokerValue(value);\r\n        let weight = num;\r\n        if (num == 2)\r\n            weight = DdzPokerWeight.Two;\r\n        return [weight, color];\r\n    }\r\n\r\n    public static checkIsGhost(value){\r\n        return value == DdzPokerSpecial.RedGhost || value == DdzPokerSpecial.BlackGhost;\r\n    }\r\n\r\n    public static getPokerValue(value){\r\n        if (value == DdzPokerSpecial.RedGhost)\r\n            return [95, 0];\r\n        if (value == DdzPokerSpecial.BlackGhost)\r\n            return [79, 0];\r\n        let num = value % 16;\r\n        let color = Math.floor(value / 16) + 1;\r\n        return [num, color];\r\n    }\r\n\r\n    public static checkPokerValid(value){\r\n        if (DdzPokerCheck.checkIsGhost(value))\r\n            return !0;\r\n        let [num, color] = DdzPokerCheck.getPokerValue(value);\r\n        if (num >= 2 && num <= 14 && color >= DdzPokerColor.Diamond && color <= DdzPokerColor.Spade){\r\n            return !0;\r\n        }\r\n        return !1;\r\n    }\r\n}"]}