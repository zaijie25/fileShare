{"version":3,"sources":["assets\\hall\\scripts\\framework\\audio\\AudioManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import BaseSettingData from \"../setting/BaseSettingData\";\r\nimport ResourceManager from \"../resource/ResourceManager\";\r\nimport AppHelper from \"../../logic/core/tool/AppHelper\";\r\n\r\nexport default class AudioManager \r\n{\r\n    private settingData:BaseSettingData;\r\n    private resourceMgr:ResourceManager;\r\n\r\n    //正在播放的bgm  \r\n    private curRunningBgm:string = \"\"\r\n    //打开音效开关后应该播放的\r\n    private targetBgm:string = \"\"\r\n\r\n    public commonBtnSoundUrl = \"hall/sound/btnClick\";\r\n    public commonCloseSoundUrl = \"\";\r\n\r\n    private pauseTime = 0;\r\n    private inBackground = false;\r\n\r\n    public setup(settingData:BaseSettingData, resourceMgr:ResourceManager)\r\n    {\r\n        this.settingData = settingData;\r\n        this.resourceMgr = resourceMgr;\r\n        //设置单个音源的最大实例个数\r\n        cc.audioEngine.setMaxAudioInstance(30);\r\n        this.setMusicVolume(this.settingData.musicVolume)\r\n        this.setSoundVolume(this.settingData.soundVolume)\r\n\r\n        cc.game.on(cc.game.EVENT_HIDE, this.onPause, this)\r\n        cc.game.on(cc.game.EVENT_SHOW, this.onResume, this);\r\n    }\r\n\r\n\r\n    private onPause()\r\n    {\r\n        this.pauseTime = Date.now();\r\n        this.inBackground = true;\r\n    }\r\n\r\n    //防止音效在切回来后再播\r\n    private onResume()\r\n    {\r\n        this.pauseTime = 0;\r\n        this.inBackground = false;\r\n        if(this.pauseTime != 0 && Date.now() - this.pauseTime > 2000)\r\n        {\r\n            this.stopAllEffect();\r\n        }\r\n    }\r\n\r\n\r\n    public playGameBundleMusic(url:string,isAutoRelease = false){\r\n        let bundleName = Global.ResourceManager.gameBundle\r\n        if (bundleName){\r\n            this.playBundleMusic(bundleName,url)\r\n        }else {\r\n            Logger.error(\"playGameBundleMusic bundleName null\")\r\n        }\r\n    }\r\n\r\n    public playBundleMusic(bundleName:any,url:string,isAutoRelease = false){\r\n        this.targetBgm = url;\r\n        if(url == this.curRunningBgm || url == \"\")\r\n            return;\r\n        if(!this.settingData.musicEnable)\r\n            return;\r\n        this.curRunningBgm = url;\r\n        //2019-6-22 xiaoC 先获取资源，取不到再加载，否则预加载音乐资源后这里又重复加载（做法与playSound一致）\r\n        let audio = this.resourceMgr.getBundleRes(bundleName,url, cc.AudioClip);\r\n        if (audio){\r\n            cc.audioEngine.playMusic(audio, true);\r\n        }else{\r\n            let func = (error, audio)=>{\r\n                if(error != null)\r\n                {\r\n                    Logger.error(\"音效加载失败\", error.message, url);\r\n                    return;\r\n                }\r\n                if(url != this.curRunningBgm)\r\n                {\r\n                    Logger.error(\"声音未加载完就切换音乐\", url, this.curRunningBgm);\r\n                    return;\r\n                }\r\n                cc.audioEngine.playMusic(audio, true);\r\n            }\r\n            if(cc.sys.isNative && jsb && jsb.fileUtils.isFileExist(url))\r\n            {\r\n                this.resourceMgr.load(url, func)\r\n            }\r\n            else\r\n                this.resourceMgr.loadBundleRes(bundleName,url, func);\r\n        }\r\n    }\r\n\r\n    //url:  Resouces下的完整路径\r\n    public playMusic(url:string, isAutoRelease = false)\r\n    {\r\n        this.targetBgm = url;\r\n        if(url == this.curRunningBgm || url == \"\")\r\n            return;\r\n        if(!this.settingData.musicEnable)\r\n            return;\r\n        this.curRunningBgm = url;\r\n        //2019-6-22 xiaoC 先获取资源，取不到再加载，否则预加载音乐资源后这里又重复加载（做法与playSound一致）\r\n        let audio = this.resourceMgr.getRes(url, cc.AudioClip);\r\n        if (audio){\r\n            cc.audioEngine.playMusic(audio, true);\r\n        }else{\r\n            let func = (error, audio)=>{\r\n                if(error != null)\r\n                {\r\n                    Logger.error(\"音效加载失败\", error.message, url);\r\n                    return;\r\n                }\r\n                if(url != this.curRunningBgm)\r\n                {\r\n                    Logger.error(\"声音未加载完就切换音乐\", url, this.curRunningBgm);\r\n                    return;\r\n                }\r\n                isAutoRelease && Global.ResourceManager.setAutoReleaseRecursively(audio, true);\r\n                cc.audioEngine.playMusic(audio, true);\r\n            }\r\n            if(cc.sys.isNative && jsb && jsb.fileUtils.isFileExist(url))\r\n            {\r\n                this.resourceMgr.load(url, func)\r\n            }\r\n            else\r\n                this.resourceMgr.loadRes(url, func, cc.AudioClip);\r\n        }\r\n    }\r\n\r\n    public stopMusic()\r\n    {\r\n        cc.audioEngine.stopMusic();\r\n        this.targetBgm = this.curRunningBgm;\r\n        this.curRunningBgm = \"\";\r\n    }\r\n\r\n    //播放音效 isAutoRelease设置切换场景自动释放资源\r\n    public playSound(url:string, isAutoRelease = false)\r\n    {\r\n        if(!this.settingData.soundEnable)\r\n            return;\r\n        if(this.inBackground)\r\n        {\r\n            Logger.error(\"play sound in background!!!\", url);\r\n            return;\r\n        }\r\n        \r\n        let audio = this.resourceMgr.getRes(url, cc.AudioClip);\r\n        if (audio){\r\n           let audioId =  cc.audioEngine.playEffect(audio, false);\r\n           return audioId;\r\n        }\r\n        else{\r\n            this.resourceMgr.loadRes(url, (error, audio)=>\r\n            {\r\n                if(error != null)\r\n                {\r\n                    Logger.error(\"音效加载失败\", error.message, url);\r\n                    return;\r\n                }\r\n                let audioId =  cc.audioEngine.playEffect(audio, false);\r\n                isAutoRelease && Global.ResourceManager.setAutoReleaseRecursively(audio, true);\r\n            }, cc.AudioClip);\r\n        }\r\n    }\r\n\r\n    public playGameBundleSound(url:string,isAutoRelease = false){\r\n        let bundleName = Global.ResourceManager.gameBundle\r\n        if (bundleName){\r\n            return this.playBundleSound(bundleName,url)\r\n        }else {\r\n            Logger.error(\"playGameBundleSound bundleName null\")\r\n        }\r\n    }\r\n\r\n    public playBundleSound(bundleName, url:string, isAutoRelease = false)\r\n    {\r\n        if(!this.settingData.soundEnable)\r\n            return;\r\n        if(this.inBackground)\r\n        {\r\n            Logger.error(\"play sound in background!!!\", url);\r\n            return;\r\n        }\r\n        \r\n        let audio = this.resourceMgr.getBundleRes(bundleName,url, cc.AudioClip);\r\n        if (audio){\r\n           let audioId =  cc.audioEngine.playEffect(audio, false);\r\n           return audioId;\r\n        }\r\n        else{\r\n            this.resourceMgr.loadBundleRes(bundleName,url, (error, audio)=>\r\n            {\r\n                if(error != null)\r\n                {\r\n                    Logger.error(\"音效加载失败\", error.message, url);\r\n                    return;\r\n                }\r\n                let audioId =  cc.audioEngine.playEffect(audio, false);\r\n                isAutoRelease && Global.ResourceManager.setAutoReleaseRecursively(audio, true);\r\n            });\r\n        }\r\n    }\r\n\r\n    //停止所有音效\r\n    public stopAllEffect()\r\n    {\r\n        cc.audioEngine.stopAllEffects();\r\n    }\r\n\r\n    //@todo  通用声音比较多时，考虑注册的形式\r\n    //通用按钮声音  \r\n    public playBtnSound()\r\n    {\r\n        if(this.commonBtnSoundUrl != \"\")\r\n            this.playSound(this.commonBtnSoundUrl);\r\n    }\r\n\r\n    public playCloseSound()\r\n    {\r\n        if(this.commonCloseSoundUrl != \"\")\r\n            this.playSound(this.commonCloseSoundUrl);\r\n    }\r\n\r\n\r\n    public setMusicEnable(value)\r\n    {   \r\n        this.settingData.setMusicEnable(value);\r\n\r\n        if(!value)\r\n            this.stopMusic()\r\n        else\r\n            {\r\n                let bundleName = Global.ResourceManager.gameBundle\r\n                if (bundleName){\r\n                    this.playBundleMusic(bundleName,this.targetBgm);\r\n                }else {\r\n                    this.playMusic(this.targetBgm);\r\n                }\r\n            }   \r\n            \r\n    }\r\n\r\n\r\n    public playHallBGM()\r\n    {\r\n        this.playMusic(Global.Setting.hallBGM);\r\n    }\r\n\r\n    public setSoundEnable(value)\r\n    {\r\n        this.settingData.setSoundEnable(value);\r\n        if(!value)\r\n            this.stopAllEffect();\r\n    }\r\n\r\n    public setMusicVolume(value)\r\n    {\r\n        this.settingData.musicVolume = value;\r\n        cc.audioEngine.setMusicVolume(value);\r\n    }\r\n\r\n    public setSoundVolume(value)\r\n    {\r\n        this.settingData.soundVolume = value;\r\n        cc.audioEngine.setEffectsVolume(value);\r\n    }\r\n\r\n\r\n    //最多有5个音源\r\n    private MaxAudioSourceCount = 5;\r\n    //音源列表\r\n    private audioSourceList = []\r\n    // key -> 音源\r\n    private resToAudioMap = {}\r\n\r\n\r\n    //获得空闲的source\r\n    private getIdleAudioSource()\r\n    {\r\n        let audio = null;\r\n        for(let i = 0; i < this.audioSourceList.length; i++)\r\n        {\r\n            if(this.audioSourceList[i] && !this.audioSourceList[i].isPlaying)\r\n            {\r\n                audio = this.audioSourceList[i];\r\n                break;\r\n            }\r\n        }\r\n        if(audio)\r\n        {\r\n            for(let key in this.resToAudioMap)\r\n            {\r\n                if(this.resToAudioMap[key] == audio)\r\n                {\r\n                    this.resToAudioMap[key] = null;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // //清理被占用的key\r\n        // if(audio != null)\r\n        // {\r\n        //     this.resToAudioMap[audio] = null;\r\n        // }\r\n        return audio;\r\n    }\r\n\r\n    //创建一个新的audioSource\r\n    private getNewAudioSource()\r\n    {\r\n        if(this.audioSourceList.length >= this.MaxAudioSourceCount)\r\n            return null;\r\n        let audioSource = Global.Persist.getPersistNode().addComponent(cc.AudioSource);\r\n        this.audioSourceList.push(audioSource);\r\n        return audioSource;\r\n    }\r\n\r\n    private getAudioSource(key)\r\n    {\r\n        //如果key正在被使用 则返回对应的audioSource\r\n        let audioSource = this.resToAudioMap[key];\r\n        if(audioSource == null)\r\n            audioSource = this.getIdleAudioSource();\r\n        if(audioSource == null)\r\n            audioSource = this.getNewAudioSource();\r\n        return audioSource;\r\n    }\r\n\r\n\r\n    /**\r\n     * 使用AudioSource播放音效，一个音效同时最多只能播放一个，同时最多播放5个音源\r\n     * @param url \r\n     * @param override 是否覆盖播放\r\n     * @param isAutoRelease 资源是否释放\r\n     */\r\n    public playAudioSource(url, override = false, isAutoRelease = false)\r\n    {\r\n        if(!this.settingData.soundEnable)\r\n            return;\r\n        if(this.inBackground)\r\n        {\r\n            Logger.error(\"play sound in background!!!\", url);\r\n            return;\r\n        }\r\n       \r\n        let audioSource = this.getAudioSource(url);\r\n       \r\n        //没有空闲音源\r\n        if(audioSource == null)\r\n            return;\r\n        //正在播放\r\n        if(audioSource.isPlaying && !override)\r\n            return;\r\n        this.resToAudioMap[url] = audioSource;\r\n        let audio = this.resourceMgr.getRes(url, cc.AudioClip);\r\n        if(audio)\r\n        {\r\n            audioSource.clip = audio;\r\n            audioSource.play();\r\n        }\r\n        else\r\n        {\r\n            this.resourceMgr.loadRes(url, (error, audio)=>\r\n            {\r\n                if(error != null)\r\n                {\r\n                    Logger.error(\"音效加载失败\", error.message, url);\r\n                    return;\r\n                }\r\n                isAutoRelease && Global.ResourceManager.setAutoReleaseRecursively(audio, true);\r\n                if(audioSource.isPlaying)\r\n                    return;\r\n                audioSource.clip = audio;\r\n                audioSource.play();\r\n            }, cc.AudioClip);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}"]}