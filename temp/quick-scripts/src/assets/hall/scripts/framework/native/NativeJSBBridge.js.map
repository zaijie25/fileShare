{"version":3,"sources":["assets\\hall\\scripts\\framework\\native\\NativeJSBBridge.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import HallStorageKey from \"../../logic/hallcommon/const/HallStorageKey\";\r\n\r\nexport default class NativeJSBBridge {\r\n    jsbBridge:any;\r\n    clickGames:string[];\r\n    REPORT_CLICK_GAME_KEY = \"clickGame\";\r\n    constructor(){\r\n        this.clickGames = [];\r\n    }\r\n\r\n    public init(){\r\n        if(CC_PREVIEW)\r\n            return;\r\n        if(cc.sys.isBrowser)\r\n            return;\r\n        if (Global.Toolkit.checkVersionSupport(20009)){\r\n            if(cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.OS_IOS){\r\n                if (native && native.JSBBridge){\r\n                    this.jsbBridge = native.JSBBridge.getInstance();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addClickGames(gameid:string){\r\n        if (gameid && gameid != null){\r\n            this.clickGames[this.clickGames.length] = gameid\r\n        }\r\n        let uid = Global.Setting.storage.get(HallStorageKey.Uid) || 'guest'\r\n        this.setBuglyUserID(uid)\r\n        this.addBuglyUserValue(this.REPORT_CLICK_GAME_KEY,JSON.stringify(this.clickGames))\r\n    }\r\n    /**\r\n     * 打印本地日志\r\n     * @param level 1 2 3 4 \r\n     * @param tag \r\n     * @param msg 标题\r\n     * @returns null\r\n     */\r\n    log(level:number,tag:string,msg:string){\r\n        if (this.jsbBridge && this.jsbBridge.log){\r\n            this.jsbBridge.log(level,tag,msg)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置上报UserID\r\n     * @param userID\r\n     * @returns null \r\n     */\r\n    setBuglyUserID(userID:string){\r\n        if (this.jsbBridge && this.jsbBridge.setBuglyUserID){\r\n            this.jsbBridge.setBuglyUserID(userID)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置上报Tag\r\n     * @param userID \r\n     * @returns null\r\n     */\r\n    setBuglyTag(tag:number){\r\n        if (this.jsbBridge && this.jsbBridge.setBuglyTag){\r\n            this.jsbBridge.setBuglyTag(tag)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置上报玩家自定义信息\r\n     * @param key  \r\n     * @param value  \r\n     * @returns null\r\n     */\r\n    addBuglyUserValue(key:string,value:string){\r\n        if (this.jsbBridge && this.jsbBridge.addBuglyUserValue){\r\n            this.jsbBridge.addBuglyUserValue(key,value)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除上报玩家自定义信息\r\n     * @param key  \r\n     * @returns null\r\n     */\r\n    removeBuglyUserValue(key:string){\r\n        if (this.jsbBridge && this.jsbBridge.removeBuglyUserValue){\r\n            this.jsbBridge.removeBuglyUserValue(key)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置bugly 上报错误信息\r\n     * @param msg  \r\n     * @param stack  \r\n     * @returns null\r\n     */\r\n    reportException(msg:string,stack:string){\r\n        if (this.jsbBridge && this.jsbBridge.reportException){\r\n            this.jsbBridge.reportException(msg,stack)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置bugly AppID\r\n     * @param appID  \r\n     * @returns null\r\n     */\r\n    setBuglyAppID(appID:string){\r\n        if (this.jsbBridge && this.jsbBridge.setBuglyAppID){\r\n            this.jsbBridge.setBuglyAppID(appID)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置bugly 渠道id\r\n     * @param channel  \r\n     * @returns null\r\n     */\r\n    setBuglyAppChannel(channel:string){\r\n        if (this.jsbBridge && this.jsbBridge.setBuglyAppChannel){\r\n            this.jsbBridge.setBuglyAppChannel(channel)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置bugly 上报原生版本号\r\n     * @param channel  \r\n     * @returns null\r\n     */\r\n    setBuglyAppVersion(version:string){\r\n        if (this.jsbBridge && this.jsbBridge.setBuglyAppVersion){\r\n            this.jsbBridge.setBuglyAppVersion(version)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解密数据\r\n     * @param encryptData  \r\n     * @returns string 解密数据\r\n     */\r\n    decryptData(encryptData: string){\r\n        if (this.jsbBridge && this.jsbBridge.decryptData){\r\n            let retData = this.jsbBridge.decryptData(encryptData)\r\n            if (retData){\r\n                retData = Global.Toolkit.strReplaceCtrChar(retData);\r\n            }\r\n            // Logger.error(\"decryptData = \" + retData)\r\n            return retData;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取加密数据\r\n     * @param sign_key\r\n     * @param deviceId   \r\n     * @returns string 加密数据\r\n     */\r\n    getLoginSign(sign_key: string, deviceId: string){\r\n        if (this.jsbBridge && this.jsbBridge.getLoginSign){\r\n            let retData = this.jsbBridge.getLoginSign(sign_key,deviceId)\r\n            // Logger.error(\"getLoginSign = \" + retData)\r\n            return retData;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取总内存\r\n     * @param null \r\n     * @returns int 总内存\r\n     */\r\n    getTotalMem(){\r\n        if (this.jsbBridge && this.jsbBridge.getTotalMem){\r\n            let retData = this.jsbBridge.getTotalMem()\r\n            Logger.error(\"getTotalMem = \" + retData)\r\n            return retData;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 获取剩余可用内存\r\n     * @param null \r\n     * @returns int 可用内存\r\n     */\r\n    getFreeMem(){\r\n        if (this.jsbBridge && this.jsbBridge.getFreeMem){\r\n            let retData = this.jsbBridge.getFreeMem()\r\n            Logger.error(\"getFreeMem = \" + retData)\r\n            return retData;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取已用内存(IOS 可以获取 Android 获取不了)\r\n     * @param null \r\n     * @returns int 已用内存\r\n     */\r\n    getUsedMem(){\r\n        if (this.jsbBridge && this.jsbBridge.getUsedMem){\r\n            let retData = this.jsbBridge.getUsedMem()\r\n            Logger.error(\"getUsedMem = \" + retData)\r\n            return retData;\r\n        }\r\n    }\r\n\r\n    // /**\r\n    //  * 开启获取网络延迟\r\n    //  * @param null \r\n    //  * @returns \r\n    //  */\r\n    // startGetNetDelay(hostName:string){\r\n    //     Logger.error(\"startGetNetDelay = hostName \" + hostName)\r\n    //     if (this.jsbBridge && this.jsbBridge.startGetNetDelay){\r\n    //         this.jsbBridge.startGetNetDelay(hostName)\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    //  * 停止获取网络延迟\r\n    //  * @param null \r\n    //  * @returns \r\n    //  */\r\n    // stopGetNetDelay(){\r\n    //     if (this.jsbBridge && this.jsbBridge.stopGetNetDelay){\r\n    //         this.jsbBridge.stopGetNetDelay()\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    //  * 获取网络延迟\r\n    //  * @param null \r\n    //  * @returns \r\n    //  */\r\n    // getNetDelay(){\r\n    //     if (this.jsbBridge && this.jsbBridge.getNetDelay){\r\n    //         let retData = this.jsbBridge.getNetDelay()\r\n    //         Logger.error(\"getNetDelay = \" + retData)\r\n    //         return retData;\r\n    //     }\r\n    // }\r\n}"]}