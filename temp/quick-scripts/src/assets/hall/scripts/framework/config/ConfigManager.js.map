{"version":3,"sources":["assets\\hall\\scripts\\framework\\config\\ConfigManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ConfigBase from \"./ConfigBase\";\r\n\r\nclass ConfigDefine\r\n{\r\n    public static readonly appCfg = \"appconfig\";\r\n    public static readonly jcGameCfg = \"jcgame\";\r\n    public static readonly jcAppCfg = \"jcapp\";\r\n}\r\n\r\n/**\r\n * 配置管理器,目前只支持json格式的\r\n */\r\nexport default class ConfigManager\r\n{\r\n    readonly requiredConfigList : string[] =\r\n    [\r\n        ConfigDefine.appCfg,\r\n        ConfigDefine.jcGameCfg,\r\n        ConfigDefine.jcAppCfg,\r\n    ]\r\n\r\n    cfgMap:{[key:string]:ConfigBase} = {};\r\n\r\n    private static _instance:ConfigManager;\r\n    public static get Instance() {\r\n        if(ConfigManager._instance == null) {\r\n            ConfigManager._instance = new ConfigManager();\r\n        }\r\n        return ConfigManager._instance;\r\n    }\r\n\r\n    protected constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 初始化函数\r\n     * @param complete \r\n     */\r\n    public init(complete:Function)\r\n    {\r\n        let fullNameArray:string[] = [];\r\n        for(let i = 0; i < this.requiredConfigList.length; i++)\r\n        {\r\n            let fullName = this.getJsonFullName(this.requiredConfigList[i]);\r\n            fullNameArray.push(fullName);\r\n        }\r\n        this.loadCfg(fullNameArray, complete, this.requiredConfigList);\r\n    }\r\n\r\n    /**\r\n     * 加载配置\r\n     * @param fullNames 配置文件全路径\r\n     * @param onComplete 加载完成后的回调\r\n     * @param aliases 配置文件的别名,这个值默认为配置文件全路径\r\n     */\r\n    public loadCfg(fullNames:string[], onComplete?:Function, aliases?:string[])\r\n    {\r\n        Global.ResourceManager.loadResArr(fullNames, function (error, assets) {\r\n            if (error != null) {\r\n                Logger.error(\"ConfigManager::loadCfg() loadResArr error = \" + error + \", return!!!\");\r\n\t\t        return;\r\n            }\r\n            \r\n            for(let i=0; i<fullNames.length; i++) {\r\n                let fullName = fullNames[i];\r\n                let content =  assets[i];\r\n                if(content != null) {\r\n                    let json = JSON.parse(content);\r\n                    if(json == null) {\r\n                        Logger.error(\"ConfigManager::loadCfg() json == null, cfgPath = \" + fullName);\r\n                    }\r\n                    else {\r\n                        let config = new ConfigBase();\r\n                        config.alias = (aliases != null && aliases.length>i && aliases[i].length > 0) ? aliases[i] : fullName;\r\n                        config.fullName = fullName;\r\n                        config.content = json;\r\n                        this.cfgMap[config.alias] = config;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if(onComplete != null) {\r\n                onComplete(error, assets);\r\n            }\r\n\r\n            for(let i=0; i<fullNames.length; i++) {\r\n                Global.ResourceManager.releaseRes(fullNames[i]);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 卸载配置\r\n     * @param cfgName 配置文件的别名或者全路径\r\n     */\r\n    public unloadCfg(cfgName:string):boolean\r\n    {\r\n        let config = this.getCfg(cfgName);\r\n        if(config != null) {\r\n            this.cfgMap[config.alias] = null;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 获得配置对象\r\n     * @param cfgName 配置文件的别名或者全路径\r\n     * @returns ConfigBase对象\r\n     */\r\n    public getCfg(cfgName:string):ConfigBase\r\n    {\r\n        if(this.cfgMap[cfgName] != null)\r\n        {\r\n            return this.cfgMap[cfgName];\r\n        }\r\n        else\r\n        {\r\n            for(let key in this.cfgMap)\r\n            {\r\n                if( this.cfgMap[key].fullName == cfgName)\r\n                {\r\n                    return this.cfgMap[key];\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取配置里某个字段对应的值\r\n     * @param cfgName 配置文件的别名或者全路径\r\n     * @param key 字段的key\r\n     * @param defaultValue 当没有找到对应值时返回的默认值\r\n     * @param type 返回值的类型,目前只支持：string, number,其他类型无效\r\n     */\r\n    public getValue(cfgName:string, key:any, defaultValue?:any, type?:string):any\r\n    {\r\n        let cfg = this.getCfg(cfgName);\r\n        if(cfg == null)\r\n            return null;\r\n        return cfg.getValue(key,defaultValue, type);\r\n    }\r\n\r\n    /**\r\n     * 获取配置的所有内容\r\n     * @param cfgName 配置文件的别名或者全路径\r\n     */\r\n    public getCotent(cfgName:string):any {\r\n        let cfg = this.getCfg(cfgName);\r\n        if(cfg == null)\r\n            return null;\r\n        return cfg.getContent();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param configName \r\n     */\r\n    private getJsonFullName(configName):string\r\n    {\r\n        return \"config/\" + configName + \".json\";\r\n    }\r\n}"]}