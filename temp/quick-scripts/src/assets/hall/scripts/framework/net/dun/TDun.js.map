{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\dun\\TDun.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import IDun from \"./IDun\";\r\nimport HallStorageKey from \"../../../logic/hallcommon/const/HallStorageKey\";\r\nimport { ReportTool } from \"../../../logic/core/tool/ReportTool\";\r\nimport { DUNTYPE, DUNSTATE } from \"./AppDunControl\";\r\n\r\nexport default class TDun implements IDun {\r\n    \r\n    private isDunInit = false;\r\n    private _isSupport = false;\r\n    private sdkName = \"tdun\";\r\n    private _dunType = 0;\r\n\r\n    constructor(dunType){\r\n        this._dunType = dunType\r\n        Global.NativeEvent.isSupportSDK(this.sdkName, null, (retObj) => {\r\n            if (retObj.result == 0) {\r\n                this._isSupport = true;\r\n            } else {\r\n                Logger.error(\"checkAppIsSupportDunByType dunType = \" + dunType + \" isSupport = false\")\r\n            }\r\n        })\r\n    }\r\n\r\n    public  isAppSupport(){\r\n        return this._isSupport\r\n    }\r\n\r\n    public checkCfgIsValid(cfg:any){\r\n        if (cfg && cfg.key){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //异步初始化\r\n    public init(cfg,callback?: Function) {\r\n        // Logger.error(\"init TDun SDK\")\r\n        if (!this.checkCfgIsValid(cfg)){\r\n            Logger.error(\"init TDun SDK checkCfgIsValid  = false\")\r\n            return;\r\n        }\r\n        if (this.isDunInit) {\r\n            Logger.error(\"init TDun SDK this.isTDunInit  = true\")\r\n            return;\r\n        }\r\n        if (!this._isSupport){\r\n            Logger.error(\"init TDun SDK is not support\")\r\n            return;\r\n        }\r\n        let initState = this.getInitState()\r\n        Logger.error(\"init TDun SDK state = \" + initState)\r\n        let tDunkey = cfg.key\r\n        if (initState == DUNSTATE.INIT || initState == DUNSTATE.FAILED) {\r\n            // Logger.error(\"initTDunSDK\")\r\n            if (tDunkey) {\r\n                Global.NativeEvent.initTDunSDK(tDunkey, (retObj) => {\r\n                    // Logger.error(\"initTDunSDK ret = \" + JSON.stringify(retObj))\r\n                    if (retObj) {\r\n                        let result = Number(retObj.result)\r\n                        if (result == 0 || result == 0.0) {\r\n                            this.isDunInit = true;\r\n                            Global.Event.event(GlobalEvent.DunInitFinish);\r\n                            Global.Setting.storage.set(HallStorageKey.DunInitRecord + \"_\" + DUNTYPE.T_DUN,1)\r\n                            // Logger.error(\"initTDunSDK ret = 0 success \")\r\n                            // let reportParam = { \"result\": 0 ,\"type\": DUNTYPE.T_DUN}\r\n                            // Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_OK, reportParam)\r\n                        } else {\r\n                            Logger.error(\"initTDunSDK ret != 0 failed \")\r\n                            // let reportParam = { \"result\": \"ret != 0 \" + result ,\"type\": DUNTYPE.T_DUN}\r\n                            // Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_TDUN_ERROR, reportParam)\r\n                        }\r\n                    }else {\r\n                        Logger.error(\"initTDunSDK retObj == null failed \")\r\n                        // let reportParam = { \"result\": \"initTDunSDK retObj == null failed\" ,\"type\": DUNTYPE.T_DUN}\r\n                        // Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_TDUN_ERROR, reportParam) \r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback()\r\n                    }\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public getInitState() {\r\n        if (!this._isSupport){\r\n            return DUNSTATE.FAILED\r\n        }\r\n        let ret = Global.NativeEvent.getTDunInitRet();\r\n        return ret;\r\n    }\r\n\r\n    public getPort(lo_port) {\r\n        let port = Global.NativeEvent.getTDunPort(lo_port)\r\n        Logger.error(\"TDun getPort port = \" + port)\r\n        return port;\r\n    }\r\n\r\n    public getServerIPAndPort(host:string,lo_port:number,attr:any){\r\n        if (!this.isDunInit){\r\n            Logger.error(\"TDun getServerIPAndPort isDunInit = false\")\r\n            return;\r\n        }\r\n        let ip = \"127.0.0.1\"\r\n        let port = this.getPort(lo_port)\r\n        return {\"ip\":ip,\"port\":port}\r\n    }\r\n\r\n    public isInit() {\r\n        if (!this._isSupport){\r\n            return false\r\n        }\r\n        if (!this.isDunInit) {\r\n            let ret = this.getInitState();\r\n            if (ret == 0) {\r\n                this.isDunInit = true;\r\n            }\r\n        }\r\n        return this.isDunInit;\r\n    }\r\n\r\n}"]}