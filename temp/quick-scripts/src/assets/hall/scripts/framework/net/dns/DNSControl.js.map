{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\dns\\DNSControl.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import IDNS, { DNSInfo } from \"./IDNS\";\r\nimport WangsuDNS from \"./WangsuDns\";\r\nimport OldVersionDNS from \"./OldVersionDNS\";\r\nimport AliDNS from \"./AliDNS\";\r\nimport { ServerUrl } from \"../../../logic/core/setting/ServerRoutes\";\r\n\r\nexport enum DNSTYPE {\r\n    None = 0,\r\n    OldVersion = 1,\r\n    Wangsu = 2,\r\n    Ali = 3,\r\n}\r\nexport default class DNSControl {\r\n    private DNSType = DNSTYPE.None;\r\n\r\n    private checkInerval = 5000;\r\n    private timeID = null;\r\n\r\n    public DNS: IDNS;\r\n\r\n    //等待模式  需要等到ip返回才能出发回调\r\n    public syncMode = false;\r\n\r\n    //默认为网宿 同步模式\r\n    // public DNSConfig = {type:2, syncMode:1};\r\n    //如果默认为ALi 需要配置对应参数\r\n    public DNSConfig = { type: 3, accountId: \"151925\", syncMode: 1 }\r\n\r\n    public selfDNSMap = {}\r\n\r\n\r\n    //更新DNS配置  下次重启生效\r\n    public setDNSConfg(cfg) {\r\n        if (cfg == null && cfg.type == null)\r\n            return;\r\n        Global.Setting.storage.setObject(\"DNSConfig\", cfg);\r\n    }\r\n\r\n    private loadDNSConfig() {\r\n        let cfg = Global.Setting.storage.getObject(\"DNSConfig\");\r\n        if (cfg == null)\r\n        {\r\n            Logger.error(\"loadDNSConfig config = null\")\r\n            return;\r\n        }\r\n        this.DNSConfig = cfg;\r\n\r\n    }\r\n\r\n\r\n    public init() {\r\n        this.loadDNSConfig();\r\n        //同步等待模式  配置为1为同步等待\r\n        if (this.DNSConfig && this.DNSConfig.syncMode)\r\n            this.syncMode = this.DNSConfig.syncMode == 1;\r\n        let dnsType = this.DNSConfig.type\r\n        this.DNSType = dnsType ? Number(dnsType) : 0;\r\n        //网页版不开启DNS\r\n        if (!cc.sys.isNative)\r\n            this.DNSType = DNSTYPE.None;\r\n        this.DNS = this.createDns();\r\n\r\n        Logger.error(\"DNS config\", JSON.stringify(this.DNSConfig))\r\n        Logger.error(\"DNS Type is \", this.DNSType)\r\n        Logger.error(\"DNS syncMode is \", this.syncMode)\r\n        \r\n        if (this.DNS) {\r\n            this.DNS.init(this.DNSConfig);\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    private startTimer() {\r\n        clearInterval(this.timeID);\r\n        this.timeID = setInterval(() => {\r\n            if (this.DNS)\r\n                this.DNS.update(this.checkInerval / 1000);\r\n        }, this.checkInerval);\r\n    }\r\n\r\n    private createDns() {\r\n        switch (this.DNSType) {\r\n            case DNSTYPE.Wangsu:\r\n                return new WangsuDNS()\r\n            case DNSTYPE.OldVersion:\r\n                return new OldVersionDNS();\r\n            case DNSTYPE.None:\r\n                return null;\r\n            case DNSTYPE.Ali:\r\n                return new AliDNS();\r\n            default:\r\n                Logger.error(\"找不到DNS类型！！！！\", this.DNSType)\r\n                this.DNSType = DNSTYPE.None;\r\n        }\r\n    }\r\n\r\n    //请求开关\r\n    public requestHosts(hosts, callback) {\r\n        Logger.error(\"requestHosts\", hosts, this.DNSType, this.syncMode);\r\n        hosts = this.filterSelfDNS(hosts);\r\n        if (this.DNSType == DNSTYPE.None || this.DNS == null) {\r\n            if (callback)\r\n                callback();\r\n            return;\r\n        }\r\n        this.DNS.requestHosts(hosts, callback, this.syncMode);\r\n    }\r\n\r\n\r\n    public getIp(host, ipAreaType = 0) {\r\n        //先检查内部dns列表\r\n        if (this.selfDNSMap[host])\r\n            return this.selfDNSMap[host];\r\n        if (this.DNSType == DNSTYPE.None)\r\n            return null;\r\n        return this.DNS.getIp(host, ipAreaType);\r\n    }\r\n\r\n    public getHttpRequestDNSInfo(url:ServerUrl, ipAreaType = 0): DNSInfo {\r\n        Logger.log(\"getHttpRequestDNSInfo before \" + url.printSelf())\r\n        let dnsInfo = this.getSelfDNSInfo(url)\r\n        if (dnsInfo != null){\r\n            Logger.log(\"getHttpRequestDNSInfo dnsInfo != null\")\r\n            return dnsInfo;\r\n        }\r\n        if (this.DNSType == DNSTYPE.None || this.DNS == null){\r\n            Logger.log(\"getHttpRequestDNSInfo DNSType == null\")\r\n            return null;\r\n        }\r\n        dnsInfo = this.DNS.getHttpDNSInfo(url)\r\n        Logger.log(\"getHttpRequestDNSInfo after \" + url.printSelf())\r\n        return dnsInfo\r\n    }\r\n\r\n    private getSelfDNSInfo(url:ServerUrl){\r\n        if (url.address == url.addressHost && url.addressHost == url.realHost){\r\n            Logger.log(\"getSelfDNSInfo address == addressHost\")\r\n            return;\r\n        }\r\n        let isIpAddress = Global.UrlUtil.checkIsIp(url.address)\r\n        let isRealHostIpAddress = Global.UrlUtil.checkIsIp(url.realHost)\r\n        if (!isIpAddress && !isRealHostIpAddress){\r\n            Logger.log(\"getSelfDNSInfo address && realHost is not ip\")\r\n            return ;\r\n        }\r\n        let requestInfo = new DNSInfo();\r\n        if (isRealHostIpAddress){\r\n            url.address = url.realHost\r\n        }\r\n        \r\n        requestInfo.ip = url.address;\r\n        requestInfo.host = url.addressHost\r\n        requestInfo.port = url.port;\r\n        let headerMap = { \"Host\": url.addressHost }\r\n        if (url.cerPath){\r\n            headerMap[\"CertPath\"] = url.cerPath\r\n        }\r\n        requestInfo.headerMap = headerMap\r\n        return requestInfo\r\n    }\r\n\r\n\r\n    private filterSelfDNS(hosts) {\r\n        let realHost = [];\r\n        for (let i = 0; i < hosts.length; i++) {\r\n            if (!this.selfDNSMap[hosts[i]])\r\n                realHost.push(hosts[i]);\r\n        }\r\n        return realHost;\r\n    }\r\n\r\n\r\n    //预处理盾\r\n    public dealDunRoute(serverUrl:ServerUrl,lo_port,lo_type){\r\n        Logger.error(\"dealDunRoute serverurl ,lo_port,lo_type \" , serverUrl.printSelf(),lo_port,lo_type)\r\n        if (!lo_type || !lo_port){\r\n            return serverUrl;\r\n        }\r\n        let isSupport = Global.AppDun.checkAppIsSupportDunByType(lo_type)\r\n        if (!isSupport){\r\n            Logger.error(\"App not support dun = \" + lo_type)\r\n            return serverUrl;\r\n        }\r\n\r\n        let isDunInit = Global.AppDun.getDunIsInitByType(lo_type)\r\n        let ipPortInfo = Global.AppDun.getServerIPAndPort(serverUrl.realHost,lo_port,lo_type,serverUrl.attr)\r\n        if (lo_port && lo_port > 0 && isDunInit && ipPortInfo) {\r\n            let serverIp = ipPortInfo.ip\r\n            let serverPort = ipPortInfo.port\r\n            if (!serverIp || !serverPort){\r\n                Logger.error(\"dealDunRoute serverIp == null || serverPort == null \")\r\n                return serverUrl;\r\n            }\r\n            serverUrl.lo_type = lo_type\r\n            let address = serverUrl.address\r\n            if (this.checkIsSelfDnsUrl(address)) {\r\n                let array = address.split(\"...\");\r\n                if (array.length < 2) {\r\n                    Logger.error(\"dealDunRoute array < 2\")\r\n                    return serverUrl;\r\n                }\r\n                let host = array[1]\r\n                if (host) {\r\n                    serverUrl.address = serverIp\r\n                    serverUrl.port = serverPort\r\n                    serverUrl.addressHost = host\r\n                    // url = serverIp + \":\" + serverPort + \"...\" + host\r\n                    Logger.error(\"dealDunRoute isSelfDnsUrl = true  host != null \" + serverUrl.printSelf())\r\n                    \r\n                } else {\r\n                    Logger.error(\"... host = null\")\r\n                    // url = serverIp + \":\" + serverPort\r\n                    serverUrl.address = serverIp\r\n                    serverUrl.port = serverPort\r\n\r\n                    Logger.error(\"dealDunRoute isSelfDnsUrl = true  host == null\" + serverUrl.printSelf())\r\n                    \r\n                }\r\n            } else {\r\n                // let host = url\r\n                // url = serverIp + \":\" + serverPort + \"...\" + host\r\n                serverUrl.address = serverIp\r\n                serverUrl.port = serverPort\r\n                Logger.error(\"dealDunRoute isSelfDnsUrl = false  \" + serverUrl.printSelf())\r\n            }\r\n        }\r\n        return serverUrl\r\n    }\r\n\r\n    public dealSelfRoute(serverUrl:ServerUrl){\r\n        let address_url = serverUrl.address\r\n        if (this.checkIsSelfDnsUrl(address_url)) {\r\n            let array = address_url.split(\"...\");\r\n            if (array.length < 2) {\r\n                Logger.error(\"dealSelfRoute array < 2\")\r\n                return serverUrl;\r\n            }\r\n            let address = array[0]\r\n            let addressHost = array[1]\r\n            let addressPort = Global.UrlUtil.getPortFromUrl(address)\r\n            serverUrl.address = address\r\n            // Logger.error(\"dealSelfRoute address = \" + address)\r\n            // Logger.error(\"dealSelfRoute addressHost = \" + addressHost)\r\n            // Logger.error(\"dealSelfRoute addressPort = \" + addressPort)\r\n\r\n            if (addressPort){\r\n                serverUrl.port = addressPort\r\n                let addressUrl = Global.UrlUtil.getHostFromUrl(address)\r\n                serverUrl.address = addressUrl\r\n                serverUrl.realHost = addressHost\r\n\r\n            }else {\r\n                let isAddressIP = Global.UrlUtil.checkIsIp(address)\r\n                if (!isAddressIP){\r\n                    serverUrl.realHost = address\r\n                }else {\r\n                    serverUrl.realHost = addressHost\r\n                }\r\n                \r\n            }\r\n            serverUrl.addressHost = addressHost\r\n            \r\n        } \r\n    }\r\n\r\n    // //预处理域名 \r\n    // public dealSelfDNSRoute(url, lo_port,lo_type) {\r\n    //     // Logger.error(\"dealSelfDNSRoute url = \" + url)\r\n    //     // Logger.error(\"dealSelfDNSRoute lo_port = \" + lo_port)\r\n    //     // Logger.error(\"dealSelfDNSRoute lo_type = \" + lo_type)\r\n    //     if (!lo_type || !lo_port){\r\n    //         return url;\r\n    //     }\r\n    //     let isSupport = Global.AppDun.checkAppIsSupportDunByType(lo_type)\r\n    //     if (!isSupport){\r\n    //         Logger.error(\"App not support dun = \" + lo_type)\r\n    //         return url;\r\n    //     }\r\n\r\n    //     let isDunInit = Global.AppDun.getDunIsInitByType(lo_type)\r\n    //     let ipPortInfo = Global.AppDun.getServerIPAndPort(url,lo_port,lo_type)\r\n    //     if (lo_port && lo_port > 0 && isDunInit && ipPortInfo) {\r\n    //         let serverIp = ipPortInfo.ip\r\n    //         let serverPort = ipPortInfo.port\r\n    //         if (!serverIp || !serverPort){\r\n    //             Logger.error(\"dealSelfDNSRoute serverIp == null || serverPort == null \")\r\n    //             return url;\r\n    //         }\r\n    //         if (this.checkIsSelfDnsUrl(url)) {\r\n    //             let array = url.split(\"...\");\r\n    //             if (array.length < 2) {\r\n    //                 Logger.error(\"dealSelfDNSRoute array < 2\")\r\n    //                 return url;\r\n    //             }\r\n    //             let host = array[1]\r\n    //             if (host) {\r\n    //                 url = serverIp + \":\" + serverPort + \"...\" + host\r\n    //             } else {\r\n    //                 Logger.error(\"... host = null\")\r\n    //                 url = serverIp + \":\" + serverPort\r\n    //             }\r\n    //         } else {\r\n    //             let host = url\r\n    //             url = serverIp + \":\" + serverPort + \"...\" + host\r\n    //         }\r\n    //     }\r\n    //     // Logger.error(\"dealSelfDNSRoute url = \" + url)\r\n    //     return url;\r\n    // }\r\n\r\n    //ip...host\r\n    private checkIsSelfDnsUrl(url: string) {\r\n        //不可能等于0\r\n        return url.indexOf(\"...\") > 0;\r\n    }\r\n\r\n}"]}