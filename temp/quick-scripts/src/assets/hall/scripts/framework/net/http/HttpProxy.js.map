{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\http\\HttpProxy.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import HttpRequest from \"./HttpRequest\";\r\nimport { ServerRouteInfo, ServerUrl } from \"../../../logic/core/setting/ServerRoutes\";\r\nimport { ReportTool } from \"../../../logic/core/tool/ReportTool\";\r\n\r\nexport class ParallelReqInfo\r\n{\r\n    public isReq = false;\r\n    public isRsp = false\r\n    public isReport = false;\r\n    public reqLines = [];\r\n}\r\n\r\nexport class ParallelReqLine\r\n{\r\n    public lineIndex = 0;\r\n    public repFlag = 0;// 0 未回复，1为有回包 2 为没回包\r\n    public startTime = 0;\r\n    public endTime = 0;\r\n    public reqTime = 0;\r\n    public host = \"\"\r\n    public url = \"\"\r\n}\r\n\r\nexport default class HttpProxy {\r\n    static HttpTimeout = 15000;\r\n    public cookie = \"\";\r\n    public reqList = []\r\n    //并发请求key\r\n    public parallelReqKey = {}\r\n\r\n    constructor(){\r\n        this.parallelReqKey[\"checkversion\"] = new ParallelReqInfo;\r\n        this.parallelReqKey[\"heartbeat\"] = new ParallelReqInfo;\r\n    }\r\n\r\n    \r\n    public onUpdate(dt)\r\n    {\r\n        let reqModel = this.reqList.shift()\r\n        if (reqModel){\r\n            let url = reqModel[\"url\"]\r\n            let msg = reqModel[\"msg\"]\r\n            let reqType = reqModel[\"reqType\"]\r\n            let onComplete = reqModel[\"onComplete\"]\r\n            let onError = reqModel[\"onError\"]\r\n            let timeout = reqModel[\"timeout\"]\r\n            let req = new HttpRequest();\r\n            req.on(HttpRequest.EVENT_COMPLETE, this, onComplete)\r\n            req.on(HttpRequest.EVENT_ERROR, this, onError);\r\n            req.setTimeout(timeout);\r\n            Logger.log(\"Send HallMSG:\", msg, url.getUrl())\r\n            msg = msg ? msg: \"\"\r\n            let encrptedMsg = msg\r\n            if (url.isEncrptParam && msg){\r\n                encrptedMsg = Global.AESUtil.aesEncrptMsg(msg)\r\n            }\r\n            // Logger.log(\"Send Hall encrptedMsg = \" + encrptedMsg)\r\n            req.send(url, encrptedMsg, reqType);\r\n        }\r\n    }\r\n\r\n    private pushReqListModel(url:ServerUrl,msg:string,reqType:string,onComplete:Function,onError:Function,timeout:number){\r\n        let reqModel = {}\r\n        reqModel[\"url\"] = url;\r\n        reqModel[\"msg\"] = msg;\r\n        reqModel[\"reqType\"] = reqType;\r\n        reqModel[\"onComplete\"] = (msg) => {\r\n            Global.ReportTool.markSuccess(url);\r\n            if(onComplete)\r\n                onComplete(msg);\r\n        }\r\n        reqModel[\"onError\"] = onError\r\n        reqModel[\"timeout\"] = timeout\r\n        this.reqList[this.reqList.length] = reqModel;\r\n        Logger.log(\"reqList length = \" + this.reqList.length)\r\n    }\r\n    //http post\r\n    public send(url: ServerUrl, param: any, onComplete: Function, onError: Function) {\r\n        let msg = this.getSendContent(param);\r\n        this.pushReqListModel(url,msg,\"post\",onComplete, (http: XMLHttpRequest,hTime:number) => {\r\n            this.sendError(http, url, param, onComplete, onError,hTime)\r\n        },HttpProxy.HttpTimeout)\r\n        \r\n    }\r\n\r\n    private sendError(http: XMLHttpRequest, url: ServerUrl, param: any, onComplete: Function, onError: Function,hTime = 0) {\r\n        let needReload = this.onHttpError(http, url,hTime)\r\n        // if (needReload){\r\n        //     this.send(url,param,onComplete,onError)\r\n        // }\r\n\r\n        if (onError) {\r\n            onError()\r\n            onError = null\r\n        }\r\n    }\r\n\r\n    public sendWithServerRoute(serverRouteInfo: ServerRouteInfo, suffix, param: any, onComplete: Function, onError: Function) {\r\n        // let url = serverRouteInfo.getUrl() + suffix;\r\n        let serverUrl = serverRouteInfo.getUrl()\r\n        serverUrl.suffix = serverUrl.suffix + suffix\r\n        let msg = this.getSendContent(param);\r\n        this.pushReqListModel(serverUrl,msg,\"post\",onComplete, (http: XMLHttpRequest,hTime:number) => {\r\n            this.sendWithServerRouteError(http, serverUrl, serverRouteInfo, suffix, param, onComplete, onError,hTime)\r\n        },HttpProxy.HttpTimeout)\r\n    }\r\n\r\n    private sendWithServerRouteError(http: XMLHttpRequest, url, serverRouteInfo: ServerRouteInfo, suffix, param: any, onComplete: Function, onError: Function,hTime:number) {\r\n        let needReload = this.onHttpError(http, url,hTime)\r\n\r\n        if (onError) {\r\n            onError()\r\n            onError = null\r\n        }\r\n    }\r\n\r\n    //http get\r\n    public get(url: string, onComplete: Function, onError?: Function, param?: any) {\r\n        let msg = this.getSendContent(param);\r\n        let serverUrl = new ServerUrl()\r\n        serverUrl.parse(url)\r\n        this.pushReqListModel(serverUrl,msg,\"get\",onComplete, (http: XMLHttpRequest,hTime:number) => {\r\n            this.getError(http, serverUrl, onComplete, onError, param,hTime);\r\n        },HttpProxy.HttpTimeout)\r\n    }\r\n\r\n    private getError(http: XMLHttpRequest, url: ServerUrl, onComplete: Function, onError?: Function, param?: any,hTime = 0) {\r\n        let needReload = this.onHttpError(http, url,hTime)\r\n        if (onError) {\r\n            onError()\r\n            onError = null\r\n        }\r\n    }\r\n\r\n    public getWithRetry(url: string, onComplete: Function, onError?: Function, param?: any, retryTime = 0) {\r\n        let msg = this.getSendContent(param);\r\n        let serverUrl = new ServerUrl()\r\n        serverUrl.parse(url)\r\n        this.pushReqListModel(serverUrl,msg,\"get\",onComplete, (http: XMLHttpRequest,hTime:number) => {\r\n            this.getWithRetryError(http, serverUrl, onComplete, onError, param, retryTime,hTime)\r\n            // this.onGetError(url, onComplete, onError, param, retryTime)\r\n        },HttpProxy.HttpTimeout)\r\n    }\r\n\r\n    private getWithRetryError(http: XMLHttpRequest, url: ServerUrl, onComplete: Function, onError?: Function, param?: any, retryTime = 0,hTime = 0) {\r\n        let needReload = this.onHttpError(http, url,hTime)\r\n        if (onError) {\r\n            onError()\r\n            onError = null\r\n        }\r\n    }\r\n\r\n\r\n     //直接请求 不使用自定义httpdns\r\n     public requestDirect(url, onComplete: Function, onError?: Function, type: string = \"get\", param?: any, timeout = 15000) {\r\n        let msg = this.getSendContent(param);\r\n        let serverUrl = new ServerUrl()\r\n        serverUrl.parse(url)\r\n        serverUrl.isInnerRequest = false;\r\n        this.pushReqListModel(serverUrl,msg,\"get\",onComplete,(http: XMLHttpRequest,hTime:number) => {\r\n            this.requestDirectError(http, serverUrl, onComplete, onError, type, param, timeout,hTime)\r\n        },timeout)\r\n    }\r\n\r\n    private requestDirectError(http: XMLHttpRequest, url, onComplete: Function, onError?: Function, type: string = \"get\", param?: any, timeout = 15000,hTime = 0) {\r\n        let needReload = this.onHttpError(http, url,hTime)\r\n\r\n        if (onError) {\r\n            onError()\r\n            onError = null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 1.进行错误码上报/提示\r\n     * 2.307/302 重定向请求\r\n     * \r\n     * \r\n     * \r\n     * */\r\n    private onHttpError(http: XMLHttpRequest, serverUrl: ServerUrl,hTime = 0) {\r\n        if (!http || !serverUrl) {\r\n            Logger.error(\"onHttpError http  || url = null\")\r\n            return;\r\n        }\r\n        let httpStatus = http.status;\r\n        let httpBody = http.response || http.responseText\r\n        let httpHeaders = http.getAllResponseHeaders();\r\n        let reqUrl = serverUrl.getUrl();\r\n        let realHost = serverUrl.realHost;\r\n        let addrHost = serverUrl.addressHost\r\n\r\n        //获取host\r\n        let host = Global.UrlUtil.getHostFromUrl(reqUrl);\r\n        if (Global.ReportTool.isReportUrl(serverUrl)) {\r\n            Logger.error(\"isReportUrl !!!!\")\r\n            return;\r\n        }\r\n\r\n        let reportSignUrl = \"\"\r\n        if (serverUrl.isInnerRequest){\r\n            let httpSignInfo = Global.UrlUtil.dealHttpSign(serverUrl)\r\n            reportSignUrl = httpSignInfo.sign_url\r\n        }else {\r\n            reportSignUrl = serverUrl.getUrl()\r\n        }\r\n        let reportParam = { \"error_code\": httpStatus, \"body\": httpBody, \"url\": reportSignUrl ,\"htime\":hTime,\"host\":realHost, \"addrHost\":addrHost }\r\n        let reportKey = ReportTool.REPORT_TYPE_HTTP_ERROR\r\n        //上报错误\r\n        let sceneName = '';\r\n        if (this.checkIsDataUrl(realHost)) {\r\n            sceneName = 'D'\r\n            reportKey = ReportTool.REPORT_TYPE_DATA_ERROR\r\n        } else if (reqUrl.indexOf(\"login\") > -1) {\r\n            sceneName = \"L\"\r\n            reportKey = ReportTool.REPORT_TYPE_LOGIN_ERROR\r\n        } else if (reqUrl.indexOf(\"checkversion\") > -1) {\r\n            sceneName = \"C\"\r\n            reportKey = ReportTool.REPORT_TYPE_CHECKVERSION_ERROR\r\n        } else if (reqUrl.indexOf(\"httpdns\") > -1) {\r\n            reportKey = ReportTool.REPORT_TYPE_HTTPDNS_ERROR\r\n        }\r\n        let needReload = false;\r\n        if (!this.isHostWithNoTips(reqUrl, httpStatus)) {\r\n            Global.UI.fastTip(\"网络异常：H-\" + sceneName + httpStatus);\r\n        }\r\n        //重定向\r\n        if (httpStatus == 308 || httpStatus == 307 || httpStatus == 302) {\r\n            let cookie = http.getResponseHeader(\"Set-Cookie\")\r\n            if (cookie) {\r\n                Logger.error(\"httpStatus \" + httpStatus)\r\n                Logger.error(\"307 cookie = \" + cookie)\r\n                let cookieStrArray = cookie.split(\";\")\r\n                if (cookieStrArray && cookieStrArray.length > 0) {\r\n                    let cookieStr = cookieStrArray[0]\r\n                    if (cookieStr && cookieStr.length > 0) {\r\n                        cookieStr = cookieStr.trim();\r\n                        this.cookie = cookieStr\r\n                        Logger.error(\"307 set cookie = \" + this.cookie)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Global.ReportTool.ReportClientError(reportKey, reportParam)\r\n        }\r\n\r\n\r\n        Global.ReportTool.markFailed(serverUrl, httpStatus);\r\n        // Logger.error(\"httpHeaders : \" + httpHeaders)\r\n        return needReload;\r\n    }\r\n\r\n    //过滤不需要弹tips错误的域名\r\n    private isHostWithNoTips(url, httpStatus) {\r\n        if (httpStatus == 0 || httpStatus == 307 || httpStatus == 302) {\r\n            return true;\r\n        }\r\n        if (url) {\r\n            if ((url.indexOf(\"httpdns\") > -1) || url.indexOf(\"ip.360.cn\") > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //判断链接是否是dataUrl\r\n    private checkIsDataUrl(url)\r\n    {\r\n        if(!url)\r\n            return false;\r\n        let dataList = Global.Setting.dataUrlsList;\r\n        if(!dataList)\r\n            return false;\r\n        for(let i = 0; i < dataList.length; i++)\r\n        {\r\n            if(dataList[i].indexOf(url) > -1)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private onGetError(url: string, onComplete: Function, onError, param, retryTime) {\r\n        retryTime++;\r\n        if (retryTime >= 2) {\r\n            if (onError)\r\n                onError();\r\n            return;\r\n        }\r\n        setTimeout(() => {\r\n            this.getWithRetry(url, onComplete, onError, param, retryTime);\r\n        }, 1000)\r\n        \r\n\r\n    }\r\n\r\n    public getSendContent(param) {\r\n        if (param == null || param == \"\")\r\n            return null;\r\n        if (typeof (param) == \"string\")\r\n            return param;\r\n        return JSON.stringify(param)\r\n\r\n    }\r\n}"]}