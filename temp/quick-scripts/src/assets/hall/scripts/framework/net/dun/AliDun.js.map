{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\dun\\AliDun.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import IDun from \"./IDun\";\r\nimport HallStorageKey from \"../../../logic/hallcommon/const/HallStorageKey\";\r\nimport { DUNTYPE, DUNSTATE } from \"./AppDunControl\";\r\nimport { ReportTool } from \"../../../logic/core/tool/ReportTool\";\r\n\r\nexport default class AliDun implements IDun {\r\n    private isDunInit = false;\r\n    private _isSupport = false;\r\n    private sdkName = \"alidun\";\r\n    private _dunType = 0;\r\n    private _group = null;\r\n    private _dip = null;\r\n\r\n    constructor(dunType) {\r\n        this._dunType = dunType\r\n        Global.NativeEvent.isSupportSDK(this.sdkName, null, (retObj) => {\r\n            if (retObj.result == 0) {\r\n                this._isSupport = true;\r\n            } else {\r\n                Logger.error(\"checkAppIsSupportDunByType dunType = \" + dunType + \" isSupport = false\")\r\n            }\r\n        })\r\n    }\r\n\r\n    public isAppSupport() {\r\n        return this._isSupport\r\n    }\r\n\r\n    public checkCfgIsValid(cfg: any) {\r\n        if (cfg){\r\n            if (cfg.group){\r\n                this._group = cfg.group\r\n                Logger.error(\"checkCfgIsValid set group \" + this._group)\r\n            }else {\r\n                Logger.error(\"checkCfgIsValid set group = null\")\r\n            }\r\n            if (cfg.dip){\r\n                this._dip = cfg.dip\r\n                Logger.error(\"checkCfgIsValid set dip \" + this._dip)\r\n            }else {\r\n                Logger.error(\"checkCfgIsValid set dip = null\")\r\n            }\r\n        }\r\n        if (cc.sys.os == cc.sys.OS_ANDROID){\r\n            if (cfg && cfg.android) {\r\n                return true;\r\n            }\r\n        }else if (cc.sys.os == cc.sys.OS_IOS){\r\n            if (cfg && cfg.ios) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getCfgAppKey(cfg){\r\n        if (cc.sys.os == cc.sys.OS_ANDROID){\r\n            if (cfg && cfg.android) {\r\n                return cfg.android;\r\n            }\r\n        }else if (cc.sys.os == cc.sys.OS_IOS){\r\n            if (cfg && cfg.ios) {\r\n                return cfg.ios;\r\n            }\r\n        }\r\n    }\r\n\r\n    //异步初始化\r\n    public init(cfg, callback?: Function) {\r\n        Logger.error(\"init AliDun SDK\")\r\n        if (!this.checkCfgIsValid(cfg)) {\r\n            Logger.error(\"init AliDun SDK checkCfgIsValid  = false\")\r\n            return;\r\n        }\r\n        if (this.isDunInit) {\r\n            Logger.error(\"init AliDun SDK this.isTDunInit  = true\")\r\n            return;\r\n        }\r\n        let initState = this.getInitState()\r\n        Logger.error(\"init AliDun SDK state = \" + initState)\r\n        let appkey = this.getCfgAppKey(cfg)\r\n        let token = this.getToken() \r\n        if ((initState == DUNSTATE.INIT) && appkey && token) {\r\n            Logger.error(\"initAliDunSDK\")\r\n            Global.NativeEvent.initAliDunSDK(appkey, token, (retObj) => {\r\n                Logger.error(\"initAliDunSDK ret = \" + JSON.stringify(retObj))\r\n                if (retObj) {\r\n                    let result = Number(retObj.result)\r\n                    if (result == 0 || result == 0.0) {\r\n                        this.isDunInit = true;\r\n                        Global.Event.event(GlobalEvent.DunInitFinish);\r\n                        Global.Setting.storage.set(HallStorageKey.DunInitRecord + \"_\" + DUNTYPE.Ali_DUN, 1)\r\n                        Logger.error(\"initAliDunSDK ret = 0 success \")\r\n                    } else {\r\n                        Logger.error(\"initAliDunSDK ret != 0 failed \")\r\n                        let reportParam = { \"result\": \"ret != 0 \" + result, \"type\": DUNTYPE.Ali_DUN }\r\n                        Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_ERROR, reportParam)\r\n                    }\r\n                } else {\r\n                    Logger.error(\"initAliDunSDK retObj == null failed \")\r\n                    let reportParam = { \"result\": \"initAliDunSDK retObj == null failed\", \"type\": DUNTYPE.Ali_DUN }\r\n                    Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_ERROR, reportParam)\r\n                }\r\n\r\n                if (callback) {\r\n                    callback()\r\n                }\r\n            });\r\n        }else {\r\n            Logger.error(\"initAliDunSDK failed \" ,initState ,appkey,token)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private getToken(){\r\n        let uid = Number(Global.Setting.storage.get(HallStorageKey.Uid)) || 0;\r\n        let token = uid ? uid.toString() : \"token\"\r\n        return token;\r\n    }\r\n\r\n\r\n    //获取初始化状态\r\n    isInit() {\r\n        if (!this.isDunInit) {\r\n            let ret = this.getInitState();\r\n            if (ret == 0) {\r\n                this.isDunInit = true;\r\n            }\r\n        }\r\n        return this.isDunInit;\r\n    }\r\n\r\n    getInitState() {\r\n        let ret = Global.NativeEvent.getAliDunInitRet();\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n    * hostInfo:{ token,groupName,domainName}\r\n    */\r\n    getServerIPAndPort(host: string, port: number,attr:any) {\r\n        if (!this.isDunInit){\r\n            Logger.error(\"AliDun getServerIPAndPort isDunInit = false\")\r\n            return;\r\n        }\r\n        \r\n        let hostInfo = {}\r\n        hostInfo[\"token\"] = this.getToken()\r\n        let group = this._group\r\n        let dip = this._dip;\r\n        if (attr){\r\n            Logger.error(\"AliDun getServerIPAndPort set attr param\")\r\n            if (attr.group){\r\n                group = attr.group\r\n                Logger.error(\"AliDun getServerIPAndPort set group \" + group)\r\n            }else {\r\n                Logger.error(\"AliDun getServerIPAndPort set group = null\" )\r\n            }\r\n            if(attr.dip){\r\n                dip = attr.dip\r\n                Logger.error(\"AliDun getServerIPAndPort set dip \" + dip)\r\n            }else {\r\n                Logger.error(\"AliDun getServerIPAndPort set dip = null\" )\r\n            }\r\n        }\r\n        if (!group || !dip){\r\n            Logger.error(\"AliDun getServerIPAndPort group == null  or dip == null\")\r\n            return;\r\n        }\r\n        hostInfo[\"groupName\"] = group\r\n        hostInfo[\"domainName\"] = dip;\r\n        \r\n        let serverIPAndPortJson = Global.NativeEvent.getAliDunPort(hostInfo, port);\r\n        if (serverIPAndPortJson) {\r\n            Logger.error(\"getServerIPAndPort serverIPAndPortJson = \" + serverIPAndPortJson)\r\n            let serverIPAndPort = JSON.parse(serverIPAndPortJson)\r\n            if (serverIPAndPort) {\r\n                if (serverIPAndPort.result != null && (serverIPAndPort.result == 0 || serverIPAndPort.result == 0.0) && serverIPAndPort.serverIp && serverIPAndPort.serverPort) {\r\n                    let ipPortObj = { \"ip\": serverIPAndPort.serverIp, \"port\": Number(serverIPAndPort.serverPort) }\r\n                    return ipPortObj\r\n                }\r\n            }else {\r\n                Logger.error(\"getServerIPAndPort serverIPAndPort json error\")\r\n            }\r\n        }else {\r\n            Logger.error(\"getServerIPAndPort serverIPAndPortJson = null\" )\r\n        }\r\n\r\n        return null\r\n    }\r\n}"]}