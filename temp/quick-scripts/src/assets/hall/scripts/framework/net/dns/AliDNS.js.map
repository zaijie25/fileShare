{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\dns\\AliDNS.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import IDNS, { DNSInfo } from \"./IDNS\";\r\nimport { ServerUrl } from \"../../../logic/core/setting/ServerRoutes\";\r\n\r\nexport default class AliDNS implements IDNS\r\n{\r\n    public init(cfg)\r\n    {\r\n        Global.NativeEvent.initAlicloudHttpDns(cfg.accountId)\r\n    }\r\n\r\n    public requestHosts(hosts:[], callback, syncMode)\r\n    {\r\n        //Ali的接口不确定ip是否已经返回\r\n        Global.NativeEvent.setPreResolveHosts(JSON.stringify(hosts), null)\r\n        if(callback)\r\n            callback();\r\n    }\r\n\r\n    //老版本发送协议时不需要处理\r\n    public getHttpRequestDNSInfo(url)\r\n    {\r\n        let host = Global.UrlUtil.getHostFromUrl(url);\r\n        let ip = this.getIp(host);\r\n        if(ip == \"\" || ip == null || ip == host)\r\n            return null;\r\n        Logger.error(\"host ip is \", ip)\r\n        url = url.replace(host, ip);\r\n        let dnsInfo = new DNSInfo()\r\n        dnsInfo.realUrl = url;\r\n        dnsInfo.ip = ip;\r\n        dnsInfo.host = host;\r\n        dnsInfo.headerMap = {\"Host\":host};\r\n        return dnsInfo;\r\n    }\r\n\r\n    public getHttpDNSInfo(url:ServerUrl){\r\n        let host = url.realHost\r\n        let addressHost = url.addressHost\r\n        let ip = this.getIp(host);\r\n        if(ip == \"\" || ip == null || ip == host)\r\n        {\r\n            //如果是自定义域名，则host走自定义域名\r\n            if (addressHost != host){\r\n                url.address = host\r\n                let dnsInfo = new DNSInfo()\r\n                dnsInfo.ip = ip;\r\n                dnsInfo.host = addressHost;\r\n                let headerMap = { \"Host\": url.addressHost }\r\n                 if (url.cerPath){\r\n                    headerMap[\"CertPath\"] = url.cerPath\r\n                }\r\n                dnsInfo.headerMap = headerMap\r\n                return dnsInfo;\r\n            }\r\n            return null;\r\n        }\r\n            \r\n        Logger.error(\"host ip is \", ip)\r\n        // url = url.replace(host, ip);\r\n        url.address = ip\r\n        let dnsInfo = new DNSInfo()\r\n        // dnsInfo.realUrl = url;\r\n        dnsInfo.ip = ip;\r\n        dnsInfo.host = addressHost;\r\n        let headerMap = { \"Host\": url.addressHost }\r\n        if (url.cerPath){\r\n            headerMap[\"CertPath\"] = url.cerPath\r\n        }\r\n        dnsInfo.headerMap = headerMap\r\n        return dnsInfo;\r\n    }\r\n\r\n    public getIp(host:string)\r\n    {\r\n        let ips = null;\r\n        Global.NativeEvent.getIpsByHostAsync(host, (retObj)=>{\r\n                if(retObj && retObj.funcParam != null && retObj.funcParam != \"\")\r\n                {\r\n                    try\r\n                    {\r\n                        ips = JSON.parse(retObj.funcParam);\r\n                    }\r\n                    catch(e)\r\n                    {\r\n                    }\r\n                }\r\n        })\r\n        Logger.error(\"return value\", JSON.stringify(ips));\r\n        if(ips == null || ips.length == 0)\r\n            return null;\r\n        let randIndex = Math.floor(Math.random() * ips.length);\r\n        Logger.error(\"ips info\" , ips.length,randIndex)\r\n        return ips[randIndex];\r\n    }\r\n\r\n    public update(time)\r\n    {}\r\n}"]}