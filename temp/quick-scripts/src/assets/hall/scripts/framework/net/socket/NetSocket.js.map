{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\socket\\NetSocket.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ReportTool } from \"../../../logic/core/tool/ReportTool\";\r\nimport { ServerRouteInfo } from \"../../../logic/core/setting/ServerRoutes\";\r\n\r\nexport enum NetStatus\r\n{\r\n    close = 0,\r\n    connecting = 1,\r\n    connected = 2,\r\n}\r\n\r\nexport class NetSocket\r\n{\r\n    private _socket: WebSocket;\r\n    private _url:string;\r\n    private _cerPath:string;\r\n    private _status:NetStatus;\r\n    private _onOpen:Function;\r\n    private _onMessage:Function;\r\n    private _onClose:Function;\r\n    private _onError:Function;\r\n    private _target:any;\r\n    private _useBinary = false;\r\n    private _startTime = 0;\r\n    private _endTime = 0;\r\n\r\n    //消息发送数量\r\n    private _sendCount = 0;\r\n    //消息接收数量\r\n    private _resvCount = 0;\r\n\r\n    private _serverRoute:ServerRouteInfo;\r\n\r\n    constructor(url:string, routes:ServerRouteInfo = null,cerPath = null)\r\n    {\r\n        this._url = url;\r\n        this._serverRoute = routes;\r\n        this._cerPath = cerPath\r\n    }\r\n\r\n    public get status()\r\n    {\r\n        return this._status;\r\n    }\r\n\r\n    public init(target, onMesage, onOpen, onError, onClose, useBinary = false)\r\n    {\r\n        this._target = target;\r\n        this._onMessage = onMesage;\r\n        this._onOpen = onOpen;\r\n        this._onError = onError;\r\n        this._onClose = onClose;\r\n        this._useBinary = useBinary;\r\n    }\r\n\r\n    public get isConnected()\r\n    {\r\n        return this.status == NetStatus.connected;\r\n    }\r\n\r\n    public send(msg)\r\n    {\r\n        Logger.log(\"Send Socket:\", msg);\r\n        if(this._socket != null && this.isConnected)\r\n        {\r\n            this._socket.send(msg);\r\n            this._sendCount++;\r\n        }\r\n    }\r\n\r\n    public get usePb()\r\n    {\r\n        return this._useBinary;\r\n    }\r\n\r\n    public connect()\r\n    {\r\n        this._startTime = new Date().valueOf()\r\n        if(CC_JSB)\r\n        {\r\n            \r\n            let pemUrl = Global.UrlUtil.getCacertPath();\r\n            // if (this._cerPath){\r\n            //     pemUrl = this._cerPath\r\n            // }\r\n            Logger.error(\"------------pemUrl\", pemUrl)\r\n            this._socket = new WebSocket(this._url,{}, pemUrl);\r\n        }\r\n        else\r\n            this._socket = new WebSocket(this._url);\r\n        if(this._useBinary)\r\n        {\r\n            this._socket.binaryType = \"arraybuffer\";\r\n        }\r\n        this._socket.onopen = ()=>\r\n        {\r\n            this._status = NetStatus.connected;\r\n            if(this._onOpen)\r\n                this._onOpen.call(this._target);\r\n        }\r\n        this._socket.onclose = (env:CloseEvent)=>\r\n        {\r\n            this._endTime = new Date().valueOf()\r\n            let htime = this._endTime - this._startTime\r\n            if(env && env.reason)\r\n            {\r\n                Logger.error(\"net socket is closed\", env.reason);\r\n                //let reportParam = { \"error_code\": 0, \"reason\":  env.reason, \"url\": this._url,\"htime\":htime }\r\n                let reportParam = this.getReportParam(0, env.reason, htime)\r\n                let reportKey = ReportTool.REPORT_TYPE_SOCKET_ERROR\r\n                Global.ReportTool.ReportClientError(reportKey, reportParam)\r\n            }\r\n            Logger.error(\"net socket is closed\")\r\n            this._status = NetStatus.close;\r\n            if(this._onClose)\r\n                this._onClose.call(this._target);\r\n            return null;\r\n        }\r\n        this._socket.onerror = (env:Event)=>\r\n        {\r\n            this._endTime = new Date().valueOf()\r\n            let htime = this._endTime - this._startTime\r\n            if(env)\r\n            {\r\n                let reason = \"\"\r\n                try\r\n                {\r\n                    // reason = JSON.stringify(env)\r\n                    // Logger.error(\"net socket error reason\", reason);\r\n                    // let reportParam = { \"error_code\": -1, \"reason\": reason, \"url\": this._url,\"htime\":htime }\r\n                    let reportParam = this.getReportParam(-1, reason, htime)\r\n                    let reportKey = ReportTool.REPORT_TYPE_SOCKET_ERROR\r\n                    Global.ReportTool.ReportClientError(reportKey, reportParam)\r\n                } \r\n                catch(e){\r\n                    // let reportParam = { \"error_code\": -1, \"reason\": \"no reason 1\", \"url\": this._url ,\"htime\":htime}\r\n                    let reportParam = this.getReportParam(-1, \"no reason 1\", htime)\r\n                    let reportKey = ReportTool.REPORT_TYPE_SOCKET_ERROR\r\n                    Global.ReportTool.ReportClientError(reportKey, reportParam)\r\n                }\r\n            }else {\r\n                // let reportParam = { \"error_code\": -1, \"reason\": \"no reason 2\", \"url\": this._url,\"htime\":htime }\r\n                let reportParam = this.getReportParam(-1, \"no reason 2\", htime)\r\n                let reportKey = ReportTool.REPORT_TYPE_SOCKET_ERROR\r\n                Global.ReportTool.ReportClientError(reportKey, reportParam)\r\n            }\r\n            Logger.error(\"net socket error reason\")\r\n            this._status = NetStatus.close;\r\n            if(this._onError)\r\n                this._onError.call(this._target);\r\n        }\r\n        this._socket.onmessage = (e)=>\r\n        {\r\n            if(!e || !e.data)\r\n                return;\r\n            this.onMessage(e.data);\r\n        }\r\n        this._status = NetStatus.connecting;\r\n    }\r\n\r\n\r\n    private getReportParam(errorCode, reason, htime)\r\n    {\r\n        let param:any = {}\r\n        param.error_code = errorCode;\r\n        param.reason = reason;\r\n        param.url = this._url;\r\n        param.htime = htime;\r\n        param.sCount = this._sendCount;\r\n        param.rCount = this._resvCount;\r\n        //区分链接成功断开 和 链接未成功\r\n        if(this._resvCount > 0){\r\n            param.error_code = -2\r\n        }\r\n        if(this._serverRoute)\r\n        {\r\n            param.port = this._serverRoute.port;\r\n            param.us_port = this._serverRoute.us_port;\r\n            param.lo_port = this._serverRoute.lo_port;\r\n            param.host = this._serverRoute.realHost;\r\n            param.addr_host = this._serverRoute.host;\r\n        }\r\n        return param;\r\n    }\r\n\r\n    private onMessage(data)\r\n    {\r\n        this._resvCount++;\r\n        //data 格式化？\r\n        if(this._onMessage)\r\n            this._onMessage.call(this._target, data);\r\n    }\r\n\r\n    public cleanSocket()\r\n    {\r\n        this.close();\r\n        if(this._socket)\r\n        {\r\n            // this._socket.onclose = null;\r\n            // this._socket.onmessage = null;\r\n            // this._socket.onopen = null;\r\n            // this._socket.onerror = null;\r\n            this._socket = null;\r\n        }\r\n        this.cleanCallback();\r\n    }\r\n\r\n    public cleanCallback()\r\n    {\r\n        this._useBinary = false;\r\n        this._onMessage = null;\r\n        this._onClose = null;\r\n        this._onMessage = null;\r\n        this._onError = null;\r\n    }\r\n\r\n    public close()\r\n    {\r\n        \r\n        if(cc.sys.isObjectValid(this._socket))\r\n        {\r\n            try\r\n            {\r\n                this._socket.close();\r\n            }\r\n            catch(e)\r\n            {\r\n\r\n            }\r\n        }\r\n    }\r\n}"]}