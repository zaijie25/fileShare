{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\enc\\Base64.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Encoding } from './Encoding';\r\nimport { WordArray } from '../lib/WordArray';\r\n\r\nexport class Base64 {\r\n    public static _map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n\r\n    public static _reverseMap: Array<number> | undefined = undefined;\r\n\r\n    /**\r\n     * Converts a word array to a Base64 string.\r\n     *\r\n     * @param wordArray The word array.\r\n     *\r\n     * @return The Base64 string.\r\n     *\r\n     * @example\r\n     *\r\n     *     let base64String = Base64.stringify(wordArray);\r\n     */\r\n    public static stringify(wordArray: WordArray): string {\r\n        // Clamp excess bits\r\n        wordArray.clamp();\r\n\r\n        // Convert\r\n        const base64Chars = [];\r\n        for (let i = 0; i < wordArray.sigBytes; i += 3) {\r\n            const byte1 = (wordArray.words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\r\n            const byte2 = (wordArray.words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\r\n            const byte3 = (wordArray.words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\r\n\r\n            const triplet = (byte1 << 16) | (byte2 << 8) | byte3;\r\n\r\n            for (let j = 0; (j < 4) && (i + j * 0.75 < wordArray.sigBytes); j++) {\r\n                base64Chars.push(this._map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\r\n            }\r\n        }\r\n\r\n        // Add padding\r\n        const paddingChar = this._map.charAt(64);\r\n        if (paddingChar) {\r\n            while (base64Chars.length % 4) {\r\n                base64Chars.push(paddingChar);\r\n            }\r\n        }\r\n\r\n        return base64Chars.join('');\r\n    }\r\n\r\n    /**\r\n     * Converts a Base64 string to a word array.\r\n     *\r\n     * @param base64Str The Base64 string.\r\n     *\r\n     * @return The word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     let wordArray = Base64.parse(base64String);\r\n     */\r\n    public static parse(base64Str: string): WordArray {\r\n        // Shortcuts\r\n        let base64StrLength = base64Str.length;\r\n\r\n        if(this._reverseMap === undefined) {\r\n                this._reverseMap = [];\r\n                for(let j = 0; j < this._map.length; j++) {\r\n                    this._reverseMap[this._map.charCodeAt(j)] = j;\r\n                }\r\n        }\r\n\r\n        // Ignore padding\r\n        const paddingChar = this._map.charAt(64);\r\n        if(paddingChar) {\r\n            const paddingIndex = base64Str.indexOf(paddingChar);\r\n            if(paddingIndex !== -1) {\r\n                base64StrLength = paddingIndex;\r\n            }\r\n        }\r\n\r\n        // Convert\r\n        return this.parseLoop(base64Str, base64StrLength, this._reverseMap);\r\n    }\r\n\r\n    public static parseLoop(base64Str: string, base64StrLength: number, reverseMap: Array<number>): WordArray {\r\n        const words: Array<number> = [];\r\n        let nBytes = 0;\r\n        for(let i = 0; i < base64StrLength; i++) {\r\n            if(i % 4) {\r\n                const bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\r\n                const bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\r\n                words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\r\n                nBytes++;\r\n            }\r\n        }\r\n\r\n        return new WordArray(words, nBytes);\r\n    }\r\n}\r\n\r\n// type guard for the formatter (to ensure it has the required static methods)\r\nconst _: Encoding = Base64;"]}