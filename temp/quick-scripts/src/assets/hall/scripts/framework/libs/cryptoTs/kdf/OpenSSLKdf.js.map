{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\kdf\\OpenSSLKdf.ts"],"names":[],"mappings":";;;;;;;AACA,8CAA6C;AAC7C,oDAAmD;AACnD,yCAAwC;AAExC;IAAA;IAgCA,CAAC;IA/BG;;;;;;;;;;;;;;OAcG;IACW,kBAAO,GAArB,UAAsB,QAAgB,EAAE,OAAe,EAAE,MAAc,EAAE,IAAyB;QAC9F,uBAAuB;QACvB,IAAG,CAAC,IAAI,EAAE;YACN,IAAI,GAAG,qBAAS,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;SACnC;QAED,oBAAoB;QACpB,IAAM,GAAG,GAAG,CAAC,IAAI,eAAM,CAAC,EAAE,OAAO,EAAE,OAAO,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAEhF,sBAAsB;QACtB,IAAM,EAAE,GAAG,IAAI,qBAAS,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;QAC/D,GAAG,CAAC,QAAQ,GAAG,OAAO,GAAG,CAAC,CAAC;QAE3B,gBAAgB;QAChB,OAAO,IAAI,2BAAY,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9D,CAAC;IACL,iBAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,gCAAU;AAkCvB,IAAM,CAAC,GAAQ,UAAU,CAAC","file":"","sourceRoot":"/","sourcesContent":["import { KDF } from './KDF';\r\nimport { WordArray } from '../lib/WordArray';\r\nimport { CipherParams } from '../lib/CipherParams';\r\nimport { EvpKDF } from '../algo/EvpKDF';\r\n\r\nexport class OpenSSLKdf {\r\n    /**\r\n     * Derives a key and IV from a password.\r\n     *\r\n     * @param password The password to derive from.\r\n     * @param keySize The size in words of the key to generate.\r\n     * @param ivSize The size in words of the IV to generate.\r\n     * @param salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n     *\r\n     * @return A cipher params object with the key, IV, and salt.\r\n     *\r\n     * @example\r\n     *\r\n     *     let derivedParams = OpenSSL.execute('Password', 256/32, 128/32);\r\n     *     let derivedParams = OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n     */\r\n    public static execute(password: string, keySize: number, ivSize: number, salt?: WordArray | string): CipherParams {\r\n        // Generate random salt\r\n        if(!salt) {\r\n            salt = WordArray.random(64 / 8);\r\n        }\r\n\r\n        // Derive key and IV\r\n        const key = (new EvpKDF({ keySize: keySize + ivSize })).compute(password, salt);\r\n\r\n        // Separate key and IV\r\n        const iv = new WordArray(key.words.slice(keySize), ivSize * 4);\r\n        key.sigBytes = keySize * 4;\r\n\r\n        // Return params\r\n        return new CipherParams({ key: key, iv: iv, salt: salt });\r\n    }\r\n}\r\n\r\nconst _: KDF = OpenSSLKdf;"]}