{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\lib\\WordArray.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Encoding } from '../enc/Encoding';\r\nimport { Hex } from '../enc/Hex';\r\n\r\nexport class WordArray {\r\n    words: Array<number>;\r\n\r\n    sigBytes: number;\r\n\r\n    /**\r\n     * Creates a word array filled with random bytes.\r\n     *\r\n     * @param nBytes The number of random bytes to generate.\r\n     *\r\n     * @return The random word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     let wordArray = WordArray.random(16);\r\n     */\r\n    public static random(nBytes: number) {\r\n        const words = [];\r\n\r\n        const r = (function(m_w: number) {\r\n            let m_z = 0x3ade68b1;\r\n\r\n            const mask = 0xffffffff;\r\n\r\n            return function() {\r\n                m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\r\n                m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\r\n                let result = ((m_z << 0x10) + m_w) & mask;\r\n                result /= 0x100000000;\r\n                result += 0.5;\r\n                return result * (Math.random() > .5 ? 1 : -1);\r\n            };\r\n        });\r\n\r\n        for(let i = 0, rcache; i < nBytes; i += 4) {\r\n            const _r = r((rcache || Math.random()) * 0x100000000);\r\n\r\n            rcache = _r() * 0x3ade67b7;\r\n            words.push((_r() * 0x100000000) | 0);\r\n        }\r\n\r\n        return new WordArray(words, nBytes);\r\n    }\r\n\r\n    /**\r\n     * Initializes a newly created word array.\r\n     *\r\n     * @param words (Optional) An array of 32-bit words.\r\n     * @param sigBytes (Optional) The number of significant bytes in the words.\r\n     *\r\n     * @example\r\n     *\r\n     *     let wordArray = new WordArray();\r\n     *     let wordArray = new WordArray([0x00010203, 0x04050607]);\r\n     *     let wordArray = new WordArray([0x00010203, 0x04050607], 6);\r\n     */\r\n    constructor(words?: Array<number>, sigBytes?: number) {\r\n        this.words = words || [];\r\n\r\n        if(sigBytes !== undefined) {\r\n            this.sigBytes = sigBytes;\r\n        } else {\r\n            this.sigBytes = this.words.length * 4;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts this word array to a string.\r\n     *\r\n     * @param encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n     *\r\n     * @return The stringified word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     let string = wordArray + '';\r\n     *     let string = wordArray.toString();\r\n     *     let string = wordArray.toString(CryptoJS.enc.Utf8);\r\n     */\r\n    toString(encoder?: Encoding): string {\r\n        return (encoder || Hex).stringify(this);\r\n    }\r\n\r\n    /**\r\n     * Concatenates a word array to this word array.\r\n     *\r\n     * @param wordArray The word array to append.\r\n     *\r\n     * @return This word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray1.concat(wordArray2);\r\n     */\r\n    concat(wordArray: WordArray): WordArray {\r\n        // Clamp excess bits\r\n        this.clamp();\r\n\r\n        // Concat\r\n        if(this.sigBytes % 4) {\r\n            // Copy one byte at a time\r\n            for(let i = 0; i < wordArray.sigBytes; i++) {\r\n                const thatByte = (wordArray.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                this.words[(this.sigBytes + i) >>> 2] |= thatByte << (24 - ((this.sigBytes + i) % 4) * 8);\r\n            }\r\n        } else {\r\n            // Copy one word at a time\r\n            for (let i = 0; i < wordArray.sigBytes; i += 4) {\r\n                this.words[(this.sigBytes + i) >>> 2] = wordArray.words[i >>> 2];\r\n            }\r\n        }\r\n        this.sigBytes += wordArray.sigBytes;\r\n\r\n        // Chainable\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes insignificant bits.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray.clamp();\r\n     */\r\n    clamp() {\r\n        // Clamp\r\n        this.words[this.sigBytes >>> 2] &= 0xffffffff << (32 - (this.sigBytes % 4) * 8);\r\n        this.words.length = Math.ceil(this.sigBytes / 4);\r\n    }\r\n\r\n    /**\r\n     * Creates a copy of this word array.\r\n     *\r\n     * @return The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     let clone = wordArray.clone();\r\n     */\r\n    clone(): WordArray {\r\n        return new WordArray(this.words.slice(0), this.sigBytes);\r\n    }\r\n}"]}