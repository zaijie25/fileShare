{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\algo\\SHA256.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Hasher } from '../lib/Hasher';\r\nimport { WordArray } from '../lib/WordArray';\r\n\r\n// Initialization and round constants tables\r\nconst H: Array<number> = [];\r\nconst K: Array<number> = [];\r\n\r\n// Reusable object\r\nconst W: Array<number> = [];\r\n\r\nexport class SHA256 extends Hasher {\r\n    public _hash!: WordArray;\r\n\r\n    public reset() {\r\n        // reset core values\r\n        super.reset();\r\n\r\n        this._hash = new WordArray(H.slice(0));\r\n    }\r\n\r\n    public _doProcessBlock(M: Array<number>, offset: number) {\r\n        // Shortcut\r\n        const Hl = this._hash.words;\r\n\r\n        // Working variables\r\n        let a = Hl[0];\r\n        let b = Hl[1];\r\n        let c = Hl[2];\r\n        let d = Hl[3];\r\n        let e = Hl[4];\r\n        let f = Hl[5];\r\n        let g = Hl[6];\r\n        let h = Hl[7];\r\n\r\n        // Computation\r\n        for(let i = 0; i < 64; i++) {\r\n            if(i < 16) {\r\n                W[i] = M[offset + i] | 0;\r\n            } else {\r\n                const gamma0x = W[i - 15];\r\n                const gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                              ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                               (gamma0x >>> 3);\r\n\r\n                const gamma1x = W[i - 2];\r\n                const gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                              ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                               (gamma1x >>> 10);\r\n\r\n                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n            }\r\n\r\n            const ch  = (e & f) ^ (~e & g);\r\n            const maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n            const sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n            const sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n            const t1 = h + sigma1 + ch + K[i] + W[i];\r\n            const t2 = sigma0 + maj;\r\n\r\n            h = g;\r\n            g = f;\r\n            f = e;\r\n            e = (d + t1) | 0;\r\n            d = c;\r\n            c = b;\r\n            b = a;\r\n            a = (t1 + t2) | 0;\r\n        }\r\n\r\n        // Intermediate hash value\r\n        Hl[0] = (Hl[0] + a) | 0;\r\n        Hl[1] = (Hl[1] + b) | 0;\r\n        Hl[2] = (Hl[2] + c) | 0;\r\n        Hl[3] = (Hl[3] + d) | 0;\r\n        Hl[4] = (Hl[4] + e) | 0;\r\n        Hl[5] = (Hl[5] + f) | 0;\r\n        Hl[6] = (Hl[6] + g) | 0;\r\n        Hl[7] = (Hl[7] + h) | 0;\r\n    }\r\n\r\n    public _doFinalize(): WordArray {\r\n        const nBitsTotal = this._nDataBytes * 8;\r\n        const nBitsLeft = this._data.sigBytes * 8;\r\n\r\n        // Add padding\r\n        this._data.words[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n        this._data.words[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n        this._data.words[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n        this._data.sigBytes = this._data.words.length * 4;\r\n\r\n        // Hash final blocks\r\n        this._process();\r\n\r\n        // Return final computed hash\r\n        return this._hash;\r\n    }\r\n}"]}