{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\lib\\Cipher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,mEAAkE;AAElE,2DAA0D;AAC1D,6DAA4D;AAI5D;IAAqC,0BAAsB;IAuGvD;;;;;;;;;;OAUG;IACH,gBAAmB,SAAiB,EAAE,GAAc,EAAE,GAAkC;QAAxF;QACI,wBAAwB;QACxB,kBAAM,MAAM,CAAC,MAAM,CAAC;YAChB,SAAS,EAAE,CAAC;SACf,EAAE,GAAG,CAAC,CAAC,SAQX;QANG,+BAA+B;QAC/B,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAEhB,qBAAqB;QACrB,KAAI,CAAC,KAAK,EAAE,CAAC;;IACjB,CAAC;IA/FD;;;;;;;;;;;OAWG;IACW,sBAAe,GAA7B,UAA8B,GAAc,EAAE,GAAkC;QAC5E,0FAA0F;QAC1F,IAAM,SAAS,GAAQ,IAAI,CAAC;QAE5B,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;;;;;OAWG;IACW,sBAAe,GAA7B,UAA8B,GAAc,EAAE,GAAkC;QAC5E,0FAA0F;QAC1F,IAAM,SAAS,GAAQ,IAAI,CAAC;QAE5B,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;;;;OAUG;IACW,oBAAa,GAA3B,UAA4B,MAAqB;QAC7C,SAAS,OAAO,CAAC,OAA2B,EAAE,GAAuB,EAAE,GAAkC;YACrG,IAAG,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACxB,OAAO,yCAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;aACjE;iBAAM;gBACH,OAAO,uCAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;aAChE;QACL,CAAC;QAED,SAAS,OAAO,CAAC,UAAiC,EAAE,GAAuB,EAAE,GAAkC;YAC3G,IAAG,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACxB,OAAO,yCAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;aACpE;iBAAM;gBACH,OAAO,uCAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;aACnE;QACL,CAAC;QAED,OAAO;YACH,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;SACnB,CAAC;IACN,CAAC;IA2BD;;;;;;;;;;;OAWG;IACI,wBAAO,GAAd,UAAe,UAA8B;QACzC,SAAS;QACT,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,2BAA2B;QAC3B,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,yBAAQ,GAAf,UAAgB,UAA+B;QAC3C,oBAAoB;QACpB,IAAG,UAAU,EAAE;YACX,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SAC5B;QAED,gCAAgC;QAChC,IAAM,kBAAkB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAE9C,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IA3KD;;OAEG;IACW,sBAAe,GAAG,CAAC,CAAC;IAElC;;OAEG;IACW,sBAAe,GAAG,CAAC,CAAC;IAElC;;OAEG;IACW,cAAO,GAAG,CAAC,CAAC;IAE1B;;OAEG;IACW,aAAM,GAAG,CAAC,CAAC;IA+J7B,aAAC;CAlLD,AAkLC,CAlLoC,+CAAsB,GAkL1D;AAlLqB,wBAAM","file":"","sourceRoot":"/","sourcesContent":["import { BufferedBlockAlgorithm } from './BufferedBlockAlgorithm';\r\nimport { WordArray } from './WordArray';\r\nimport { SerializableCipher } from './SerializableCipher';\r\nimport { PasswordBasedCipher } from './PasswordBasedCipher';\r\nimport { BufferedBlockAlgorithmConfig } from './BufferedBlockAlgorithmConfig';\r\nimport { CipherParams } from './CipherParams';\r\n\r\nexport abstract class Cipher extends BufferedBlockAlgorithm {\r\n    /**\r\n     * A constant representing encryption mode.\r\n     */\r\n    public static _ENC_XFORM_MODE = 1;\r\n\r\n    /**\r\n     * A constant representing decryption mode.\r\n     */\r\n    public static _DEC_XFORM_MODE = 2;\r\n\r\n    /**\r\n     * This cipher's key size. Default: 4 (128 bits / 32 Bits)\r\n     */\r\n    public static keySize = 4;\r\n\r\n    /**\r\n     * This cipher's IV size. Default: 4 (128 bits / 32 Bits)\r\n     */\r\n    public static ivSize = 4;\r\n\r\n    /**\r\n     * Either the encryption or decryption transformation mode constant.\r\n     */\r\n    public _xformMode: number;\r\n\r\n    /**\r\n     * The key.\r\n     */\r\n    public _key: WordArray;\r\n\r\n    /**\r\n     * Creates this cipher in encryption mode.\r\n     *\r\n     * @param key The key.\r\n     * @param cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @return A cipher instance.\r\n     *\r\n     * @example\r\n     *\r\n     *     let cipher = AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n     */\r\n    public static createEncryptor(key: WordArray, cfg?: BufferedBlockAlgorithmConfig): Cipher {\r\n        // workaround for typescript not being able to create a abstract creator function directly\r\n        const thisClass: any = this;\r\n\r\n        return new thisClass(this._ENC_XFORM_MODE, key, cfg);\r\n    }\r\n\r\n    /**\r\n     * Creates this cipher in decryption mode.\r\n     *\r\n     * @param key The key.\r\n     * @param cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @return A cipher instance.\r\n     *\r\n     * @example\r\n     *\r\n     *     let cipher = AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n     */\r\n    public static createDecryptor(key: WordArray, cfg?: BufferedBlockAlgorithmConfig): Cipher {\r\n        // workaround for typescript not being able to create a abstract creator function directly\r\n        const thisClass: any = this;\r\n\r\n        return new thisClass(this._DEC_XFORM_MODE, key, cfg);\r\n    }\r\n\r\n    /**\r\n     * Creates shortcut functions to a cipher's object interface.\r\n     *\r\n     * @param cipher The cipher to create a helper for.\r\n     *\r\n     * @return An object with encrypt and decrypt shortcut functions.\r\n     *\r\n     * @example\r\n     *\r\n     *     let AES = Cipher._createHelper(AESAlgorithm);\r\n     */\r\n    public static _createHelper(cipher: typeof Cipher) {\r\n        function encrypt(message: WordArray | string, key: WordArray | string, cfg?: BufferedBlockAlgorithmConfig) {\r\n            if(typeof key === 'string') {\r\n                return PasswordBasedCipher.encrypt(cipher, message, key, cfg);\r\n            } else {\r\n                return SerializableCipher.encrypt(cipher, message, key, cfg);\r\n            }\r\n        }\r\n\r\n        function decrypt(ciphertext: CipherParams | string, key: WordArray | string, cfg?: BufferedBlockAlgorithmConfig) {\r\n            if(typeof key === 'string') {\r\n                return PasswordBasedCipher.decrypt(cipher, ciphertext, key, cfg);\r\n            } else {\r\n                return SerializableCipher.decrypt(cipher, ciphertext, key, cfg);\r\n            }\r\n        }\r\n\r\n        return {\r\n            encrypt: encrypt,\r\n            decrypt: decrypt\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initializes a newly created cipher.\r\n     *\r\n     * @param xformMode Either the encryption or decryption transormation mode constant.\r\n     * @param key The key.\r\n     * @param cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @example\r\n     *\r\n     *     let cipher = AES.create(AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n     */\r\n    public constructor(xformMode: number, key: WordArray, cfg?: BufferedBlockAlgorithmConfig) {\r\n        // Apply config defaults\r\n        super(Object.assign({\r\n            blockSize: 1\r\n        }, cfg));\r\n\r\n        // Store transform mode and key\r\n        this._xformMode = xformMode;\r\n        this._key = key;\r\n\r\n        // Set initial values\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Adds data to be encrypted or decrypted.\r\n     *\r\n     * @param dataUpdate The data to encrypt or decrypt.\r\n     *\r\n     * @return The data after processing.\r\n     *\r\n     * @example\r\n     *\r\n     *     let encrypted = cipher.process('data');\r\n     *     let encrypted = cipher.process(wordArray);\r\n     */\r\n    public process(dataUpdate: WordArray | string): WordArray {\r\n        // Append\r\n        this._append(dataUpdate);\r\n\r\n        // Process available blocks\r\n        return this._process();\r\n    }\r\n\r\n    /**\r\n     * Finalizes the encryption or decryption process.\r\n     * Note that the finalize operation is effectively a destructive, read-once operation.\r\n     *\r\n     * @param dataUpdate The final data to encrypt or decrypt.\r\n     *\r\n     * @return The data after final processing.\r\n     *\r\n     * @example\r\n     *\r\n     *     var encrypted = cipher.finalize();\r\n     *     var encrypted = cipher.finalize('data');\r\n     *     var encrypted = cipher.finalize(wordArray);\r\n     */\r\n    public finalize(dataUpdate?: WordArray | string): WordArray {\r\n        // Final data update\r\n        if(dataUpdate) {\r\n            this._append(dataUpdate);\r\n        }\r\n\r\n        // Perform concrete-cipher logic\r\n        const finalProcessedData = this._doFinalize();\r\n\r\n        return finalProcessedData;\r\n    }\r\n\r\n    /**\r\n     * Cipher specific finalize function explicitly implemented in the derived class.\r\n     */\r\n    public abstract _doFinalize(): WordArray;\r\n}"]}