{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\mode\\CBCEncryptor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,uEAAsE;AAEtE;IAAkC,gCAAwB;IAA1D;;IA+CA,CAAC;IA5CG;;;;;;;;;OASG;IACI,mCAAY,GAAnB,UAAoB,KAAoB,EAAE,MAAc;QACpD,+BAA+B;QAC/B,IAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,KAAK,SAAS,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QAED,kBAAkB;QAClB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAEzC,6CAA6C;QAC7C,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC/E,CAAC;IAEM,+BAAQ,GAAf,UAAgB,KAAoB,EAAE,MAAc,EAAE,SAAiB;QACnE,sBAAsB;QACtB,IAAI,KAAK,CAAC;QACV,IAAG,IAAI,CAAC,GAAG,EAAE;YACT,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;YAEjB,kCAAkC;YAClC,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;SACxB;aAAM;YACH,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;SAC3B;QAED,uEAAuE;QACvE,IAAG,KAAK,KAAK,SAAS,EAAE;YACpB,aAAa;YACb,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;gBAC/B,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;aACjC;SACJ;IACL,CAAC;IACL,mBAAC;AAAD,CA/CA,AA+CC,CA/CiC,mDAAwB,GA+CzD;AA/CY,oCAAY","file":"","sourceRoot":"/","sourcesContent":["import { BlockCipherModeAlgorithm } from './BlockCipherModeAlgorithm';\r\n\r\nexport class CBCEncryptor extends BlockCipherModeAlgorithm {\r\n    public _prevBlock: Array<number> | undefined;\r\n\r\n    /**\r\n     * Processes the data block at offset.\r\n     *\r\n     * @param words The data words to operate on.\r\n     * @param offset The offset where the block starts.\r\n     *\r\n     * @example\r\n     *\r\n     *     mode.processBlock(data.words, offset);\r\n     */\r\n    public processBlock(words: Array<number>, offset: number) {\r\n        // Check if we have a blockSize\r\n        if(this._cipher.cfg.blockSize === undefined) {\r\n            throw new Error('missing blockSize in cipher config');\r\n        }\r\n\r\n        // XOR and encrypt\r\n        this.xorBlock(words, offset, this._cipher.cfg.blockSize);\r\n        this._cipher.encryptBlock(words, offset);\r\n\r\n        // Remember this block to use with next block\r\n        this._prevBlock = words.slice(offset, offset + this._cipher.cfg.blockSize);\r\n    }\r\n\r\n    public xorBlock(words: Array<number>, offset: number, blockSize: number) {\r\n        // Choose mixing block\r\n        let block;\r\n        if(this._iv) {\r\n            block = this._iv;\r\n\r\n            // Remove IV for subsequent blocks\r\n            this._iv = undefined;\r\n        } else {\r\n            block = this._prevBlock;\r\n        }\r\n\r\n        // block should never be undefined but we want to make typescript happy\r\n        if(block !== undefined) {\r\n            // XOR blocks\r\n            for(let i = 0; i < blockSize; i++) {\r\n                words[offset + i] ^= block[i];\r\n            }\r\n        }\r\n    }\r\n}"]}