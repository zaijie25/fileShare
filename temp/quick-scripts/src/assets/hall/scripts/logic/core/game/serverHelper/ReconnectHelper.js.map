{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\game\\serverHelper\\ReconnectHelper.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import BaseServerHelper from \"./BaseServerHelper\";\r\nimport GameServer from \"../GameServer\";\r\nimport GlobalEvent from \"../../GlobalEvent\";\r\n\r\n\r\nexport default class ReconnectHelper extends BaseServerHelper\r\n{\r\n    private needReconnect = false;\r\n\r\n    //上次收到服务器协议时间\r\n    private lastReceiveTime = 0;\r\n\r\n    //重连次数\r\n    private reconnectCount = 0;\r\n    //网络是否已经链接\r\n    private socketOpened = false;\r\n    //重连中 表示正在重连中\r\n    private reconnectLock = false;\r\n\r\n    //下次重连时间\r\n    private nextReconnectTime = 0;\r\n\r\n    private lastPauseTime:number = 0;\r\n\r\n    private inBackground = false;\r\n\r\n\r\n\r\n    protected onInit()\r\n    {\r\n\r\n    }    \r\n\r\n    public run()\r\n    {\r\n        Game.Event.on(Game.EVENT_CALL_RECONNECT, this, this.setReconnect);\r\n        this.server.on(GameServer.Event_GameSocketOpen, this, this.onSocketOpen);\r\n        this.server.on(GameServer.Event_GameSocketClose, this, this.onSocketClose);\r\n        this.server.on(GameServer.Event_GameSocketMsg, this, this.updateReceiveTime);\r\n        cc.game.on(cc.game.EVENT_SHOW, this.onResume, this);\r\n        cc.game.on(cc.game.EVENT_HIDE, this.onPause, this);\r\n    }\r\n\r\n    public clear()\r\n    {\r\n        this.server.off(GameServer.Event_GameSocketOpen, this, this.onSocketOpen);\r\n        this.server.off(GameServer.Event_GameSocketClose, this, this.onSocketClose);\r\n        this.server.off(GameServer.Event_GameSocketMsg, this, this.updateReceiveTime);\r\n        Game.Event.off(Game.EVENT_CALL_RECONNECT,this, this.setReconnect);\r\n        cc.game.off(cc.game.EVENT_SHOW, this.onResume, this);\r\n        cc.game.off(cc.game.EVENT_HIDE, this.onPause, this);\r\n        this.needReconnect = false;\r\n        this.socketOpened = false;\r\n        this.reconnectLock = false;\r\n        this.lastReceiveTime = 0;\r\n        this.reconnectCount = 0;\r\n    }\r\n\r\n    private onSocketOpen()\r\n    {\r\n        if(this.needReconnect == true)\r\n        {\r\n            Logger.log(\"socket reconnect finish\")\r\n            Game.Event.event(Game.EVENT_SOCKET_RECONNECT);\r\n        }\r\n        Global.UI.close(\"WndNetReconnect\");\r\n        this.needReconnect = false;\r\n        this.reconnectLock = false;\r\n        this.socketOpened = true;\r\n        this.lastReceiveTime = 0;\r\n        this.reconnectCount = 0;\r\n    }\r\n\r\n    private updateReceiveTime()\r\n    {\r\n        this.lastReceiveTime = Date.now();\r\n    }\r\n\r\n\r\n    private onSocketClose()\r\n    {\r\n        Logger.error(\"socket close !!!!\")\r\n        this.setReconnect();\r\n        this.socketOpened = false;\r\n        this.reconnectLock = false;\r\n    }\r\n\r\n    private onPause()\r\n    {\r\n        this.lastPauseTime = Date.now();\r\n        this.inBackground = true;\r\n        Logger.error(\"on pause\", this.lastPauseTime)\r\n    }\r\n\r\n    private onResume()\r\n    {\r\n        if(!this.inBackground)\r\n        {\r\n            //需要清理上次pause时间，android拉出菜单栏会只出发onresume 有概率不出发onpause\r\n            this.lastPauseTime = 0;\r\n        }\r\n\r\n        this.inBackground = false;\r\n        Logger.error(\"on Resume\", this.lastPauseTime, Date.now(),  Date.now() - this.lastPauseTime )\r\n        if(this.lastPauseTime != 0){\r\n            let backgroundTime = (Date.now() - this.lastPauseTime) / 1000;\r\n            Game.Event.event(Game.EVENT_SOCKET_RESUME, backgroundTime);\r\n            if(Date.now() - this.lastPauseTime > Global.Setting.backgroundReconnectTime * 1000)\r\n            {\r\n                Global.HallServer.heartbeatHelper.sendHeartBeat(\"&s=0\");\r\n                Game.Component.scheduleOnce(()=>\r\n                {\r\n                    this.setReconnect();\r\n                }, 0.1);\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private reconnect()\r\n    {\r\n        Global.UI.show(\"WndNetReconnect\");\r\n        this.reconnectLock = true;\r\n        this.reconnectCount++;\r\n        //更新下次可以重连的时间\r\n        this.nextReconnectTime = Date.now() + Global.Setting.socketReconnectInterval * 1000;\r\n        if(this.reconnectCount > Global.Setting.socketReconnectTimes)\r\n        {\r\n            Global.UI.close(\"WndNetReconnect\");\r\n            let failedFunc = ()=>\r\n            {\r\n                this.reconnectCount = 0;\r\n                Game.Event.event(Game.EVENT_FORCE_LEAVE_GAME);\r\n            }\r\n            Global.UI.showSingleBox(\"网络连接失败，请稍后再试\", failedFunc.bind(this), failedFunc.bind(this))\r\n            return;\r\n        }\r\n        Logger.error(\"ReconnectHelper  reconnect !!\");\r\n        Global.Event.event(GlobalEvent.UPDATE_RECONNECT_COUNT, this.reconnectCount);\r\n        Global.Event.event(GlobalEvent.FORCE_HIDE_WAITING);\r\n        this.server.event(GameServer.Event_GameSocketCallReconnect);\r\n    }\r\n\r\n    private setReconnect()\r\n    {\r\n        if(!this.server.isRunning)\r\n            return;\r\n        this.reconnectLock = false;\r\n        this.needReconnect = true;\r\n    }\r\n\r\n\r\n    public onUpdate()\r\n    {\r\n        if(!this.server.isRunning)\r\n            return;\r\n        if(this.needReconnect \r\n            //当前没在重连中\r\n            && !this.reconnectLock \r\n            //判断重连间隔\r\n            && Date.now() > this.nextReconnectTime\r\n            //在后台时不重连\r\n            && !this.inBackground)\r\n        {\r\n            this.reconnect();\r\n            return;\r\n        }\r\n\r\n        if(this.socketOpened && this.lastReceiveTime != 0)\r\n        {\r\n            if(Date.now() - this.lastReceiveTime > Global.Setting.socketReconnectReceiveCheckInteval * 1000)\r\n            {\r\n                this.needReconnect = true;\r\n                this.lastReceiveTime = 0;\r\n                this.socketOpened = false;\r\n            }\r\n        }\r\n    }\r\n}"]}