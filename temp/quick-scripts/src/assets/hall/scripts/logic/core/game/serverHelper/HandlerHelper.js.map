{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\game\\serverHelper\\HandlerHelper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,uDAAkD;AAElD;IAA2C,iCAAgB;IAA3D;QAAA,qEAkDC;QAhDU,gBAAU,GAAM,EAAE,CAAA;QAEzB,2DAA2D;QACpD,uBAAiB,GAAM,EAAE,CAAA;;IA6CpC,CAAC;IA3CG,gCAAgC;IACzB,qCAAa,GAApB,UAAqB,GAAO,EAAE,eAAmB;QAE7C,IAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,EAC/B;YACI,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;IAC3C,CAAC;IAEM,4CAAoB,GAA3B,UAA4B,GAAO,EAAE,eAAmB;QAEpD,IAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,IAAI,EACtC;YACI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;SAC3C;QACD,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;IAClD,CAAC;IAEM,qCAAa,GAApB,UAAqB,GAAO;QAExB,IAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IACpC,CAAC;IAEM,qCAAa,GAApB;QAEI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAA;QACpB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAA;IAC/B,CAAC;IAEM,kCAAU,GAAjB,UAAkB,GAAO;QAErB,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACnC,IAAG,OAAO,IAAI,IAAI;YACd,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAE1C,IAAG,OAAO,IAAI,IAAI,EAClB;YACI,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;SACxC;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IACL,oBAAC;AAAD,CAlDA,AAkDC,CAlD0C,0BAAgB,GAkD1D","file":"","sourceRoot":"/","sourcesContent":["import BaseGameHandler from \"../BaseGameHandler\";\r\nimport BaseServerHelper from \"./BaseServerHelper\";\r\n\r\nexport default class HandlerHelper extends BaseServerHelper\r\n{\r\n    public handlerMap:{} = {}\r\n\r\n    //主要存放公共handler    一类型游戏可以配置一套defaultMap   handlerMap注册差异函数\r\n    public defaultHandlerMap:{} = {}\r\n\r\n    //每个游戏注册一次Handler    key为服务器协议字段\r\n    public registHandler(key:any, handlerInstance:any)\r\n    {\r\n        if(this.handlerMap[key] != null)\r\n        {\r\n            Logger.error(\"重复注册handler\", key);\r\n        }\r\n        this.handlerMap[key] = handlerInstance;\r\n    }\r\n\r\n    public registDefaultHandler(key:any, handlerInstance:any)\r\n    {\r\n        if(this.defaultHandlerMap[key] != null)\r\n        {\r\n            Logger.error(\"重复注册defaulthandler\", key);\r\n        }\r\n        this.defaultHandlerMap[key] = handlerInstance;\r\n    }\r\n\r\n    public removeHandler(key:any)\r\n    {\r\n        if(this.handlerMap[key])\r\n            this.handlerMap[key] = null;\r\n    }\r\n\r\n    public clearHandlers()\r\n    {\r\n        this.handlerMap = {}\r\n        this.defaultHandlerMap = {}\r\n    }\r\n\r\n    public getHandler(key:any):any\r\n    {\r\n        let handler = this.handlerMap[key];\r\n        if(handler == null)\r\n            handler = this.defaultHandlerMap[key];\r\n        \r\n        if(handler == null)\r\n        {\r\n            Logger.error(\"没有找到对应处理handler\", key);\r\n        }\r\n        return handler;\r\n    }\r\n}"]}