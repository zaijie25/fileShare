{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\net\\chat\\SystemTimeManager.ts"],"names":[],"mappings":";;;;;;AAAA;IAGI,SAAS;IACT;QAEQ,cAAS,GAAU,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAC1C,mBAAc,GAAU,CAAC,CAAC;QAC1B,oBAAe,GAAU,CAAC,CAAC;IAJb,CAAC;IAKT,6BAAW,GAAzB;QACI,IAAG,iBAAiB,CAAC,QAAQ,IAAI,IAAI,EAAC;YAClC,iBAAiB,CAAC,QAAQ,GAAG,IAAI,iBAAiB,EAAE,CAAC;SACxD;QACD,OAAO,iBAAiB,CAAC,QAAQ,CAAC;IACtC,CAAC;IACD,SAAS;IACF,yCAAa,GAApB;QACI,IAAI,OAAO,GAAU,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAC5C,OAAO,OAAO,GAAG,iBAAiB,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;IAC9D,CAAC;IACD,kBAAkB;IACX,wCAAY,GAAnB;QACA,iBAAiB,CAAC,QAAQ,CAAC,SAAS,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAC9D,OAAO,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC;IAC9C,CAAC;IACC,gBAAgB;IACT,uCAAW,GAAlB;QACA,OAAO,iBAAiB,CAAC,QAAQ,CAAC,cAAc,CAAC;IACnD,CAAC;IACD,sBAAsB;IACb,qCAAS,GAAhB;QACA,IAAI,MAAM,GAAU,CAAC,CAAC;QACtB,IAAI,OAAO,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACrC,IAAI,OAAO,GAAG,iBAAiB,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;QAC9D,MAAM,GAAG,CAAC,CAAC,OAAO,GAAG,OAAO,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC7C,OAAO,MAAM,CAAC;IAChB,CAAC;IACC,4BAA4B;IACrB,yCAAa,GAApB,UAAqB,UAAU;QAC/B,IAAI,QAAQ,GAAG,UAAU,GAAG,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC;QACjE,iBAAiB,CAAC,QAAQ,CAAC,cAAc,GAAG,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc,CAAC;QACpJ,iBAAiB,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc,CAAC;QAC5K,iBAAiB,CAAC,QAAQ,CAAC,eAAe,GAAG,CAAC,CAAC;IACjD,CAAC;IA1CC,eAAe;IACR,0BAAQ,GAAG,IAAI,CAAC;IA0C3B,wBAAC;CA5CD,AA4CC,IAAA;kBA5CoB,iBAAiB","file":"","sourceRoot":"/","sourcesContent":["export default class SystemTimeManager{\r\n    // 静态成员instance\r\n    static instance = null;\r\n    // 私有构造函数\r\n    private constructor(){}\r\n\r\n    private heartTime:number = (new Date()).getTime();\r\n    private diffServerTime:number = 0;\r\n    private diffServerCount:number = 1;\r\n    public static getInstance(){\r\n        if(SystemTimeManager.instance == null){\r\n            SystemTimeManager.instance = new SystemTimeManager();\r\n        }\r\n        return SystemTimeManager.instance;\r\n    }\r\n    //获取服务器时间\r\n    public getServerTime():number {\r\n        let nowTime:number = (new Date()).getTime();\r\n        return nowTime + SystemTimeManager.instance.getDiffTime();\r\n    }\r\n    //获取本地时间，每次发送心跳的时候\r\n    public getLocalTime() {\r\n    SystemTimeManager.instance.heartTime = (new Date()).getTime();\r\n    return SystemTimeManager.instance.heartTime;\r\n  }\r\n    //获取本地时间与服务器的时间差\r\n    public getDiffTime() {\r\n    return SystemTimeManager.instance.diffServerTime;\r\n  }\r\n  // 消息发送时上报给服务器的localid\r\n    public randomBit() {\r\n    let result:number = 0;\r\n    let nowTime = (new Date()).getTime();\r\n    let difTime = SystemTimeManager.instance.getDiffTime() * 1000;\r\n    result = ((nowTime + difTime * 1000) * 1000);\r\n    return result;\r\n  }\r\n    //收到心跳以后计算本地时间与服务器的时间差,取最小差值\r\n    public setServerTime(serverTime) {\r\n    var diffTime = serverTime - SystemTimeManager.instance.heartTime;\r\n    SystemTimeManager.instance.diffServerTime = (SystemTimeManager.instance.diffServerTime == 0) ? diffTime : SystemTimeManager.instance.diffServerTime;\r\n    SystemTimeManager.instance.diffServerTime = Math.abs(diffTime) < Math.abs(SystemTimeManager.instance.diffServerTime) ? diffTime : SystemTimeManager.instance.diffServerTime;\r\n    SystemTimeManager.instance.diffServerCount = 1;\r\n  }\r\n}"]}