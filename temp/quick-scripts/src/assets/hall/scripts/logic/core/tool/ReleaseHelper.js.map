{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\tool\\ReleaseHelper.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { DestoryType } from \"../ui/WndBase\";\r\nimport ReleaseItem from \"../../../framework/resource/ReleaseItem\";\r\n\r\nexport default class ReleaseHelper\r\n{\r\n    //被预加载但是没有使用的资源，如游戏图标。  切场景时需要统一清理\r\n    private _unusedSet:Set<any> = new Set<any>();\r\n    private _unusedTypeMap:Map<string, any> = new Map<string, any>();\r\n\r\n    // private _releaseMap = {}\r\n\r\n    addBundleRelease(bundleName:string,path:string,type?:typeof cc.Asset){\r\n        // if (!bundleName || !path){\r\n        //     Logger.error(\"addRelease bundleName or path == null\")\r\n        //     return;\r\n        // }\r\n        // if (!this._releaseMap[bundleName]){\r\n        //     this._releaseMap[bundleName] = {}\r\n        // }\r\n        \r\n        // let bundleReleaseMap = this._releaseMap[bundleName]\r\n        // if (bundleReleaseMap[path]){\r\n        //     Logger.error(\"path has already addRelease \",path)\r\n        //     return;\r\n        // } \r\n        // let releaseItem = new ReleaseItem\r\n        // releaseItem.resPath = path\r\n        // releaseItem.resType = type\r\n        // bundleReleaseMap[path] = releaseItem\r\n    }\r\n\r\n    releaseBundle(bundleName:string){\r\n        // let bundleReleaseMap = this._releaseMap[bundleName]\r\n        // if (!bundleReleaseMap){\r\n        //     Logger.error(\"releaseBundle bundle is null \",bundleName)\r\n        //     return;\r\n        // }\r\n        // for (let path in bundleReleaseMap){\r\n        //     let releaseItem = bundleReleaseMap[path]\r\n        //     if (releaseItem){\r\n        //         let path = releaseItem.resPath\r\n        //         let type = releaseItem.resType\r\n        //         this.releaseBundleRes(bundleName,path,type)\r\n        //     }else {\r\n        //         Logger.error(\"releaseBundle path releaseItem is null\",path)\r\n        //     }\r\n        // }\r\n        // let bundle = cc.assetManager.getBundle(bundleName);\r\n        // bundle.releaseAll();\r\n        // cc.assetManager.removeBundle(bundle);\r\n        // delete this._releaseMap[bundleName];\r\n        // this._releaseMap[bundleName] = null\r\n\r\n        let bundle = cc.assetManager.getBundle(bundleName);\r\n        if (bundle){\r\n            bundle.releaseUnusedAssets();\r\n            // bundle.releaseAll();            // debug 释放bundle有被其他相同优先级bundle共享的资源会导致一同释放, 不管是否计数\r\n            cc.assetManager.removeBundle(bundle);\r\n        }\r\n    }\r\n\r\n    releaseBundleRes(bundleName:string,path:string,type?:typeof cc.Asset){\r\n        if (!bundleName){\r\n            Logger.error(\"releaseBundleRes bundleName is null \")\r\n            return;\r\n        }\r\n        if (!path){\r\n            Logger.error(\"releaseBundleRes path is null\")\r\n            return;\r\n        }\r\n        // Logger.error(\"releaseBundleRes bundleName path \",bundleName,path)\r\n\r\n        let bundle = cc.assetManager.getBundle(bundleName);\r\n        if (bundle){\r\n            bundle.release(path,type)\r\n        }else {\r\n            Logger.error(\"releaseBundleRes bundle is null \",bundleName)\r\n        }\r\n    }\r\n\r\n\r\n    //记录可能加载但没被使用的资源\r\n    public recordUnusedAsset(array, type = null)\r\n    {\r\n        for(let i = 0; i < array.length; i++)\r\n        {\r\n            this._unusedSet.add(array[i]);\r\n            if(type != null)\r\n                this._unusedTypeMap.set(array[i], type);\r\n        }\r\n    }\r\n\r\n    //资源被使用后，从set中删除\r\n    public markUsed(url)\r\n    {\r\n        this._unusedSet.delete(url);\r\n        this._unusedTypeMap.delete(url);\r\n    }\r\n\r\n    //清理资源\r\n    public clearUnuseAssets()\r\n    {\r\n        this._unusedSet.forEach((url)=>{\r\n            let type = this._unusedTypeMap[url];\r\n            Global.ResourceManager.releaseCache(url, type);\r\n        })\r\n        this._unusedSet.clear();\r\n        this._unusedTypeMap.clear();\r\n    }\r\n\r\n\r\n    public adjustByIphone6()\r\n    {\r\n        if(Global.Toolkit.isIphone6())\r\n        {\r\n            Logger.error(\"is iphone 6\")\r\n            Global.Setting.cachedGameItemCount = 0;\r\n            // Global.UI.getWindow(\"WndHall\").destoryType = DestoryType.ChangeScene;\r\n        }\r\n    }\r\n}"]}