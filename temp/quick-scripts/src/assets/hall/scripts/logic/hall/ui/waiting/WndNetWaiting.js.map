{"version":3,"sources":["assets\\hall\\scripts\\logic\\hall\\ui\\waiting\\WndNetWaiting.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import WndBase, { DestoryType } from \"../../../core/ui/WndBase\";\r\nimport WaitingModel from \"../../../hallcommon/model/WaitingModel\";\r\n\r\n//网络请求弹出界面\r\nexport default class WndNetWaiting extends WndBase\r\n{\r\n    private tipsLabel:cc.Label;\r\n    private counter = 0;\r\n    private model:WaitingModel;\r\n    private maxFrameCount = 0;\r\n    private UpdateInterval = 0.2;\r\n\r\n    private blockMask:cc.BlockInputEvents\r\n\r\n    protected onInit()\r\n    {\r\n        this.name = \"WndNetWaiting\";\r\n        this.layer = Global.UI.TipsLayer;\r\n        this.resPath = \"hall/prefabs/ui/NetWaitUI\";\r\n        this.model = Global.ModelManager.getModel(\"WaitingModel\");\r\n        this.destoryType = DestoryType.Persist;\r\n    }\r\n\r\n    protected initView()\r\n    {\r\n        let bgNode = this.getChild(\"mask\");\r\n        this.blockMask = bgNode.getComponent(cc.BlockInputEvents)\r\n        bgNode.width = 1600;\r\n        bgNode.height = 1600;\r\n        this.tipsLabel = this.getComponent(\"tips\", cc.Label);\r\n        if(cc.isValid(this.tipsLabel)){\r\n            this.tipsLabel.string = \"连接中\"\r\n        }\r\n    }\r\n\r\n    protected onOpen()\r\n    {\r\n        this.model.on(this.model.EVENT_UPDATE_WAITING_TIME, this, this.updateTime)\r\n        let maxWaitTime = 0;\r\n        if(this.args.length == 0)\r\n        {\r\n            Logger.error(\"没有设置超时时间\");\r\n            maxWaitTime = 15;\r\n        }\r\n        else\r\n            maxWaitTime = this.args[0];\r\n\r\n        if(this.args.length > 1 && this.args[1]  && this.args[1] != \"\" && isNaN(Number(this.args[1])))\r\n        {\r\n            if(cc.isValid(this.tipsLabel)){\r\n                this.tipsLabel.string = this.args[1];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(cc.isValid(this.tipsLabel)){\r\n                this.tipsLabel.string = \"连接中\"\r\n            }\r\n        }\r\n\r\n        if(this.args.length >= 4)\r\n        {\r\n            this.blockMask.enabled = this.args[3]\r\n        }\r\n\r\n       \r\n        this.updateTime(maxWaitTime)\r\n        if(cc.isValid(this.tipsLabel)){\r\n            this.tipsLabel.schedule(this.onSchedule.bind(this), this.UpdateInterval, cc.macro.REPEAT_FOREVER)\r\n        }\r\n        this.node.runAction(cc.fadeIn(0.5));\r\n    }\r\n\r\n    private updateTime(maxWaitTime)\r\n    {\r\n        this.counter = 0;\r\n        this.maxFrameCount = maxWaitTime / this.UpdateInterval;\r\n    }\r\n\r\n    protected onClose()\r\n    {\r\n        this.model.off(this.model.EVENT_UPDATE_WAITING_TIME, this, this.updateTime)\r\n        this.counter = 0;\r\n        this.tipsLabel.unscheduleAllCallbacks();\r\n    }\r\n\r\n    protected onDispose()\r\n    {\r\n        this.counter = 0;\r\n        this.tipsLabel = null\r\n    }\r\n\r\n    private onSchedule()\r\n    {\r\n        let waitingList = this.model.getWaitingList();\r\n        if(waitingList.length == 0) {\r\n            this.close();\r\n        }\r\n\r\n        this.counter++;\r\n        let mod = this.counter % 4;\r\n        // let subStr = \"\"\r\n        // for(let i = 0; i < mod; i++)\r\n        // {\r\n        //     subStr += \".\"\r\n        // }\r\n        // this.tipsLabel.string = \"玩命加载中\" +subStr;\r\n\r\n        if(this.counter > this.maxFrameCount)\r\n        {\r\n            //强制关闭\r\n            this.close();\r\n            this.model.waitTimeOut();\r\n        }\r\n    }\r\n}"]}