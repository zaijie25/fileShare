{"version":3,"sources":["assets\\hall\\scripts\\logic\\hall\\ui\\msg\\NoticeView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { MsgEvent, MsgType } from \"./MsgEvent\";\r\nimport PoolBase from \"../../../core/tool/PoolBase\";\r\nimport HallPopMsgHelper, { PopWndName } from \"../../tool/HallPopMsgHelper\";\r\nimport ViewBase from \"../../../core/ui/ViewBase\";\r\nimport { ActivityConstants } from \"../Activity/ActivityConstants\";\r\nimport MsgModel from \"../../../hallcommon/model/MsgModel\";\r\nimport WaitingView from \"../waiting/WaitingView\";\r\n\r\nexport default class NoticeView extends ViewBase {\r\n\r\n    MsgModel: MsgModel;\r\n    contentNode: cc.Node;\r\n    copyItem: any;\r\n    layout: cc.Layout;\r\n    contentTxt: cc.Label;\r\n    fromTxt: cc.Label;\r\n    timeTxt: cc.Label;\r\n    selectId: number;\r\n    timerID: any;\r\n    Sprite: cc.Sprite\r\n    noMsgTips: cc.Node;\r\n    // rightBg: cc.Node;\r\n    msgType: number\r\n    itemPool: NoticeItemPool;\r\n    nodeList: any[] = [];\r\n    private waitingNode :cc.Node;\r\n    protected onSubViewShow(){\r\n    \tthis.waitingNode.active = true;\r\n        this.MsgModel.on(MsgEvent.NoticeListCallback, this, this.RefreshLeftPanel);\r\n        this.MsgModel.on(MsgEvent.ReadMsgCallBack, this, this.RefreshInfoPanel);\r\n\r\n        this.MsgModel.SetStatus(null)\r\n        this.InitData()\r\n    }\r\n\r\n    /* public openAnimFinish() {\r\n        this.InitData()\r\n    } */\r\n\r\n    InitData() {\r\n        let data = this.MsgModel.GetDataByType(this.msgType);\r\n        if (data) {\r\n            this.RefreshLeftPanel(data)\r\n        }\r\n        else {\r\n            this.MsgModel.GetMsgList(this.msgType)\r\n        }\r\n    }\r\n\r\n    protected initView() {\r\n        this.copyItem = this.getChild(\"LeftPanel/MsgItem\");\r\n        this.contentNode = this.getChild(\"LeftPanel/scrollview/view/content\");\r\n        this.layout = this.contentNode.getComponent(cc.Layout)\r\n\r\n        let tmpContentTxt = this.getChild(\"RightPanel/scrollview/view/content/Content\");\r\n        this.contentTxt = tmpContentTxt.getComponent(cc.Label);\r\n        this.contentTxt.string = \"\"\r\n        let tmpFromTxt = this.getChild(\"RightPanel/from\");\r\n        this.fromTxt = tmpFromTxt.getComponent(cc.Label);\r\n        this.fromTxt.string = \"\"\r\n\r\n        let tmpTimeTxt = this.getChild(\"RightPanel/time\");\r\n        this.timeTxt = tmpTimeTxt.getComponent(cc.Label);\r\n        this.timeTxt.string = \"\"\r\n        this.Sprite = this.getChild(\"RightPanel/maskSprite/SpriteItem\").getComponent(cc.Sprite);\r\n        this.noMsgTips = this.getChild(\"noMsgTips\");\r\n        this.noMsgTips.active = false;\r\n        /* this.addCommonClick(\"close\", this.closeWnd, this);\r\n        this.rightBg = this.getChild(\"bg\");\r\n        this.rightBg.active = false; */\r\n        this.MsgModel = <MsgModel>Global.ModelManager.getModel(\"MsgModel\");\r\n        this.msgType = MsgType.Notice\r\n        this.initItemPool();\r\n        this.waitingNode = WaitingView.initWaitingView(this.node,cc.v2(120,0));\r\n    }\r\n\r\n    private initItemPool() {\r\n\r\n        this.itemPool = new NoticeItemPool(this.copyItem);\r\n    }\r\n\r\n    RefreshLeftPanel(msg: any) {\r\n        if (msg == null) {\r\n            this.copyItem.active = false;\r\n            this.noMsgTips.active = true;\r\n            this.waitingNode.active = false;\r\n            // this.rightBg.active = false;\r\n            return\r\n        }\r\n        this.recycle()\r\n        if (msg.notice.length === 0) {\r\n            this.waitingNode.active = false;\r\n            this.copyItem.active = false;\r\n            this.noMsgTips.active = true;\r\n            // this.rightBg.active = false;\r\n            return;\r\n        }\r\n\r\n\r\n        let arr: Array<any> = msg.notice || [];\r\n        let count = arr.length;\r\n        this.noMsgTips.active = false;\r\n        for (let j = 0; j < count; j++) {\r\n            let imageItem = this.itemPool.getItem();\r\n            imageItem.name = String(arr[j].id);\r\n            imageItem.setParent(this.contentNode)\r\n            this.nodeList.push(imageItem);\r\n            if (j === 0) {\r\n                imageItem.getComponent(\"FeedbackLeftItem\").SetToggleChecked(true)\r\n                imageItem.getComponent(\"FeedbackLeftItem\").node.name = String(arr[j].id);\r\n                this.selectId = arr[j].id\r\n            }\r\n            imageItem.active = true;\r\n            imageItem.on(cc.Node.EventType.TOUCH_END, this.imageItemClick, this)\r\n            let imgItem = imageItem.getComponent(\"FeedbackLeftItem\")\r\n            imgItem.onInit(arr[j].title)\r\n            imgItem.entityData = arr[j];\r\n        }\r\n\r\n        let gameData = arr[0]\r\n        if (gameData) {\r\n            this.MsgModel.ReadMsg(gameData.id, this.msgType, gameData.red_status)\r\n        }\r\n\r\n\r\n    }\r\n    imageItemClick(event) {\r\n        this.waitingNode.active = true;\r\n        Global.Audio.playBtnSound();\r\n        let item = event.target;\r\n        let gameListItem = item.getComponent(\"FeedbackLeftItem\")\r\n        let gameData = gameListItem.entityData;\r\n        this.selectId = gameData.id;\r\n        this.ReSetRightPanel()\r\n        let data = this.MsgModel.GetContentByID(this.msgType, this.selectId)\r\n        if (data) {\r\n            this.RefreshInfoPanel(data)\r\n            return\r\n        }\r\n        // Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, true)\r\n        this.MsgModel.ReadMsg(gameData.id, this.msgType, gameData.red_status)\r\n    }\r\n    RefreshInfoPanel(data: any) {\r\n        this.waitingNode.active = false;\r\n        this.ReSetRightPanel()\r\n        this.contentTxt.string = \"\\r\\n\" + Global.Toolkit.removeEmoji(data.content) || \"\";\r\n        this.timeTxt.string = data.send_time || \"\"\r\n        this.fromTxt.string = data.from || \"\"\r\n        this.Sprite.spriteFrame = null\r\n        Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, false)\r\n        let self = this\r\n        if (data.back_url != null && !Global.Toolkit.isEmptyObject(data.back_url)) {\r\n            this.contentTxt.string = \"\"\r\n            this.timeTxt.string =  \"\"\r\n            this.fromTxt.string =  \"\"\r\n            if (CC_JSB) {\r\n                Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, true)\r\n                Global.Toolkit.LoadPicToNative(Global.Toolkit.DealWithUrl(data.back_url), Global.Toolkit.DealWithUrl(data.back_url), (texture:cc.Texture2D) => {\r\n                    if(self.selectId != data.id)\r\n                    {\r\n                        return\r\n                    }\r\n                   \r\n                    if(self.node && self.node.isValid)\r\n                    {\r\n                        var frame = new cc.SpriteFrame(texture);\r\n                        self.Sprite.sizeMode =  cc.Sprite.SizeMode.CUSTOM\r\n                        self.Sprite.node.width = 750\r\n                        self.Sprite.node.height = 480\r\n                        self.Sprite.spriteFrame = frame\r\n                        Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, false)\r\n\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, true)\r\n                cc.assetManager.loadRemote(data.back_url, { ext: '.png' }, function (err, texture:cc.Texture2D) {\r\n                    \r\n                    if(self.selectId != data.id)\r\n                    {\r\n                        return\r\n                    }\r\n                    if(self.node && self.node.isValid)\r\n                    {\r\n                        var frame = new cc.SpriteFrame(texture);\r\n                        self.Sprite.sizeMode =  cc.Sprite.SizeMode.CUSTOM\r\n                        self.Sprite.node.width = 750\r\n                        self.Sprite.node.height = 480\r\n                        self.Sprite.spriteFrame = frame\r\n                        Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, false)\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n        this.RefreshLeftItem(data);\r\n\r\n    }\r\n\r\n\r\n    protected onSubViewHide() {\r\n        this.MsgModel.off(MsgEvent.NoticeListCallback, this, this.RefreshLeftPanel);\r\n        this.MsgModel.off(MsgEvent.ReadMsgCallBack, this, this.RefreshInfoPanel);\r\n        HallPopMsgHelper.Instance.releaseLock(PopWndName.Notice);\r\n        this.selectId = 0;\r\n        // let MsgFlag = this.MsgModel.CheckIsAnyNoticeNotRead()\r\n        // if (MsgFlag) {\r\n        //     Global.Event.event(GlobalEvent.ShowRedSpot, [false, HallRedSpotType.Gonggao]);\r\n        // }\r\n        // else {\r\n        //     Global.Event.event(GlobalEvent.CloseRedSpot, HallRedSpotType.Gonggao);\r\n        // }\r\n        this.ReSetRightPanel()\r\n    }\r\n\r\n    RefreshLeftItem(data: any) {\r\n        let node = cc.find(String(data.id), this.contentNode)\r\n        if(node && node.isValid)  \r\n        {\r\n            node.getComponent(\"FeedbackLeftItem\").SetUnReadActiveState(false)\r\n        }      \r\n    }\r\n\r\n    ReSetRightPanel() {\r\n        this.contentTxt.string = \"\";\r\n        this.timeTxt.string = \"\"\r\n        this.fromTxt.string = \"\"\r\n        // this.Sprite.spriteFrame = null\r\n    }\r\n    protected onDispose() {\r\n        if (this.itemPool)\r\n            this.itemPool.resetPool()\r\n        this.nodeList = [];\r\n    }\r\n\r\n    public recycle() {\r\n        this.itemPool.recycleAll(this.nodeList);\r\n        this.nodeList = [];\r\n    }\r\n\r\n}\r\nclass NoticeItemPool extends PoolBase {\r\n    constructor(private copyNode: cc.Node) {\r\n        super();\r\n    }\r\n\r\n    protected createItem() {\r\n        return cc.instantiate(this.copyNode);\r\n    }\r\n\r\n    protected resetItem(node: cc.Node) {\r\n        node.active = false;\r\n        node.setParent(null)\r\n       \r\n    }\r\n    public recycleAll(arr: Array<any>) {\r\n        super.recycleAll(arr)\r\n        arr.forEach(ele => {\r\n            this.resetItem(ele);\r\n        });\r\n\r\n    }\r\n}"]}