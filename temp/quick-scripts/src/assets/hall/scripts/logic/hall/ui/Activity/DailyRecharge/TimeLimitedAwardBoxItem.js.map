{"version":3,"sources":["assets\\hall\\scripts\\logic\\hall\\ui\\Activity\\DailyRecharge\\TimeLimitedAwardBoxItem.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nimport { TimeLimitedBoxState } from \"./WndTimeLimitedRechargeGift\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TimeLimitedAwardBoxItem extends cc.Component {\r\n\r\n    @property([cc.Node])\r\n    awardStateNode: cc.Node[] = []\r\n\r\n\r\n    @property(sp.Skeleton)\r\n    spine: sp.Skeleton = null\r\n    @property(cc.Label)\r\n    rateLabel: cc.Label = null\r\n\r\n    @property(cc.Node)\r\n    opensp:cc.Node = null;\r\n\r\n    data: any = null\r\n\r\n    key = null\r\n\r\n    refreshState(data, level,index,levelCfg,reachCfg) {\r\n        this.key = data.config.list[index].key\r\n        this.data = data\r\n        this.refreshRate(level)\r\n        let state: TimeLimitedBoxState = this.getBoxStateByData(data,index,levelCfg,reachCfg)\r\n        this.setBoxState(state)\r\n    }\r\n\r\n\r\n    /**\r\n    * \r\n    * @param data 当前宝箱数据\r\n    * @param is_todayData 昨日奖励是否领取完成\r\n    */\r\n    getBoxStateByData(data,index,levelCfg,reachCfg) \r\n    {\r\n        let currentDama = data.put_code\r\n       \r\n\r\n        let reachFlag = reachCfg[index] == 1\r\n\r\n        let damaFlag = currentDama>=levelCfg[index] && levelCfg[index] >0\r\n        let status = data.status // 1 未参与 2 参与未第二次充值 3 参与已经第二次充值 0 结束\r\n\r\n        let receiveFlag = data.config.list[index]\r\n\r\n        if(!damaFlag)\r\n        {\r\n            return TimeLimitedBoxState.Normal\r\n        }\r\n        else\r\n        {\r\n            switch (status) {\r\n                case 1:\r\n                    return TimeLimitedBoxState.Normal\r\n\r\n                case 2:\r\n                    return TimeLimitedBoxState.TodayAchieved\r\n                case 3:\r\n                    if(!reachFlag)\r\n                    {\r\n                        return TimeLimitedBoxState.TodayAchieved\r\n                    }\r\n                    return TimeLimitedBoxState.AlreadyGot\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return TimeLimitedBoxState.Normal\r\n    }\r\n\r\n\r\n    refreshRate(data) {\r\n        if (!data) {\r\n            return\r\n        }\r\n        this.rateLabel.string = data.rate + \"%\"+\"首充彩金\";\r\n    }\r\n\r\n    setBoxState(state: TimeLimitedBoxState) {\r\n        let btn = this.node.getComponent(cc.Button)\r\n        switch (state) {\r\n            case TimeLimitedBoxState.Normal:\r\n                if (btn) {\r\n                    btn.interactable = false\r\n                }\r\n                this.awardStateNode[0].active = true;\r\n                this.awardStateNode[1].active = false;\r\n                this.opensp.active = false;\r\n                break;\r\n            case TimeLimitedBoxState.TodayAchieved:\r\n                if (btn) {\r\n                    btn.interactable = true\r\n                }\r\n                this.awardStateNode[0].active = false;\r\n                this.awardStateNode[1].active = true;\r\n                if(this.spine)\r\n                {\r\n                    this.spine.setAnimation(0,\"idle\",true)\r\n                }\r\n                this.opensp.active = false;\r\n                break;\r\n            case TimeLimitedBoxState.AlreadyGot:\r\n                if (btn) {\r\n                    btn.interactable = false\r\n                }\r\n                this.awardStateNode[0].active = false;\r\n                this.awardStateNode[1].active = false;\r\n                if(this.spine)\r\n                {\r\n                    this.spine.setAnimation(0,\"idle\",true)\r\n                }\r\n                this.opensp.active = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n"]}