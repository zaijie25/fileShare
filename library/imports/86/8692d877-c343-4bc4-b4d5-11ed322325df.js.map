{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\setting\\ServerRoutes.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nexport default class ServerRoutes {\r\n    public serverInfoList = []\r\n    public curIndex = 0;\r\n    public parse(routes) {\r\n        if (routes == null)\r\n            return;\r\n        for (let i = 0; i < routes.length; i++) {\r\n            if (!this.checkRouteValid(routes[i]))\r\n                continue;\r\n            let routeInfo = routes[i]\r\n            //检测route是否合法\r\n            if (Global.UrlUtil.checkIsMutiLinesSameHost(routeInfo.host)) {\r\n                let lineAddresses = Global.UrlUtil.getMutiLinesSameHost(routeInfo.host)\r\n                // Logger.error(\"checkIsMutiLinesSameHost lineAddresses \" + JSON.stringify(lineAddresses))\r\n                if (lineAddresses && lineAddresses.length > 0) {\r\n                    let lineAddressesLen = lineAddresses.length\r\n                    for (let i = 0; i < lineAddressesLen; i++) {\r\n                        let lineAddress = lineAddresses[i]\r\n                        let newLineRouteInfo = Global.JSUtil.copyObj(routeInfo)\r\n                        newLineRouteInfo.host = lineAddress\r\n                        let serverInfo = new ServerRouteInfo();\r\n                        serverInfo.parse(newLineRouteInfo);\r\n                        if (serverInfo.checkSelfIsSupport()) {\r\n                            this.serverInfoList.push(serverInfo);\r\n                        }\r\n                    }\r\n                }\r\n                Logger.error(\"checkIsMutiLinesSameHost this.serverInfoList \" + JSON.stringify(this.serverInfoList))\r\n\r\n            } else {\r\n                let serverInfo = new ServerRouteInfo();\r\n                serverInfo.parse(routes[i]);\r\n                if (serverInfo.checkSelfIsSupport()) {\r\n                    this.serverInfoList.push(serverInfo);\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    public cleanRoutes()\r\n    {\r\n        this.serverInfoList = []\r\n    }\r\n\r\n\r\n\r\n    //新增wsport  当配置wsport后 大厅可以直接使用登录的域名+wsport作为游戏服务器地址\r\n    public parseWs(routes) {\r\n        if (routes == null)\r\n            return;\r\n        for (let i = 0; i < routes.length; i++) {\r\n            if (!this.checkWsRouteValid(routes[i]))\r\n                continue;\r\n            //检测route是否合法\r\n            let serverInfo = new ServerRouteInfo();\r\n            serverInfo.parseWs(routes[i]);\r\n            //检测当前route是否支持\r\n            if (serverInfo.checkSelfIsSupport()) {\r\n                this.serverInfoList.push(serverInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private checkRouteValid(routeInfo) {\r\n        return routeInfo.host != null;\r\n    }\r\n\r\n    private checkWsRouteValid(routeInfo) {\r\n        return routeInfo.host != null && routeInfo.wsport != null && routeInfo.wsport != \"\" && routeInfo.wsport != 0;\r\n    }\r\n\r\n    //返回随机route\r\n    public getRandRoute() {\r\n        // if(this.serverInfoList.length == 0)\r\n        //     return null;\r\n        // let len = this.serverInfoList.length;\r\n        // let randIndex = Global.Toolkit.getRoundInteger(len, 0)\r\n        // let routeInfo = this.serverInfoList[randIndex];\r\n        // this.curIndex = randIndex;\r\n        // return routeInfo;\r\n        return this.getCurRoute()\r\n    }\r\n\r\n    public getRouteArr(): string[] {\r\n        let arr = [];\r\n        for (let i = 0; i < this.serverInfoList.length; i++)\r\n            arr.push(this.serverInfoList[i].host);\r\n        return arr;\r\n    }\r\n\r\n    public getRouteLen() {\r\n        if (this.serverInfoList) {\r\n            return this.serverInfoList.length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public changeToAnotherRoute() {\r\n        if (this.serverInfoList.length < 1)\r\n            return;\r\n        this.curIndex = (this.curIndex + 1) % this.serverInfoList.length;\r\n        // Logger.error(\"changeToAnotherRoute curIndex = \" + this.curIndex)\r\n        // Logger.error(\"changeToAnotherRoute curIndex route = \" + JSON.stringify(this.serverInfoList[this.curIndex]))\r\n\r\n    }\r\n\r\n    //切换到下一个route\r\n    public getAnotherRoute() {\r\n        if (this.serverInfoList.length == 0)\r\n            return null;\r\n        if (this.serverInfoList.length == 1)\r\n            return this.serverInfoList[0];\r\n        this.curIndex = (this.curIndex + 1) % this.serverInfoList.length;\r\n        return this.serverInfoList[this.curIndex];\r\n    }\r\n\r\n    //返回当前route\r\n    public getCurRoute(): ServerRouteInfo {\r\n        let curRoute = null;\r\n        if (this.serverInfoList[this.curIndex] != null) {\r\n            curRoute = this.serverInfoList[this.curIndex];\r\n        } else {\r\n            Logger.error(\"cur route is null !!!\");\r\n            for (let i = 0; i < this.serverInfoList.length; i++) {\r\n                if (this.serverInfoList[i] != null) {\r\n                    this.curIndex = i;\r\n                    curRoute = this.serverInfoList[i];\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        //加了盾，有可能当前还没初始化成功,手动切换一次线路\r\n        if (curRoute) {\r\n            if (curRoute.checkSelfIsOK()) {\r\n                Logger.warn(\"getCurRoute curRoute checkSelfIsOK !!!\");\r\n                return curRoute;\r\n            } else {\r\n                curRoute = this.getCanUseRoute()\r\n                if (curRoute) {\r\n                    Logger.warn(\"getCurRoute curRoute getCanUseRoute !!!\");\r\n                    return curRoute\r\n                } else {\r\n                    Logger.error(\"getCurRoute getCanUseRoute is null !!!\");\r\n                }\r\n\r\n            }\r\n        } else {\r\n            Logger.error(\"getCurRoute curRoute is null !!!\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //对线路排序,成功的优先排在最先\r\n    public sortRoutes() {\r\n        if (this.curIndex == 0) {\r\n            // Logger.error(\"don't have to sort routes\")\r\n            return;\r\n        }\r\n        if (this.serverInfoList) {\r\n            let curServerRoute = this.serverInfoList[this.curIndex]\r\n            let newRoutes = [curServerRoute].concat(this.serverInfoList.filter((item) => item != curServerRoute))\r\n            this.serverInfoList = newRoutes\r\n            this.curIndex = 0;\r\n        }\r\n\r\n    }\r\n\r\n    public sortRoutesByIndex(index) {\r\n        if (index == null || index == undefined) {\r\n            return;\r\n        }\r\n        if (this.curIndex == index) {\r\n            return;\r\n        }\r\n        if (this.serverInfoList) {\r\n            let curServerRoute = this.serverInfoList[index]\r\n            if (curServerRoute) {\r\n                let newRoutes = [curServerRoute].concat(this.serverInfoList.filter((item) => item != curServerRoute))\r\n                this.serverInfoList = newRoutes\r\n                this.curIndex = 0;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public getRouteByIndex(index) {\r\n        if (index == null || index == undefined) {\r\n            return;\r\n        }\r\n        if (this.serverInfoList) {\r\n            let curServerRoute = this.serverInfoList[index]\r\n            return curServerRoute\r\n        }\r\n    }\r\n\r\n    //拿到当前可用的线路\r\n    public getCanUseRoute() {\r\n        let canUseRoute = null;\r\n        if (this.serverInfoList) {\r\n            for (let i = 0; i < this.serverInfoList.length; i++) {\r\n                let route = this.serverInfoList[i]\r\n                if (route != null) {\r\n                    let lo_type = route.lo_type\r\n                    if (lo_type) {\r\n                        if (lo_type > 1) {\r\n                            if (route.checkSelfIsOK()) {\r\n                                this.curIndex = i;\r\n                                canUseRoute = route;\r\n                                break;\r\n                            }\r\n                        } else {\r\n                            this.curIndex = i;\r\n                            canUseRoute = route;\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        this.curIndex = i;\r\n                        canUseRoute = route;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (canUseRoute) {\r\n                return canUseRoute;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class ServerRouteInfo {\r\n    //服务器地址或假域名\r\n    public host: string;\r\n    // //服务器ip地址\r\n    // public ip:string;\r\n    //服务器端口\r\n    public port: number = 0;\r\n    //ws服务器端口\r\n    public us_port: number = 0;\r\n    //盾需要的本地端口\r\n    public lo_port: number = 0;\r\n    //盾类型:0:不启用盾 1.自签名证书 2.云盾 3.智安盾\r\n    public lo_type: number = 0;\r\n\r\n    //http请求地址 缓存  不需要每次都拼接\r\n    private url: string;\r\n    //真实域名或ip\r\n    public realHost: string;\r\n    //阿里云游戏盾需要参数\r\n    public attr: any;\r\n    //web主页线路路径\r\n    public param: string;\r\n    //线路类型 0 常规请求线路 1下载资源线路\r\n    public url_type = 0;\r\n    // public group:string;\r\n    // public dip:string;\r\n\r\n    public parse(serverInfo) {\r\n        // Logger.error(\"ServerRouteInfo parse host = \" + serverInfo.host)\r\n        // Logger.error(\"ServerRouteInfo parse lo_port = \" + serverInfo.lo_port)\r\n        this.realHost = serverInfo.host;\r\n        this.port = serverInfo.port;\r\n        this.us_port = serverInfo.us_port;\r\n        this.lo_type = serverInfo.lo_type\r\n        let lo_port = serverInfo.lo_port\r\n        this.lo_port = lo_port;\r\n        this.attr = serverInfo.attr\r\n\r\n        if (this.lo_type && this.lo_type > 1) {\r\n            Logger.error(\"ServerRouteInfo parse initDunSDK lo_type = \" + this.lo_type)\r\n            Global.AppDun.initDunSDK(this.lo_type)\r\n            if (lo_port && lo_port > 0) {\r\n                this.lo_port = lo_port\r\n            } else if (this.us_port && this.us_port > 0) {\r\n                this.lo_port = this.us_port\r\n            } else if (this.port && this.port > 0) {\r\n                this.lo_port = this.port\r\n            }\r\n        }\r\n        let sad = serverInfo.sad\r\n        if (sad) {\r\n            let tempArray = sad.split(\".\")\r\n            if (tempArray && tempArray.length < 2) {\r\n                //加密\r\n                let host = Global.AESUtil.aesDecrptHost(sad)\r\n                if (host) {\r\n                    this.host = host;\r\n                }\r\n            } else {\r\n                this.host = sad.trim()\r\n            }\r\n\r\n        } else {\r\n            this.host = this.realHost\r\n        }\r\n\r\n        if (serverInfo.param) {\r\n            this.param = serverInfo.param;\r\n        }\r\n        if (serverInfo.url_type) {\r\n            this.url_type = serverInfo.url_type\r\n        }\r\n\r\n    }\r\n\r\n    private getServerUrl() {\r\n        let serverUrl = new ServerUrl()\r\n        serverUrl.addressHost = this.host ? this.host : this.realHost\r\n        serverUrl.realHost = this.realHost ? this.realHost : this.host\r\n        serverUrl.address = serverUrl.realHost\r\n        serverUrl.attr = this.attr\r\n        serverUrl.lo_type = this.lo_type\r\n        serverUrl.param = this.param;\r\n        serverUrl.url_type = this.url_type;\r\n        //旧版本不支持自签名证书\r\n        if (this.lo_type == 1) { //自签名证书\r\n            Global.UrlUtil.setRouteUrlCer(serverUrl)\r\n        } else {\r\n            Logger.log(\"no self signed\")\r\n        }\r\n        return serverUrl\r\n    }\r\n\r\n    public parseWs(serverInfo) {\r\n        this.realHost = serverInfo.host;\r\n        this.port = serverInfo.wsport;\r\n        this.us_port = serverInfo.us_port;\r\n        this.lo_type = serverInfo.lo_type;\r\n        let lo_port = serverInfo.lo_port\r\n        this.lo_port = lo_port;\r\n        this.attr = serverInfo.attr\r\n        if (this.lo_type && this.lo_type > 1) {\r\n            Logger.error(\"ServerRouteInfo parse initDunSDK lo_type = \" + this.lo_type)\r\n            Global.AppDun.initDunSDK(this.lo_type)\r\n            if (lo_port && lo_port > 0) {\r\n                this.lo_port = lo_port\r\n            } else if (this.us_port && this.us_port > 0) {\r\n                this.lo_port = this.us_port\r\n            } else if (this.port && this.port > 0) {\r\n                this.lo_port = this.port\r\n            }\r\n        }\r\n        let sad = serverInfo.sad\r\n        if (sad) {\r\n            let tempArray = sad.split(\".\")\r\n            if (tempArray && tempArray.length < 2) {\r\n                //加密\r\n                let host = Global.AESUtil.aesDecrptHost(sad)\r\n                if (host) {\r\n                    this.host = host;\r\n                }\r\n            } else {\r\n                this.host = sad.trim()\r\n            }\r\n\r\n        } else {\r\n            this.host = this.realHost\r\n        }\r\n        if (serverInfo.param) {\r\n            this.param = serverInfo.param;\r\n        }\r\n        if (serverInfo.url_type) {\r\n            this.url_type = serverInfo.url_type\r\n        }\r\n\r\n    }\r\n\r\n    public getPbSocketUrl(mod: string) {\r\n        let serverUrl = this.getSocketUrl();\r\n        let infos = mod.split(\".\")\r\n        let suffix = \"\"\r\n        for (let i = 0; i < infos.length; i++) {\r\n            suffix = suffix + infos[i] + \"/\"\r\n        }\r\n        serverUrl.suffix = serverUrl.suffix + suffix\r\n        return serverUrl\r\n    }\r\n\r\n    public getHttpUrlWithMod(mod) {\r\n        let serverUrl = this.getHttpUrl();\r\n        let infos = mod.split(\".\")\r\n        let suffix = \"\"\r\n        for (let i = 0; i < infos.length; i++) {\r\n            suffix = suffix + infos[i] + \"/\"\r\n        }\r\n        serverUrl.suffix = serverUrl.suffix + suffix\r\n        return serverUrl\r\n    }\r\n\r\n    public getSocketUrl() {\r\n        let url = \"\";\r\n        let serverUrl = this.getServerUrl()\r\n        if (this.lo_type > 1 && this.checkIsDunOK(this.realHost, this.lo_port, this.lo_type, this.attr)) {\r\n            Global.DNS.dealDunRoute(serverUrl, this.lo_port, this.lo_type)\r\n            serverUrl.protocol = \"ws\"\r\n        }\r\n        else if (this.us_port != null && this.us_port != 0) {\r\n            serverUrl.protocol = \"ws\"\r\n            Global.DNS.dealSelfRoute(serverUrl)\r\n            Global.UrlUtil.dealServerUrl(serverUrl, this.us_port)\r\n        }\r\n        else if (this.port != null && this.port != 0) {\r\n            serverUrl.protocol = \"wss\"\r\n            Global.DNS.dealSelfRoute(serverUrl)\r\n            Global.UrlUtil.dealServerUrl(serverUrl, this.port)\r\n        }\r\n\r\n        else {\r\n            Logger.error(\"Game Routes 配置错误\");\r\n        }\r\n        let paramPrefix = Global.UrlUtil.getUrlParamCommonPrefex()\r\n        serverUrl.suffix = \"/dict/\" + paramPrefix\r\n        return serverUrl;\r\n    }\r\n\r\n    public getHttpUrl() {\r\n        let serverUrl = this.getUrl()\r\n        if (this.url_type == 1) {\r\n            if (this.param) {\r\n                let paramPrefix = this.param\r\n                serverUrl.suffix = paramPrefix;\r\n            }\r\n\r\n        } else {\r\n            let paramPrefix = Global.UrlUtil.getUrlParamCommonPrefex()\r\n            serverUrl.suffix = \"/mini/\" + paramPrefix\r\n        }\r\n\r\n        return serverUrl\r\n    }\r\n\r\n    public getUrl() {\r\n        let serverUrl = this.getServerUrl()\r\n\r\n        if (this.lo_type > 1 && this.checkIsDunOK(this.realHost, this.lo_port, this.lo_type, this.attr)) {\r\n            Global.DNS.dealDunRoute(serverUrl, this.lo_port, this.lo_type)\r\n            // if (this.port != null && this.port != 0){\r\n            //     serverUrl.protocol = \"https\"\r\n            //     let hosts = [this.realHost]\r\n            //     Global.NativeEvent.setWhiteHosts(JSON.stringify(hosts))\r\n            // }else {\r\n            //     serverUrl.protocol = \"http\"\r\n            // }\r\n            serverUrl.protocol = \"http\"\r\n        } else if (this.port != null && this.port != 0) {\r\n            serverUrl.protocol = \"https\"\r\n            Global.DNS.dealSelfRoute(serverUrl)\r\n            Global.UrlUtil.dealServerUrl(serverUrl, this.port)\r\n        }\r\n        else if (this.us_port != null && this.us_port != 0) {\r\n            serverUrl.protocol = \"http\"\r\n            Global.DNS.dealSelfRoute(serverUrl)\r\n            Global.UrlUtil.dealServerUrl(serverUrl, this.us_port)\r\n        }\r\n        else {\r\n            serverUrl.protocol = \"https\"\r\n            Global.DNS.dealSelfRoute(serverUrl)\r\n            Global.UrlUtil.dealServerUrl(serverUrl, this.port)\r\n        }\r\n        return serverUrl;\r\n    }\r\n\r\n\r\n    public checkIsDunOK(host: string, lo_port: number, lo_type: number, attr: any) {\r\n        // Logger.error(\"----checkIsDunOk ----lo_port \" + lo_port)\r\n        // Logger.error(\"----checkIsDunOk ----lo_type \" + lo_type)\r\n        // Logger.error(\"----checkIsDunOk ----host \" + host)\r\n        let isSupport = Global.AppDun.checkAppIsSupportDunByType(lo_type)\r\n        if (isSupport) {\r\n            let isDunInit = Global.AppDun.getDunIsInitByType(lo_type)\r\n            let ipPortInfo = Global.AppDun.getServerIPAndPort(host, lo_port, lo_type, attr)\r\n            if (lo_port != null && lo_port != 0 && lo_type && isDunInit && ipPortInfo && ipPortInfo.port) {\r\n                return true;\r\n            } else {\r\n                Logger.error(\"lo_port lo_type  isDunInit ipPortInfo ipPortInfo.port  is null\")\r\n            }\r\n        } else {\r\n            Logger.error(\"checkAppIsSupportDunByType lo_type isSupport false\", lo_type)\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    //盾是否初始化成功\r\n    public checkSelfIsOK() {\r\n        if (this.lo_port && this.lo_type && this.host && (this.lo_type > 1)) {\r\n            let isOk = this.checkIsDunOK(this.host, this.lo_port, this.lo_type, this.attr)\r\n            Logger.error(\"checkSelfIsOk \" + isOk + \" host = \" + this.host + \" lo_port = \" + this.lo_port + \" lo_type = \" + this.lo_type)\r\n            return isOk;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public checkSelfIsSupport() {\r\n        let isSupport = false;\r\n        if (this.lo_type) {\r\n            if (this.lo_type == 1) {\r\n                isSupport = this.checkSelfIsSupportCer()\r\n            } else {\r\n                isSupport = Global.AppDun.checkAppIsSupportDunByType(this.lo_type)\r\n            }\r\n            Logger.error(\"checkRouteIsSupport isSupport \" + isSupport)\r\n            return isSupport;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public checkSelfIsSupportCer() {\r\n        if (!this.lo_type || !this.host) {\r\n            return false;\r\n        }\r\n        if (this.lo_type != 1) {\r\n            return false;\r\n        }\r\n        let isSupportCer = false;\r\n        let cerDirFiles = Global.Setting.SystemInfo.cerDirFiles\r\n        if (cerDirFiles && cerDirFiles.length > 0) {\r\n            for (let i = 0; i < cerDirFiles.length; i++) {\r\n                let fileFullName = cerDirFiles[i]\r\n                if (fileFullName && (fileFullName.indexOf(\".cer\") > -1) || fileFullName.indexOf(\".crt\") > -1) {\r\n                    let tempArray = fileFullName.split(\"/\")\r\n                    let lastFileName = tempArray[tempArray.length - 1]\r\n                    let fileName = lastFileName.replace(\".cer\", \"\")\r\n                    let addressHost = this.host.toLowerCase()\r\n                    if (fileName) {\r\n                        if (addressHost.indexOf(fileName.toLowerCase()) > -1) {\r\n                            isSupportCer = true;\r\n                            Logger.log(\"checkSelfIsSupportCer addressHost \" + addressHost + \"  contain cer host \" + fileName)\r\n                            break;\r\n                        } else {\r\n                            // Logger.log(\"checkSelfIsSupportCer addressHost \" + addressHost + \" not contain cer host \" + fileName)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        } else {\r\n            Logger.log(\"checkSelfIsSupportCer cerDirFiles has no file\")\r\n        }\r\n        return isSupportCer;\r\n    }\r\n}\r\n\r\n\r\nexport class ServerUrl {\r\n    private _protocol: string = \"\";\r\n    private _address: string = \"\";\r\n    private _address_host: string = \"\";\r\n    private _real_host: string = \"\";\r\n    private _port: number = 0;\r\n    private _suffix: string = \"\";\r\n    private _isEncrptUrl: boolean = false;\r\n    private _isEncrptParam: boolean = false;\r\n\r\n    private _isHostNameVerfy: boolean = false;\r\n    private _cerName: string = \"\";\r\n    private _cerPath: string = \"\";\r\n    private _lo_type: number = 0 //线路类型\r\n    private _isInnerRequest = true;//是否内部游戏请求链接\r\n    private _attr: any = null; //线路的额外参数\r\n    private _parm: string = \"\";//主页线路额外路径参数\r\n    private _url_type: number = 0;//线路类型 0 常规请求线路 1下载资源线路\r\n\r\n    public copyValue(serverUrl: ServerUrl) {\r\n        this._protocol = serverUrl._protocol\r\n        this._address = serverUrl._address\r\n        this._address_host = serverUrl._address_host\r\n        this._real_host = serverUrl._real_host\r\n        this._port = serverUrl._port\r\n        this._suffix = serverUrl._suffix\r\n    }\r\n\r\n    public parse(url: string) {\r\n        if (!url) {\r\n            Logger.error(\"ServerUrl parse url = null \")\r\n            return;\r\n        }\r\n        if (url.startsWith(\"https\")) {\r\n            this._protocol = \"https\"\r\n        } else if (url.startsWith(\"http\")) {\r\n            this._protocol = \"http\"\r\n        } else if (url.startsWith(\"wss\")) {\r\n            this._protocol = \"wss\"\r\n        } else if (url.startsWith(\"ws\")) {\r\n            this._protocol = \"ws\"\r\n        }\r\n        let arrs = url.split(\"//\");\r\n        let tmpUrl = url;\r\n        if (arrs.length > 1)\r\n            tmpUrl = arrs[1];\r\n        arrs = tmpUrl.split(\"/\");\r\n        let host = arrs[0];\r\n        if (host.indexOf(\":\") > -1) {\r\n            this._address = host.split(\":\")[0];\r\n            let port = host.split(\":\")[1];\r\n            if (port && Number(port)) {\r\n                this._port = Number(port)\r\n            }\r\n        } else {\r\n            this._address = host\r\n        }\r\n\r\n        this._address_host = this._address\r\n        this._real_host = this._address\r\n\r\n        Global.DNS.dealSelfRoute(this)\r\n        Global.UrlUtil.setRouteUrlCer(this)\r\n        if (arrs.length > 1) {\r\n            for (let i = 1; i < arrs.length; i++) {\r\n                this._suffix = this._suffix + \"/\" + arrs[i]\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public getUrl() {\r\n        let url = \"\";\r\n        let protocol = this._protocol\r\n        let address = this._address\r\n        let addressHost = this._address_host\r\n        let realHost = this._real_host\r\n        let port = this._port ? \":\" + this._port : \"\";\r\n        let suffix = this._suffix\r\n\r\n        if (protocol == \"ws\" || protocol == \"wss\") {\r\n            if (this._address && this._address_host) {\r\n                if (this._address != this._address_host) {\r\n                    //ws wss不支持自签名证书\r\n                    if (this.cerPath) {\r\n                        if (address == realHost) {\r\n                            if (addressHost != realHost) {\r\n                                url = protocol + \"://\" + address + \"...\" + addressHost + port + suffix\r\n                            } else {\r\n                                url = protocol + \"://\" + address + port + suffix\r\n                            }\r\n\r\n                        } else {\r\n                            url = protocol + \"://\" + address + \"...\" + realHost + port + suffix\r\n                        }\r\n                    } else {\r\n                        url = protocol + \"://\" + address + \"...\" + addressHost + port + suffix\r\n                    }\r\n\r\n                } else {\r\n                    url = protocol + \"://\" + address + port + suffix\r\n                }\r\n            } else {\r\n                url = protocol + \"://\" + address + port + suffix\r\n            }\r\n\r\n        } else {\r\n            url = protocol + \"://\" + address + port + suffix\r\n        }\r\n        if (this.url_type != 1) {\r\n            //https wss新增 p=s参数\r\n            if (url.startsWith(\"https\") || url.startsWith(\"wss\")) {\r\n                if (url.endsWith(\"?\")) {\r\n                    url = url + \"p=s\"\r\n                } else {\r\n                    url = url + \"&p=s\"\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            if (this.checkAddress(address)) {\r\n                url = address + port + suffix\r\n            }\r\n        }\r\n        return url;\r\n    }\r\n\r\n    public printSelf() {\r\n        let printStr = \"protocol = \" + this._protocol + \" address = \" + this._address + \" port = \" + this._port + \" addressHost = \" + this._address_host + \" realHost = \" + this._real_host + \" attr = \" + (this._attr ? JSON.stringify(this._attr) : \"null\")\r\n\r\n        return printStr\r\n\r\n    }\r\n\r\n    public checkAddress(address)\r\n    {\r\n        return address && address.startsWith(\"http\")\r\n    }\r\n\r\n    public set protocol(value) {\r\n        this._protocol = value\r\n    }\r\n\r\n    public get protocol() {\r\n        return this._protocol\r\n    }\r\n    public set address(value) {\r\n        this._address = value\r\n    }\r\n\r\n    public get address() {\r\n        return this._address\r\n    }\r\n\r\n    public set addressHost(value) {\r\n        this._address_host = value\r\n    }\r\n\r\n    public get addressHost() {\r\n        return this._address_host\r\n    }\r\n\r\n    public set realHost(value) {\r\n        this._real_host = value\r\n    }\r\n\r\n    public get realHost() {\r\n        return this._real_host\r\n    }\r\n\r\n    public set port(value) {\r\n        this._port = value\r\n    }\r\n\r\n    public get port() {\r\n        return this._port\r\n    }\r\n\r\n    public set suffix(value) {\r\n        this._suffix = value\r\n    }\r\n\r\n    public get suffix() {\r\n        return this._suffix\r\n    }\r\n\r\n    public set lo_type(value) {\r\n        this._lo_type = value\r\n    }\r\n\r\n    public get lo_type() {\r\n        return this._lo_type\r\n    }\r\n\r\n\r\n    public set isEncrptUrl(value) {\r\n        this._isEncrptUrl = value\r\n    }\r\n\r\n    public get isEncrptUrl() {\r\n        return this._isEncrptUrl\r\n    }\r\n\r\n    public set isEncrptParam(value) {\r\n        this._isEncrptParam = value\r\n    }\r\n\r\n    public get isEncrptParam() {\r\n        if (this._protocol == \"https\" || this._protocol == \"wss\") {\r\n            this._isEncrptParam = false;\r\n        } else {\r\n            this._isEncrptParam = true;\r\n        }\r\n        return this._isEncrptParam\r\n    }\r\n\r\n\r\n    public set isHostNameVerfy(value) {\r\n        this._isHostNameVerfy = value\r\n    }\r\n\r\n    public get isHostNameVerfy() {\r\n        return this._isHostNameVerfy\r\n    }\r\n\r\n    public set cerName(value) {\r\n        this._cerName = value\r\n    }\r\n\r\n    public get cerName() {\r\n        return this._cerName\r\n    }\r\n\r\n    public set cerPath(value) {\r\n        this._cerPath = value;\r\n    }\r\n\r\n    public get cerPath() {\r\n        return this._cerPath\r\n    }\r\n\r\n\r\n    public set isInnerRequest(value) {\r\n        this._isInnerRequest = value;\r\n    }\r\n\r\n    public get isInnerRequest() {\r\n        return this._isInnerRequest\r\n    }\r\n\r\n    public get attr() {\r\n        return this._attr;\r\n    }\r\n\r\n    public set attr(value) {\r\n        this._attr = value;\r\n    }\r\n\r\n    public get param() {\r\n        return this._parm\r\n    }\r\n    public set param(value) {\r\n        this._parm = value;\r\n    }\r\n    public get url_type() {\r\n        return this._url_type;\r\n    }\r\n    public set url_type(value) {\r\n        this._url_type = value\r\n    }\r\n\r\n}"]}