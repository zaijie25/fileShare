{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\enc\\Latin1.ts"],"names":[],"mappings":";;;;;;;AACA,8CAA6C;AAK7C;IAAA;IA8CA,CAAC;IA7CG;;;;;;;;;;OAUG;IACW,gBAAS,GAAvB,UAAwB,SAAoB;QACxC,UAAU;QACV,IAAM,WAAW,GAAG,EAAE,CAAC;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;YACzC,IAAM,IAAI,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YACtE,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;SAC/C;QAED,OAAO,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;IAED;;;;;;;;;;OAUG;IACW,YAAK,GAAnB,UAAoB,SAAiB;QACjC,WAAW;QACX,IAAM,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC;QAEzC,UAAU;QACV,IAAM,KAAK,GAAkB,EAAE,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;YACtC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5E;QAED,OAAO,IAAI,qBAAS,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;IACjD,CAAC;IACL,aAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,wBAAM;AAgDnB,8EAA8E;AAC9E,IAAM,CAAC,GAAa,MAAM,CAAC","file":"","sourceRoot":"/","sourcesContent":["import { Encoding } from './Encoding';\r\nimport { WordArray } from '../lib/WordArray';\r\n\r\ndeclare function escape(s: string): string;\r\ndeclare function unescape(s: string): string;\r\n\r\nexport class Latin1 {\r\n    /**\r\n     * Converts a word array to a Latin1 string.\r\n     *\r\n     * @param wordArray The word array.\r\n     *\r\n     * @return The Latin1 string.\r\n     *\r\n     * @example\r\n     *\r\n     *     let latin1String = Latin1.stringify(wordArray);\r\n     */\r\n    public static stringify(wordArray: WordArray): string {\r\n        // Convert\r\n        const latin1Chars = [];\r\n        for (let i = 0; i < wordArray.sigBytes; i++) {\r\n            const bite = (wordArray.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n            latin1Chars.push(String.fromCharCode(bite));\r\n        }\r\n\r\n        return latin1Chars.join('');\r\n    }\r\n\r\n    /**\r\n     * Converts a Latin1 string to a word array.\r\n     *\r\n     * @param latin1Str The Latin1 string.\r\n     *\r\n     * @return The word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     let wordArray = Latin1.parse(latin1String);\r\n     */\r\n    public static parse(latin1Str: string): WordArray {\r\n        // Shortcut\r\n        const latin1StrLength = latin1Str.length;\r\n\r\n        // Convert\r\n        const words: Array<number> = [];\r\n        for (let i = 0; i < latin1StrLength; i++) {\r\n            words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\r\n        }\r\n\r\n        return new WordArray(words, latin1StrLength);\r\n    }\r\n}\r\n\r\n// type guard for the formatter (to ensure it has the required static methods)\r\nconst _: Encoding = Latin1;"]}