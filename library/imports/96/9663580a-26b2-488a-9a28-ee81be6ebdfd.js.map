{"version":3,"sources":["assets\\hall\\scripts\\framework\\model\\ModelMananger.ts"],"names":[],"mappings":";;;;;;AAEA;;GAEG;AACH;IAYI;QAVU,aAAQ,GAA4B,EAAE,CAAC;IAYjD,CAAC;IATD,sBAAkB,wBAAQ;aAA1B;YACI,IAAG,YAAY,CAAC,SAAS,IAAI,IAAI,EAAE;gBAC/B,YAAY,CAAC,SAAS,GAAG,IAAI,YAAY,EAAE,CAAC;aAC/C;YACD,OAAO,YAAY,CAAC,SAAS,CAAC;QAClC,CAAC;;;OAAA;IAMD;;OAEG;IACI,2BAAI,GAAX;IAEA,CAAC;IAED;;;OAGG;IACI,+BAAQ,GAAf,UAAgB,SAAgB;QAC5B,IAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE;YACjC,MAAM,CAAC,GAAG,CAAC,+BAA+B,GAAG,SAAS,CAAC,CAAC;YACxD,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACI,iCAAU,GAAjB,UAAuC,SAAgB;QACnD,IAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE;YACjC,MAAM,CAAC,GAAG,CAAC,iCAAiC,GAAG,SAAS,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAM,CAAC;IACzC,CAAC;IAED;;;OAGG;IACI,oCAAa,GAApB,UAAqB,KAAe;QAChC,IAAG,KAAK,IAAI,IAAI,EAAE;YACd,MAAM,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;YACpE,OAAO;SACV;QACD,IAAG,KAAK,CAAC,IAAI,IAAI,EAAE,IAAI,KAAK,CAAC,IAAI,IAAI,WAAW,EAAE;YAC9C,MAAM,CAAC,KAAK,CAAC,2DAA2D,CAAC,CAAC;YAC1E,OAAO;SACV;QACD,IAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,EAC3C;YACI,MAAM,CAAC,GAAG,CAAC,qCAAqC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/D,OAAO;SACV;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IACtC,CAAC;IAED;;;OAGG;IACI,sCAAe,GAAtB,UAAuB,SAAgB;QACnC,IAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;YACxC,IAAI,KAAK,GAAa,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC/C,IAAG,KAAK,IAAI,IAAI,EAAE;gBACd,KAAK,CAAC,KAAK,EAAE,CAAC;aACjB;YACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;SACnC;IACL,CAAC;IAED;;;OAGG;IACI,oCAAa,GAApB;QACI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,4BAAK,GAAZ;QACI,KAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE;YAC1B,IAAI,KAAK,GAAa,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACzC,IAAG,KAAK,IAAI,IAAI,EAAE;gBACd,KAAK,CAAC,KAAK,EAAE,CAAC;aACjB;SACJ;IACL,CAAC;IAEL,mBAAC;AAAD,CAvGA,AAuGC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import ModelBase from \"./ModelBase\";\r\n\r\n/**\r\n * 各数据模块管理器\r\n */\r\nexport default class ModelManager\r\n{\r\n    protected modelMap:{[key:string]:ModelBase} = {};\r\n\r\n    private static _instance:ModelManager;\r\n    public static get Instance() {\r\n        if(ModelManager._instance == null) {\r\n            ModelManager._instance = new ModelManager();\r\n        }\r\n        return ModelManager._instance;\r\n    }\r\n\r\n    protected constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 初始化函数\r\n     */\r\n    public init() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据名字获取对应的数据模块(非泛型方式)\r\n     * @param modelName 数据模块名字\r\n     */\r\n    public getModel(modelName:string):any {\r\n        if(this.modelMap[modelName] == null) {\r\n            Logger.log(\"ModelManager::getModel() 未找到 \" + modelName);\r\n            return null;\r\n        }\r\n        return this.modelMap[modelName];\r\n    }\r\n\r\n    /**\r\n     * 根据名字获取对应的数据模块(泛型方式)\r\n     * @param modelName 数据模块名字\r\n     */\r\n    public getModelEx<T extends ModelBase>(modelName:string):T {\r\n        if(this.modelMap[modelName] == null) {\r\n            Logger.log(\"ModelManager::getModelEx() 未找到 \" + modelName);\r\n            return null;\r\n        }\r\n        return this.modelMap[modelName] as T;\r\n    }\r\n\r\n    /**\r\n     * 注册数据模块\r\n     * @param model 数据模块实例\r\n     */\r\n    public registerModel(model:ModelBase) {\r\n        if(model == null) {\r\n            Logger.error(\"ModelManager::registerModel() model == null, return\");\r\n            return;\r\n        }\r\n        if(model.Name == \"\" || model.Name == \"ModelBase\") {\r\n            Logger.error(\"ModelManager::registerModel() 请在构造函数中给model模块指定名字, return\");\r\n            return;\r\n        }\r\n        if(this.modelMap.hasOwnProperty(model.Name))\r\n        {\r\n            Logger.log(\"ModelManager::registerModel() 重复注册 \" + model.Name);\r\n            return;\r\n        }\r\n        this.modelMap[model.Name] = model;\r\n    }\r\n\r\n    /**\r\n     * 反注册数据模块\r\n     * @param modelName 数据模块名字\r\n     */\r\n    public unRegisterModel(modelName:string) {\r\n        if(this.modelMap.hasOwnProperty(modelName)) {\r\n            let model:ModelBase = this.modelMap[modelName];\r\n            if(model != null) {\r\n                model.clear();\r\n            }\r\n            this.modelMap[modelName] = null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 反注册所有数据模块\r\n     * @param modelName 数据模块名字\r\n     */\r\n    public unRegisterAll() {\r\n        this.clear();\r\n        this.modelMap = {};\r\n    }\r\n\r\n    /**\r\n     * 清理所有数据模块\r\n     */\r\n    public clear() {\r\n        for(let key in this.modelMap) {\r\n            let model:ModelBase = this.modelMap[key];\r\n            if(model != null) {\r\n                model.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n}"]}