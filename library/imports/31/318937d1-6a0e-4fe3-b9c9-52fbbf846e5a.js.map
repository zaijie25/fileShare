{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\pad\\PKCS7.ts"],"names":[],"mappings":";;;;;;;AAAA,8CAA6C;AAG7C;IAAA;IAgDA,CAAC;IA/CG;;;;;;;;;OASG;IACW,SAAG,GAAjB,UAAkB,IAAe,EAAE,SAAiB;QAChD,WAAW;QACX,IAAM,cAAc,GAAG,SAAS,GAAG,CAAC,CAAC;QAErC,sBAAsB;QACtB,IAAM,aAAa,GAAG,cAAc,GAAG,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;QAEtE,sBAAsB;QACtB,IAAM,WAAW,GAAG,CAAC,aAAa,IAAI,EAAE,CAAC,GAAG,CAAC,aAAa,IAAI,EAAE,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,CAAC,GAAG,aAAa,CAAC;QAEzG,iBAAiB;QACjB,IAAM,YAAY,GAAG,EAAE,CAAC;QACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,IAAI,CAAC,EAAE;YACvC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAClC;QACD,IAAM,OAAO,GAAG,IAAI,qBAAS,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;QAE3D,cAAc;QACd,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;IAED;;;;;;;;OAQG;IACW,WAAK,GAAnB,UAAoB,IAAe;QAC/B,6CAA6C;QAC7C,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC;QAEnE,iBAAiB;QACjB,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC;IACnC,CAAC;IACL,YAAC;AAAD,CAhDA,AAgDC,IAAA;AAhDY,sBAAK;AAkDlB,8EAA8E;AAC9E,IAAM,CAAC,GAAY,KAAK,CAAC","file":"","sourceRoot":"/","sourcesContent":["import { WordArray } from '../lib/WordArray';\r\nimport { Padding } from './Padding';\r\n\r\nexport class PKCS7 {\r\n    /**\r\n     * Pads data using the algorithm defined in PKCS #5/7.\r\n     *\r\n     * @param data The data to pad.\r\n     * @param blockSize The multiple that the data should be padded to.\r\n     *\r\n     * @example\r\n     *\r\n     *     PKCS7.pad(wordArray, 4);\r\n     */\r\n    public static pad(data: WordArray, blockSize: number): void {\r\n        // Shortcut\r\n        const blockSizeBytes = blockSize * 4;\r\n\r\n        // Count padding bytes\r\n        const nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\r\n\r\n        // Create padding word\r\n        const paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\r\n\r\n        // Create padding\r\n        const paddingWords = [];\r\n        for (let i = 0; i < nPaddingBytes; i += 4) {\r\n            paddingWords.push(paddingWord);\r\n        }\r\n        const padding = new WordArray(paddingWords, nPaddingBytes);\r\n\r\n        // Add padding\r\n        data.concat(padding);\r\n    }\r\n\r\n    /**\r\n     * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n     *\r\n     * @param data The data to unpad.\r\n     *\r\n     * @example\r\n     *\r\n     *     PKCS7.unpad(wordArray);\r\n     */\r\n    public static unpad(data: WordArray): void {\r\n        // Get number of padding bytes from last byte\r\n        const nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\r\n\r\n        // Remove padding\r\n        data.sigBytes -= nPaddingBytes;\r\n    }\r\n}\r\n\r\n// type guard for the formatter (to ensure it has the required static methods)\r\nconst _: Padding = PKCS7;"]}