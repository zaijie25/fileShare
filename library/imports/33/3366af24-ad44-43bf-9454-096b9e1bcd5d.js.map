{"version":3,"sources":["assets\\ddz\\ddz\\scripts\\data\\DdzPokerHelper.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nenum PokerColor{\r\n    Diamond = 1,\r\n\tClub = 2,\r\n\tHeart = 3,\r\n\tSpade = 4,\r\n}\r\n\r\nexport default class DdzPokerHelper{\r\n    public static RedGhost = 95;\r\n    public static BlackGhost = 79;\r\n\r\n    public static pokerColorSprite = {\r\n        [PokerColor.Diamond]: \"puke_9\",\r\n        [PokerColor.Club]: \"puke_8\",\r\n        [PokerColor.Heart]: \"puke_6\",\r\n        [PokerColor.Spade]: \"puke_7\",\r\n    };\r\n    \r\n    public static pokerSmallColorSprite = {\r\n        [PokerColor.Diamond]: \"puke_5\",\r\n        [PokerColor.Club]: \"puke_4\",\r\n        [PokerColor.Heart]: \"puke_2\",\r\n        [PokerColor.Spade]: \"puke_3\",\r\n    };\r\n    \r\n    public static pokerNumProSpriteStr = {\r\n        [PokerColor.Diamond]: \"r_\",\r\n        [PokerColor.Club]: \"b_\",\r\n        [PokerColor.Heart]: \"r_\",\r\n        [PokerColor.Spade]: \"b_\",\r\n    };\r\n    \r\n    public static ghostColorSprite = {\r\n        [DdzPokerHelper.RedGhost]: \"puke_37\",\r\n        [DdzPokerHelper.BlackGhost]: \"puke_36\",\r\n    }\r\n    \r\n    public static ghostNumSprite = {\r\n        [DdzPokerHelper.RedGhost]: \"puke_39\",\r\n        [DdzPokerHelper.BlackGhost]: \"puke_38\",\r\n    }\r\n\r\n    public static smallPokerBgCfg = [\r\n        'puke_57',\r\n        'puke_56',\r\n    ];\r\n\r\n    public static bigPokerBgCfg = [\r\n        'puke_1',\r\n        'puke_55',\r\n    ];\r\n    /**\r\n     * 获取牌面style，[是否鬼牌, 大花色sf, 牌值sf, 小花色sf]\r\n     * @param value 服务器牌值\r\n     */\r\n    public getPokerStyle(value){\r\n        if (!this.checkPokerValid(value)){\r\n            Logger.error('服务器牌值错误', String(value))\r\n            return;\r\n        }\r\n        if (this.checkIsGhost(value)){\r\n            return this.getGhostStyle(value);\r\n        }\r\n        else{\r\n            return this.getNormalStyle(value);\r\n        }\r\n    }\r\n\r\n    private getGhostStyle(value){\r\n        let isGhost = true;\r\n        let color = DdzPokerHelper.ghostColorSprite[value];\r\n        let num = DdzPokerHelper.ghostNumSprite[value];\r\n        let sColor = '';\r\n        return [isGhost, color, num, sColor];\r\n    }\r\n\r\n    private getNormalStyle(value){\r\n        let isGhost = false;\r\n        let [nNum, nColor] = this.getPokerValue(value);\r\n        let color = DdzPokerHelper.pokerColorSprite[nColor];\r\n        let num = DdzPokerHelper.pokerNumProSpriteStr[nColor] + String(nNum);\r\n        let sColor = DdzPokerHelper.pokerSmallColorSprite[nColor];\r\n        return [isGhost, color, num, sColor];\r\n    }\r\n\r\n    public checkPokerValid(value){\r\n        if (this.checkIsGhost(value))\r\n            return !0;\r\n        let [num, color] = this.getPokerValue(value);\r\n        if (num >= 2 && num <= 14 && color >= PokerColor.Diamond && color <= PokerColor.Spade){\r\n            return !0;\r\n        }\r\n        return !1;\r\n    }\r\n\r\n    public checkIsGhost(value){\r\n        return value == DdzPokerHelper.RedGhost || value == DdzPokerHelper.BlackGhost;\r\n    }\r\n\r\n    public getPokerValue(value){\r\n        let num = value % 16;\r\n        let color = Math.floor(value / 16) + 1;\r\n        return [num, color];\r\n    }\r\n\r\n    /**\r\n     * 按照大小-花色排列\r\n     * @param arr \r\n     */\r\n    public sortPokerArr(arr: number[]){\r\n        let tmp = [...arr];\r\n        tmp.sort((a, b)=>{\r\n            let [aw, ac] = this.getPokerWeight(a);\r\n            let [bw, bc] = this.getPokerWeight(b);\r\n            if (aw == bw)\r\n                return bc - ac;\r\n            else\r\n                return bw - aw;\r\n        })\r\n        return tmp;\r\n    }\r\n\r\n    /**\r\n     * 按照数量-大小-花色排列\r\n     * @param arr \r\n     */\r\n    public sortPokerArrByCount(arr: number[]){\r\n        let tmp = [...arr];\r\n        let [numMap] = this.computeValueTimes(arr);\r\n        tmp.sort((a, b)=>{\r\n            let [av] = this.getPokerValue(a);\r\n            let [bv] = this.getPokerValue(b);\r\n            if (numMap[av] == numMap[bv]){\r\n                let [aw, ac] = this.getPokerWeight(a);\r\n                let [bw, bc] = this.getPokerWeight(b);\r\n                if (aw == bw)\r\n                    return bc - ac;\r\n                else\r\n                    return bw - aw;\r\n            }\r\n            else{\r\n                return numMap[bv] - numMap[av];\r\n            }\r\n        })\r\n        return tmp;\r\n    }\r\n\r\n    public getPokerWeight(value: number){\r\n        if (value == DdzPokerHelper.RedGhost)\r\n            return [21, 0];\r\n        if (value == DdzPokerHelper.BlackGhost)\r\n            return [20, 0];\r\n        let [num, color] = this.getPokerValue(value);\r\n        let weight = num;\r\n        if (num == 2)\r\n            weight = 15;\r\n        return [weight, color];\r\n    }\r\n\r\n    /**\r\n     * 计算牌数据中牌面出现次数，返回[numMap, maxShowCount, maxNumArr]\r\n     * numMap 标记次数\r\n     * maxShowCount 最多次数\r\n     * maxNumArr 最多次数的牌面数组\r\n     * @param arr \r\n     */\r\n    public computeValueTimes(arr = []):[any, number, number[]]{\r\n        let numMap = {};\r\n        arr.forEach(value => {\r\n            let [num] = this.getPokerValue(value);\r\n            if (numMap[num])\r\n                numMap[num] ++;\r\n            else\r\n                numMap[num] = 1;\r\n        });\r\n\r\n        let maxShowCount = 0;\r\n        for(let key in numMap){\r\n            if (numMap[key] > maxShowCount){\r\n                maxShowCount = numMap[key];\r\n            }\r\n        }\r\n        let maxNumArr = [];\r\n        for(let key in numMap){\r\n            if (numMap[key] == maxShowCount){\r\n                maxNumArr.push(key);\r\n            }\r\n        }\r\n\r\n        return [numMap, maxShowCount, maxNumArr];\r\n    }\r\n}"]}