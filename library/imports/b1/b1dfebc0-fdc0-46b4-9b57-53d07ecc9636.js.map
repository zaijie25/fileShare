{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\lib\\BlockCipher.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Cipher } from './Cipher';\r\nimport { WordArray } from './WordArray';\r\nimport { BufferedBlockAlgorithmConfig } from './BufferedBlockAlgorithmConfig';\r\nimport { BlockCipherModeAlgorithm } from '../mode/BlockCipherModeAlgorithm';\r\nimport { CBC } from '../mode/CBC';\r\nimport { PKCS7 } from '../pad/PKCS7';\r\n\r\nexport abstract class BlockCipher extends Cipher {\r\n    public _mode!: BlockCipherModeAlgorithm;\r\n\r\n    constructor(xformMode: number, key: WordArray, cfg?: BufferedBlockAlgorithmConfig) {\r\n        super(xformMode, key, Object.assign({\r\n            // default: 128 / 32\r\n            blockSize: 4,\r\n            mode: CBC,\r\n            padding: PKCS7\r\n        }, cfg));\r\n    }\r\n\r\n    public reset() {\r\n        // Reset cipher\r\n        super.reset();\r\n\r\n        // Check if we have a blockSize\r\n        if(this.cfg.mode === undefined) {\r\n            throw new Error('missing mode in config');\r\n        }\r\n\r\n        // Reset block mode\r\n        let modeCreator;\r\n        if (this._xformMode === (<typeof BlockCipher> this.constructor)._ENC_XFORM_MODE) {\r\n            modeCreator = this.cfg.mode.createEncryptor;\r\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n            modeCreator = this.cfg.mode.createDecryptor;\r\n            // Keep at least one block in the buffer for unpadding\r\n            this._minBufferSize = 1;\r\n        }\r\n\r\n        if (this._mode && this._mode.__creator === modeCreator) {\r\n            this._mode.init(this, this.cfg.iv && this.cfg.iv.words);\r\n        } else {\r\n            this._mode = modeCreator.call(this.cfg.mode, this, this.cfg.iv && this.cfg.iv.words);\r\n            this._mode.__creator = modeCreator;\r\n        }\r\n    }\r\n\r\n    _doProcessBlock(words: Array<number>, offset: number) {\r\n        this._mode.processBlock(words, offset);\r\n    }\r\n\r\n    _doFinalize() {\r\n        // Check if we have a padding strategy\r\n        if(this.cfg.padding === undefined) {\r\n            throw new Error('missing padding in config');\r\n        }\r\n\r\n        // Finalize\r\n        let finalProcessedBlocks;\r\n        if(this._xformMode === (<typeof BlockCipher> this.constructor)._ENC_XFORM_MODE) {\r\n            // Check if we have a blockSize\r\n            if(this.cfg.blockSize === undefined) {\r\n                throw new Error('missing blockSize in config');\r\n            }\r\n\r\n            // Pad data\r\n            this.cfg.padding.pad(this._data, this.cfg.blockSize);\r\n\r\n            // Process final blocks\r\n            finalProcessedBlocks = this._process(!!'flush');\r\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n            // Process final blocks\r\n            finalProcessedBlocks = this._process(!!'flush');\r\n\r\n            // Unpad data\r\n            this.cfg.padding.unpad(finalProcessedBlocks);\r\n        }\r\n\r\n        return finalProcessedBlocks;\r\n    }\r\n\r\n    public abstract encryptBlock(M: Array<number>, offset: number): void;\r\n\r\n    public abstract decryptBlock(M: Array<number>, offset: number): void;\r\n}"]}