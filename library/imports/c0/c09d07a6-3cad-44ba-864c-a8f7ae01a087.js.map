{"version":3,"sources":["assets\\hall\\scripts\\logic\\hall\\ui\\Feedback\\FeedbackLeftItem.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FeedbackLeftItem extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    BackgroundTxt: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    CheckTxt: cc.Label = null;\r\n\r\n    @property(cc.Sprite)\r\n    Unread: cc.Sprite = null;\r\n    @property(cc.Sprite)\r\n    CheckSprite: cc.Sprite = null;\r\n    @property(cc.Sprite)\r\n    UnCheckSprite: cc.Sprite = null;\r\n    @property(cc.Toggle)\r\n    toggle: cc.Toggle = null;\r\n    @property(cc.Sprite)\r\n    typeSprite: cc.Sprite = null;\r\n    nameData: any;\r\n    private _entityData: any;\r\n\r\n    close(){\r\n        this.node.active = false\r\n    }\r\n    // update (dt) {}\r\n    public getGameData() {\r\n        return this.nameData;\r\n    }\r\n    public onInit(data: any) {\r\n        this.nameData = data;\r\n        this.initView()\r\n    }\r\n    initView() {\r\n        this.BackgroundTxt.string = Global.Toolkit.removeEmoji(this.nameData)\r\n        this.CheckTxt.string = Global.Toolkit.removeEmoji(this.nameData)\r\n        this.toggle.isChecked =false\r\n        this.toggle.uncheck()\r\n    }\r\n    public SetBackgroundChecked(state:boolean){\r\n        this.CheckSprite.node.active = state\r\n        this.UnCheckSprite.node.active = !state\r\n    }\r\n    public SetTypeSprite(path,name=\"\"){\r\n        if(this.typeSprite && cc.isValid(this.typeSprite) && this.typeSprite.node != null)\r\n        {\r\n            if(name !=\"\"){\r\n                this.typeSprite.node.active = true;\r\n                Global.ResourceManager.loadAutoAtlas(this.typeSprite,path, name,null,false);\r\n            }else{\r\n                this.typeSprite.node.active = false;\r\n            }\r\n        }\r\n    }\r\n    public SetToggleChecked(){\r\n        this.toggle.isChecked =true;\r\n        this.toggle.check();\r\n    }\r\n    public SetUnReadActiveState(state:boolean){\r\n        this.Unread.node.active = state\r\n    }\r\n\r\n    public set entityData(data){\r\n        this._entityData = data;\r\n        if(this._entityData.red_status != undefined)\r\n            this.SetUnReadActiveState(this._entityData.red_status === 0);\r\n    }\r\n\r\n    public get entityData(){\r\n        return this._entityData;\r\n    }\r\n}\r\n"]}