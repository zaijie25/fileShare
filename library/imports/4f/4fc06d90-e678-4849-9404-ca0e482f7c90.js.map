{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\tool\\ChannelUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 渠道相关的工具类\r\n * @author Peter\r\n * \r\n*/\r\n\r\nimport { ReportTool } from \"./ReportTool\";\r\nimport Setting from \"../setting/Setting\";\r\nimport HallStorageKey from \"../../hallcommon/const/HallStorageKey\";\r\n\r\n\r\n\r\nexport class ChannelUtil {\r\n   \r\n    public getUuid()\r\n    {\r\n        if (cc.sys.os == cc.sys.OS_IOS) {\r\n            Global.NativeEvent.getInfoPlistParam(\"udid\", (info) => {\r\n                Global.Setting.SystemInfo.udid = info.funcParam;\r\n            })\r\n        }\r\n    }\r\n\r\n    public getEntryType()\r\n    {\r\n        if (cc.sys.os == cc.sys.OS_IOS) {\r\n            Global.NativeEvent.getInfoPlistParam(\"entry\", (info) => {\r\n                Global.Setting.SystemInfo.entry = info.funcParam;\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 签名类型\r\n     */\r\n    public getSignType()\r\n    {\r\n        if (cc.sys.os == cc.sys.OS_IOS) {\r\n            Global.NativeEvent.getInfoPlistParam(\"sign_type\", (info) => {\r\n                Global.Setting.SystemInfo.sign_type = info.funcParam;\r\n            })\r\n        }\r\n    }\r\n //--------------------open install 相关---------------------------------\r\n public initOpeninstall() {\r\n    if (this.isCliptextVaild()) {\r\n        Global.Setting.ChannelInfo.clipboardContent = Global.Setting.SystemInfo.clipboardText;\r\n    } \r\n    Global.NativeEvent.getOpenInstallData(this.initOpenInstallData.bind(this))\r\n    if (cc.sys.os == cc.sys.OS_IOS) {\r\n        Global.NativeEvent.getInfoPlistParam(\"ChannelInfo\", (info) => {\r\n           // console.log(\"这是当前openinstall的信息111111111111\",JSON.stringify(info));\r\n            Global.Setting.SystemInfo.ChannelInfo = info.funcParam;\r\n            this.decodeChannelInfo();\r\n        })\r\n    }\r\n    // this.getDownloadAppInfo();\r\n}\r\n\r\n\r\n//解析openinstall 和 剪貼板\r\nprivate initOpenInstallData(content: any) {\r\n    // Logger.log(\"initOpenInstallData content type -----\", typeof (content) + \" \\r\\n content=================\" + content);\r\n    console.log(\"这是当前openinstall的信息\",JSON.stringify(content));\r\n    let tempContent = Global.Setting.ChannelInfo.openInstallContent;\r\n    if (tempContent != null && tempContent != \"\") {\r\n        return;\r\n    } else {\r\n        Global.Setting.ChannelInfo.openInstallContent = content;\r\n    }\r\n    // Logger.log(\"initOpenInstallData start setting \");\r\n    //检验openInstall\r\n    //支持content是string 或者是table\r\n    if (content != null && content != \"\") {\r\n        let tab = null;\r\n        if (typeof (content) == \"string\") {\r\n            try {\r\n                tab = JSON.parse(content);\r\n                Logger.log(\"open install string : \", content);\r\n            }\r\n            catch (e) {\r\n                Logger.error(\"load openInstall error\", content);\r\n                this.checkCliptextAndAppInfo();\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            tab = content;\r\n            try {\r\n                let openInstall = JSON.stringify(tab);\r\n                Logger.log(\"open install tab : \", openInstall);\r\n            }\r\n            catch (e) {\r\n                Logger.log(\"open install tab parse error\");\r\n            }\r\n        }\r\n\r\n\r\n        let hasOpeninstallData = false;\r\n        if (tab.cid && !isNaN(Number(tab.cid))) {\r\n            hasOpeninstallData = true;\r\n            Global.Setting.ChannelInfo.openInstallChannel = Number(tab.cid);\r\n        }\r\n\r\n        if (tab.ch && !isNaN(Number(tab.ch))) {\r\n            hasOpeninstallData = true;\r\n            Global.Setting.ChannelInfo.openInstallChannel = Number(tab.ch);\r\n        }\r\n\r\n        // Logger.log(\"initOpenInstallData  tab.ic::\"+tab.ic);\r\n        if (tab.ic && !isNaN(Number(tab.ic))) {\r\n            hasOpeninstallData = true;\r\n            Global.Setting.ChannelInfo.inviteId = Number(tab.ic);\r\n        }\r\n        Logger.log(\"initOpenInstallData  hasOpeninstallData::\"+hasOpeninstallData);\r\n        if (hasOpeninstallData) {\r\n            Global.Setting.ChannelInfo.sourceType = 1;\r\n        }\r\n        else   //当openinstall 返回空表时  检查剪贴板\r\n            this.checkCliptextAndAppInfo();\r\n        \r\n    }\r\n    else {\r\n        this.checkCliptextAndAppInfo();\r\n    }\r\n}\r\n\r\n    PostInstallApp() {\r\n        let flag = Global.Setting.storage.getBool(HallStorageKey.PostOpenInstallFlag);\r\n        if (flag) {\r\n            return\r\n        }\r\n        let param: any = {};\r\n        param.appid = Global.Setting.appId;\r\n        param.edition = Global.HotUpdateManager.nativeVersions[\"hall\"];\r\n        // param.app = Global.Setting.SystemInfo.vendorChannel;\r\n        param.pack = Global.Setting.ChannelInfo.getRegistChannel();\r\n        param.uid = Number(Global.Setting.storage.get(HallStorageKey.Uid)) || 0;\r\n        param.app_source = Global.Setting.SystemInfo.appConstUrl;\r\n        param.device = Global.Toolkit.genDeviceInfo();\r\n        Global.HallServer.sendPostInstallApp(NetAppface.PostInstallApp, param, (msg) => {\r\n            Global.Setting.storage.setBool(HallStorageKey.PostOpenInstallFlag, true);\r\n        }, null, false)\r\n\r\n    }\r\n\r\n    private checkCliptextAndAppInfo() {\r\n        if (!this.decodeCliptext()) {\r\n            // this.getDownloadAppInfo();\r\n        }\r\n    }\r\n\r\n\r\n    public isCliptextVaild() {\r\n        let clipContent: string = Global.Setting.SystemInfo.clipboardText;\r\n        if (!clipContent)\r\n            return false;\r\n        if(clipContent.length > 500)\r\n        {\r\n            return false\r\n        }\r\n        let subStrs = clipContent.split(\"|\");\r\n        if (subStrs.length < 4) {\r\n            return false;\r\n        }\r\n        else if (subStrs.length > 10)\r\n            return false;\r\n        \r\n        let appId = subStrs[2]\r\n        if (appId != Global.customApp.getAppID())\r\n        {\r\n            return false\r\n        }\r\n\r\n        let md5 = subStrs[subStrs.length - 1];\r\n        //判断最后一位是否是md5\r\n        let md5ContentIdnex = clipContent.lastIndexOf(\"|\");\r\n        let md5Content = clipContent.substr(0, md5ContentIdnex);\r\n        if (Global.AESUtil.md5(md5Content) == md5)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public isChannelStrVaild(chanStr) {\r\n        if (chanStr == null || chanStr == \"\" || isNaN(Number(chanStr)))\r\n            return false;\r\n        let value = Number(chanStr)\r\n        if (!Global.Toolkit.isInteger(value))\r\n            return false;\r\n\r\n        if (value < 0 || value > 10000000000)\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n    //校验\r\n    public decodeCliptext() {\r\n        let clipContent: string = Global.Setting.SystemInfo.clipboardText;\r\n        if (clipContent == null || clipContent == \"\")\r\n            return false;\r\n\r\n        if(!this.isCliptextVaild())\r\n            return false;\r\n        let subStr = clipContent.split(\"|\");\r\n        if (subStr.length < 4) {\r\n            Logger.error(\"剪贴板解析失败\", clipContent);\r\n            return false;\r\n        }\r\n        let packNo = subStr[0];\r\n        if (this.isChannelStrVaild(packNo)) {\r\n            Global.Setting.ChannelInfo.clipboardChannel = Number(packNo);\r\n        }\r\n\r\n        let ic = subStr[1];\r\n        if (this.isChannelStrVaild(ic)) {\r\n            Global.Setting.ChannelInfo.inviteId = Number(ic);\r\n        }\r\n\r\n       \r\n        \r\n        Global.Setting.ChannelInfo.clipboardContent = clipContent;\r\n        Global.Setting.ChannelInfo.sourceType = 2;\r\n        return true;\r\n    }\r\n    \r\n    //校验\r\n    private decodeChannelInfo() {\r\n        let clipContent: string = Global.Setting.SystemInfo.ChannelInfo;\r\n        if (clipContent == null || clipContent == \"\")\r\n            return false;\r\n        let subStr = clipContent.split(\"|\");\r\n        if (subStr.length < 4) {\r\n            Logger.error(\"infoPlist\", clipContent);\r\n            return false;\r\n        }\r\n        let packNo = subStr[0];\r\n        if (this.isChannelStrVaild(packNo)) {\r\n            Global.Setting.ChannelInfo.infoChannel = Number(packNo);\r\n        }\r\n\r\n        let ic = subStr[1];\r\n        if (this.isChannelStrVaild(ic)) {\r\n            Global.Setting.ChannelInfo.inviteId = Number(ic);\r\n        }\r\n        Global.Setting.ChannelInfo.clipboardContent = clipContent;\r\n        Global.Setting.ChannelInfo.sourceType = 3;\r\n        return true;\r\n    }\r\n\r\n}"]}