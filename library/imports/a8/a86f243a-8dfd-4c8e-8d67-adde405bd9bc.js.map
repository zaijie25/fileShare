{"version":3,"sources":["assets\\hall\\scripts\\logic\\hall\\ui\\Activity\\ActivityRightPanelView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ViewBase from \"../../../core/ui/ViewBase\";\r\nimport { ActivityType, ActivityConstants } from \"./ActivityConstants\";\r\n\r\nexport default class ActivityRightPanelView extends ViewBase {\r\n\r\n    \r\n    \r\n    noMsgTips: cc.Node;\r\n    spriteNode: cc.Node;\r\n    contentSprite:cc.Sprite\r\n    rightPage: any[] = [];\r\n    selectId: number = -1;\r\n    picturePanel:cc.Node\r\n    orgWide :number = 895\r\n    orgHeight :number = 501\r\n\r\n   \r\n   \r\n    \r\n    protected initView(){\r\n       \r\n       \r\n        this.spriteNode = this.getChild(\"pictureView/scrollview/view/content/SpriteItem\");\r\n        if(this.spriteNode)\r\n            this.spriteNode.active = false\r\n\r\n        this.contentSprite = this.spriteNode.getComponent(cc.Sprite)\r\n        this.picturePanel = this.getChild(\"pictureView\")\r\n        if(this.picturePanel)\r\n        {\r\n            this.picturePanel.active = false\r\n        }\r\n       \r\n        \r\n        this.noMsgTips = this.getChild(\"noMsgTips\");\r\n        if(this.noMsgTips)\r\n        {\r\n            this.noMsgTips.active = false\r\n        }\r\n            \r\n       \r\n        this.rightPage.push(this.picturePanel);\r\n        this.rightPage.push(this.noMsgTips);\r\n\r\n       \r\n    }\r\n\r\n    protected onSubViewShow(){\r\n        this.selectId = -1\r\n    }\r\n\r\n    onSubViewHide()\r\n    {\r\n        this.selectId = -1\r\n    }\r\n\r\n    public changeView(viewType: number,data?:any){\r\n        if(viewType == this.selectId){\r\n            return\r\n        }\r\n        this.rightPage.forEach(element => {\r\n            if(element)\r\n            {\r\n                element.active = false;\r\n                if(element.subViewState)\r\n                {\r\n                    element.subViewState = false\r\n                }\r\n            }\r\n        });\r\n        switch (viewType) {\r\n            case ActivityType.picture:\r\n                this.picturePanel.active = true\r\n                this.spriteNode.active = true;\r\n                if (data) {\r\n                    this.selectId = data.atype;\r\n                    this.RefreshInfoPanel(data);\r\n                }\r\n                break;\r\n            case ActivityType.noMsgTips:\r\n                this.noMsgTips.active = true;\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    public showNotips(isShow: boolean){\r\n        this.noMsgTips.active = isShow;\r\n    }\r\n\r\n\r\n    RefreshInfoPanel(data: any) {\r\n        Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, true)\r\n        this.contentSprite.spriteFrame = null\r\n        let self = this;\r\n        if (data.url != null && !Global.Toolkit.isEmptyObject(data.url)) {\r\n            if (CC_JSB) {\r\n                Global.Toolkit.LoadPicToNative(Global.Toolkit.DealWithUrl(data.url), Global.Toolkit.DealWithUrl(data.url), (texture:cc.Texture2D) => {\r\n                    if(self.selectId != data.atype)\r\n                    {\r\n                        return\r\n                    }\r\n                   \r\n                    if(self.spriteNode && self.spriteNode.isValid)\r\n                    {\r\n                        Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, false)\r\n                        var frame = new cc.SpriteFrame(texture);\r\n                        self.contentSprite.node.width = self.orgWide\r\n                        let reHeight = self.orgWide * texture.height / texture.width\r\n                        if(reHeight <= self.orgHeight)\r\n                        {\r\n                            reHeight = self.orgHeight\r\n                        }\r\n                        self.contentSprite.node.height = reHeight\r\n                        self.contentSprite.sizeMode =  cc.Sprite.SizeMode.CUSTOM\r\n                        self.contentSprite.spriteFrame = frame;\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                // cc.assetManager.loadRemote(Global.Toolkit.DealWithUrl(data.url), { ext: '.png' }, function (err, texture :cc.Texture2D) {\r\n                cc.assetManager.loadRemote(data.url, { ext: '.png' }, function (err, texture :cc.Texture2D) {\r\n                    if(self.selectId != data.atype)\r\n                    {\r\n                        return\r\n                    }\r\n                    if(err!= null)\r\n                    {\r\n                        return\r\n                    }\r\n                    if(self.spriteNode && self.spriteNode.isValid)\r\n                    {\r\n                        Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, false)\r\n                        var frame = new cc.SpriteFrame(texture);\r\n                        self.contentSprite.node.width = self.orgWide\r\n                        let reHeight = self.orgWide * texture.height / texture.width\r\n                        if(reHeight <= self.orgHeight)\r\n                        {\r\n                            reHeight = self.orgHeight\r\n                        }\r\n                        self.contentSprite.node.height = reHeight\r\n                        self.contentSprite.sizeMode =  cc.Sprite.SizeMode.CUSTOM\r\n                        self.contentSprite.spriteFrame = frame;\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        // this.RefreshLeftItem(data);\r\n    }\r\n\r\n}\r\n\r\n\r\n"]}