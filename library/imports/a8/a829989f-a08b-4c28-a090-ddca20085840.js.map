{"version":3,"sources":["assets\\ddz\\ddz\\scripts\\subView\\DdzPokerView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import DdzBaseView from \"./DdzBaseView\";\r\nimport DdzPathHelper, { DdzAudioConst } from \"../data/DdzPathHelper\";\r\nimport DdzPokerHelper from \"../data/DdzPokerHelper\";\r\nimport DdzPokerPool from \"../tool/DdzPokerPool\";\r\n\r\nexport default class DdzPokerView extends DdzBaseView {\r\n    private frontSp: cc.Sprite;\r\n    private backSp: cc.Sprite;\r\n    // private num: cc.Sprite;\r\n    // private shapeSp1: cc.Sprite;\r\n    // private shapeSp2: cc.Sprite;\r\n    // private jokerNumSp: cc.Sprite;\r\n    // private jokerShapeSp: cc.Sprite;\r\n    private dzSignNode: cc.Node;\r\n    private fixedPos: cc.Vec3 = cc.Vec3.ZERO;\r\n    private _isFront: boolean;\r\n    private _value: number;\r\n    private _scale: number = 1;\r\n    private _isSelect = false;\r\n    private isDrag: boolean = false;\r\n    private _index = -1;\r\n\r\n    /**\r\n    * 花色对应的资源前缀\r\n    */\r\n    huaseArrFang = [\"01\", \"05\", \"09\", \"13\", \"17\", \"21\", \"25\", \"29\", \"33\", \"37\", \"41\", \"45\", \"49\"];\r\n    huaseArrHei = [\"02\", \"06\", \"10\", \"14\", \"18\", \"22\", \"26\", \"30\", \"34\", \"38\", \"42\", \"46\", \"50\"];\r\n    huaseArrHong = [\"03\", \"07\", \"11\", \"15\", \"19\", \"23\", \"27\", \"31\", \"35\", \"39\", \"43\", \"47\", \"51\"];\r\n    huaseArrMei = [\"04\", \"08\", \"12\", \"16\", \"20\", \"24\", \"28\", \"32\", \"36\", \"40\", \"44\", \"48\", \"52\"];\r\n    Allhuase = [this.huaseArrFang, this.huaseArrMei, this.huaseArrHong, this.huaseArrHei,]\r\n\r\n    constructor(node: cc.Node) {\r\n        super();\r\n        this.setNode(node);\r\n    }\r\n\r\n    protected initView() {\r\n        this.frontSp = <cc.Sprite>this.getComponent(\"front\", cc.Sprite);\r\n        this.backSp = <cc.Sprite>this.getComponent(\"back\", cc.Sprite);\r\n        // this.num = <cc.Sprite>this.getComponent('front/num', cc.Sprite);\r\n        // this.shapeSp1 = <cc.Sprite>this.getComponent('front/shape1', cc.Sprite);\r\n        // this.shapeSp2 = <cc.Sprite>this.getComponent('front/shape2', cc.Sprite);\r\n        // this.jokerNumSp = <cc.Sprite>this.getComponent('front/jokerNum', cc.Sprite);\r\n        // this.jokerShapeSp = <cc.Sprite>this.getComponent('front/jokerShape', cc.Sprite);\r\n        this.dzSignNode = this.getChild('front/dz');\r\n        this.dzSignNode.active = false;\r\n    }\r\n\r\n    public set nowIndex(value) {\r\n        this._index = value;\r\n    }\r\n\r\n    public get nowIndex() {\r\n        return this._index;\r\n    }\r\n\r\n    public setPokerDealPos() {\r\n        this.fixedPos = this.node.position;\r\n    }\r\n\r\n    public setPokerDealPosX() {\r\n        this.fixedPos.x = this.node.position.x;\r\n    }\r\n\r\n    public setPokerPosition(pos: cc.Vec3) {\r\n        this.node.setPosition(pos);\r\n    }\r\n\r\n    public set isFront(flag: boolean) {\r\n        this._isFront = flag;\r\n        this.frontSp.node.active = flag;\r\n        this.backSp.node.active = !flag;\r\n    }\r\n\r\n    public get isFront() {\r\n        return this._isFront;\r\n    }\r\n\r\n    public set pokerValue(value: number) {\r\n        if (this._value == value)\r\n            return;\r\n        this._value = value;\r\n\r\n        var atlasString = \"texture/atlas/pokers/pokers\";\r\n\r\n        if (value) {\r\n            var num1 = DdzPokerPool.GetPokerNumByValue(this.pokerValue);\r\n            var huase = DdzPokerPool.GetPokerHuaseByValue(this.pokerValue);\r\n            if (num1 == -1) {\r\n                if (huase == 5) {\r\n                    Global.ResourceManager.loadGameBundleAutoAtlas(this.frontSp, atlasString, \"puke_53\", null, true);\r\n                }\r\n                else if (huase == 4) {\r\n                    Global.ResourceManager.loadGameBundleAutoAtlas(this.frontSp, atlasString, \"puke_54\", null, true);\r\n                }\r\n            }\r\n            else\r\n                Global.ResourceManager.loadGameBundleAutoAtlas(this.frontSp, atlasString, \"puke_\" + this.Allhuase[huase][num1], null, true);\r\n            //let [isGhost, color, num, sColor] = this.PokerHelper.getPokerStyle(value);\r\n            // let pokerAtlas = Global.ResourceManager.getGameBundleRes(DdzPathHelper.gameTexturePath + \"atlas/poker\", cc.SpriteAtlas);\r\n            // if (isGhost) {\r\n            //     this.num.node.active = false;\r\n            //     this.shapeSp2.node.active = false;\r\n            //     this.shapeSp1.node.active = false;\r\n            //     this.jokerNumSp.spriteFrame = pokerAtlas.getSpriteFrame(num);;\r\n            //     this.jokerShapeSp.spriteFrame = pokerAtlas.getSpriteFrame(color);;\r\n            //     this.jokerNumSp.node.active = true;\r\n            //     this.jokerShapeSp.node.active = true;\r\n            // }\r\n            // else {\r\n            //     this.num.node.active = true;\r\n            //     this.shapeSp2.node.active = true;\r\n            //     this.shapeSp1.node.active = true;\r\n            //     this.num.spriteFrame = pokerAtlas.getSpriteFrame(num);\r\n            //     this.shapeSp2.spriteFrame = pokerAtlas.getSpriteFrame(color);\r\n            //     this.shapeSp1.spriteFrame = pokerAtlas.getSpriteFrame(sColor);\r\n            //     this.jokerNumSp.node.active = false;\r\n            //     this.jokerShapeSp.node.active = false;\r\n            // }\r\n        }\r\n    }\r\n\r\n    public get pokerValue() {\r\n        return this._value;\r\n    }\r\n\r\n    public set isSelect(flag) {\r\n        this._isSelect = flag;\r\n    }\r\n\r\n    public get isSelect() {\r\n        return this._isSelect;\r\n    }\r\n\r\n    public setPokerScale(value: number) {\r\n        this._scale = value;\r\n    }\r\n\r\n    public updatePokerScale() {\r\n        this.node.scale = this._scale;\r\n    }\r\n\r\n    /**\r\n     * 设置大牌还是小牌\r\n     * @param size 1大牌，0小牌\r\n     */\r\n    public setPokerStyle(size = 1) {\r\n        // let pokerAtlas = Global.ResourceManager.getGameBundleRes(DdzPathHelper.gameTexturePath + \"atlas/pokers\", cc.SpriteAtlas);\r\n        if (size == 1) {\r\n            this.node.scale = this.Define.BigPokerScale;\r\n            let [frontSf, bgSf] = DdzPokerHelper.bigPokerBgCfg;\r\n            //this.frontSp.spriteFrame = pokerAtlas.getSpriteFrame(frontSf);\r\n            //this.backSp.spriteFrame = pokerAtlas.getSpriteFrame(bgSf);\r\n        }\r\n        else {\r\n            this.node.scale = this.Define.SmallPokerScale;\r\n            let [frontSf, bgSf] = DdzPokerHelper.smallPokerBgCfg;\r\n            //this.frontSp.spriteFrame = pokerAtlas.getSpriteFrame(frontSf);\r\n            //this.backSp.spriteFrame = pokerAtlas.getSpriteFrame(bgSf);\r\n        }\r\n    }\r\n\r\n    public showPokerAnim(callback: Function, timeScale = 1, delay = 0, isSound = false) {\r\n        this.isFront = false;\r\n        let tween = Game.Tween.get(this.node);\r\n        let scale = this.node.scale;\r\n\r\n        tween.delay(delay)\r\n            //放大1.3倍\r\n            .to(0.1 * timeScale, { scale: scale * 1.3 }, cc.easeCubicActionIn())\r\n            //横向缩放\r\n            .to(0.2 * timeScale, { scaleX: 0 }, cc.easeCubicActionIn())\r\n            //翻拍\r\n            .call(() => {\r\n                this.isFront = true;\r\n                // isSound && Global.Audio.playGameBundleSound(DdzAudioConst.audioCommonPath + DdzAudioConst.commonAudio.PokerFlop, true);\r\n            })\r\n            //展开\r\n            .to(0.35 * timeScale, { scaleX: scale * 1.3 }, cc.easeCubicActionOut())\r\n            .delay(0.25 * timeScale)\r\n            //还原\r\n            .to(0.1, { scale: scale }, cc.easeCubicActionOut())\r\n            .call(callback)\r\n            .start();\r\n    }\r\n\r\n    public showPokerEasyAnim(callback: Function, timeScale = 1, delay = 0, isSound = false) {\r\n        this.isFront = false;\r\n        let tween = Game.Tween.get(this.node);\r\n        let scale = this.node.scale;\r\n\r\n        tween.delay(delay)\r\n            //横向缩放\r\n            .to(0.3 * timeScale, { scaleX: 0 }, cc.easeCubicActionIn())\r\n            //翻拍\r\n            .call(() => {\r\n                this.isFront = true;\r\n                // isSound && Global.Audio.playGameBundleSound(DdzAudioConst.audioCommonPath + DdzAudioConst.commonAudio.PokerFlop, true);\r\n            })\r\n            //展开\r\n            .to(0.5 * timeScale, { scaleX: scale }, cc.easeCubicActionOut())\r\n            .delay(0.2 * timeScale)\r\n            .call(callback)\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 单牌移动(自身父坐标内)\r\n     * @param from 起始坐标，需先转换到牌所在坐标系\r\n     * @param to 终点坐标\r\n     * @param timeScale 移动时长\r\n     * @param timeWait 移动前延时\r\n     * @param callback 完成回调\r\n     */\r\n    public doPokerMove(from: cc.Vec3, to: cc.Vec3, timeScale = 1, timeWait = 0, callback?: Function, isSound = false, ease: any = cc.easeIn(1)) {\r\n        this.node.setPosition(from);\r\n        let tween = Game.Tween.get(this.node);\r\n        tween.delay(timeWait)\r\n            .call(() => {\r\n                isSound && Global.Audio.playGameBundleSound(DdzAudioConst.audioCommonPath + DdzAudioConst.DispatchPoker, true);\r\n            })\r\n            .to(timeScale, { position: to, scale: this._scale }, ease)\r\n            .call(callback)\r\n            .start();\r\n    }\r\n\r\n    public onSelect(isSound = false) {\r\n        this.isSelect = !this.isSelect;\r\n        if (this.isSelect) {\r\n            // isSound && Global.Audio.playGameBundleSound(DdzAudioConst.audioCommonPath + DdzAudioConst.SelectPoker, true);\r\n            this.node.setPosition(cc.v2(this.fixedPos.x, this.fixedPos.y + this.Define.ChooseOffsetY));\r\n        }\r\n        else {\r\n            this.node.setPosition(this.fixedPos);\r\n        }\r\n    }\r\n\r\n    public resetSelect() {\r\n        this.node.setPosition(this.fixedPos);\r\n        this.isSelect = false;\r\n    }\r\n\r\n    public setDragSign(isGray) {\r\n        if (this.isDrag == isGray)\r\n            return;\r\n        this.isDrag = isGray;\r\n        Global.UIHelper.setNodeGray(this.node, isGray);\r\n    }\r\n\r\n    public setDzOwner(flag: boolean) {\r\n        this.dzSignNode.active = flag;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 获取牌的原始位置\r\n     */\r\n    public getRawPos() {\r\n        return this.fixedPos;\r\n    }\r\n\r\n    /**\r\n     * 获取牌的世界坐标\r\n     */\r\n    public getWorldPosition() {\r\n        let pos = this.node.parent.convertToWorldSpaceAR(this.node.position);\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * 获取牌实际尺寸\r\n     */\r\n    public getPokerSize(): number[] {\r\n        return [this.node.scaleX * this.node.width, this.node.scaleY * this.node.height];\r\n    }\r\n\r\n    /**\r\n     * 检测点击坐标在牌内\r\n     * @param position 世界坐标点\r\n     */\r\n    public checkIsTouch(position: cc.Vec2) {\r\n        let rec = this.node.getBoundingBoxToWorld();\r\n        return rec.contains(position);\r\n    }\r\n\r\n    /**\r\n     * 是否是显示可选择的牌\r\n     */\r\n    public checkPokerValid() {\r\n        return this.node.activeInHierarchy && this.node.active;\r\n    }\r\n\r\n    public reset() {\r\n        this.isSelect = false;\r\n        this.isFront = false;\r\n        this.setDzOwner(false);\r\n        this.setDragSign(false);\r\n    }\r\n}"]}