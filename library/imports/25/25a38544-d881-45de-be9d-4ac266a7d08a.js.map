{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\tool\\JSUtil.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;EAIE;AACF;IAAA;IA0FA,CAAC;IAzFG;;;OAGG;IACW,gBAAS,GAAvB,UAAwB,GAAW;QAC/B,OAAO,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACpC,+CAA+C;YAC/C,oDAAO,GAAG,MAAE,IAAI,CAAC,UAAC,MAAM;gBACpB,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;oBAC1B,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3B;qBAAM;oBACL,uCAAuC;oBACrC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAClB;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACW,eAAQ,GAAtB,UAAwB,IAAI;QACxB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3B,IAAI,WAAW,GAAG,KAAK,IAAI,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACxD,OAAO,WAAW,IAAI,WAAW,CAAC,WAAW,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACW,qBAAc,GAA5B,UAA8B,QAAQ,EAAE,UAAU;QAC9C,IAAI,QAAQ,IAAI,UAAU,EAAE;YACxB,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;gBAChC,OAAO,KAAK,CAAC;aAChB;YACD,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;gBAClC,OAAO,KAAK,CAAC;aAChB;YACD,IAAI,QAAQ,KAAK,UAAU,EAAE;gBACzB,OAAO,IAAI,CAAC;aACf;YACD,SAAS;gBACL,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACrC,IAAI,CAAC,QAAQ,EAAE;oBACX,OAAO,KAAK,CAAC;iBAChB;gBACD,IAAI,QAAQ,KAAK,UAAU,EAAE;oBACzB,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;OAGG;IACI,wBAAO,GAAd,UAAe,GAAQ;QACnB,IAAI,GAAG,EAAE;YACL,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1C;aACI;YACD,OAAO,EAAE,CAAA;SACZ;IACL,CAAC;IAED,SAAS;IACF,4BAAW,GAAlB,UAAmB,MAAM,EAAC,MAAM;QAC5B,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,QAAQ,GAAG,EAAE,CAAA;QACjB,KAAkB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAC;YAAvB,IAAI,KAAK,kBAAA;YACV,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,KAAkB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAC;gBAAtB,IAAI,KAAK,iBAAA;gBACV,IAAI,KAAK,IAAI,KAAK,EAAC;oBACf,IAAI,GAAG,KAAK,CAAC;iBAChB;aACJ;YACD,IAAI,IAAI,EAAC;gBACL,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aACvB;SACJ;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEL,aAAC;AAAD,CA1FA,AA0FC,IAAA;AA1FY,wBAAM","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 对JS类操作的工具类\r\n * @author Peter\r\n * \r\n*/\r\nexport class JSUtil {\r\n    /**\r\n     * 根据字符串创建对象\r\n     * @param {string} cls 类的字符串值\r\n     */\r\n    public static importCls(cls: string): Promise<any> {\r\n        return new Promise<any>((resolve, reject)=>{\r\n            // console.error(\"JSUtils module cls = \" + cls)\r\n            import(cls).then((module)=>{\r\n                if (module && module.default) {\r\n                    resolve(module.default);\r\n                } else {\r\n                  //  console.error(cls, \"中没有default类.\");\r\n                    reject(module);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取父类\r\n     * @param {Object} ctor 子类类名\r\n     * @return {Object}\r\n     */\r\n    public static getSuper (ctor) {\r\n        let proto = ctor.prototype;\r\n        let dunderProto = proto && Object.getPrototypeOf(proto);\r\n        return dunderProto && dunderProto.constructor;\r\n    }\r\n\r\n    /**\r\n     * 判断subclass是否是superclass的子类\r\n     * @param subclass\r\n     * @param superclass\r\n     */\r\n    public static isChildClassOf (subclass, superclass) {\r\n        if (subclass && superclass) {\r\n            if (typeof subclass !== 'function') {\r\n                return false;\r\n            }\r\n            if (typeof superclass !== 'function') {\r\n                return false;\r\n            }\r\n            if (subclass === superclass) {\r\n                return true;\r\n            }\r\n            for (;;) {\r\n                subclass = JSUtil.getSuper(subclass);\r\n                if (!subclass) {\r\n                    return false;\r\n                }\r\n                if (subclass === superclass) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * 深拷贝对象\r\n     * @param obj \r\n     */\r\n    public copyObj(obj: any) {\r\n        if (obj) {\r\n            return JSON.parse(JSON.stringify(obj));\r\n        }\r\n        else {\r\n            return {}\r\n        }\r\n    }\r\n\r\n    // 数组合并去重\r\n    public arrayConcat(array1,array2){\r\n        let tempPaths = array1.concat(array2);\r\n        let retPaths = []\r\n        for (let path1 of tempPaths){\r\n            let flag = true;\r\n            for (let path2 of retPaths){\r\n                if (path1 == path2){\r\n                    flag = false;\r\n                }\r\n            }\r\n            if (flag){\r\n                retPaths.push(path1)\r\n            }\r\n        }\r\n        return retPaths;\r\n    }\r\n\r\n}"]}