{
  "__type__": "cc.TextAsset",
  "_name": "puremvc.d",
  "_objFlags": 0,
  "_native": "",
  "text": "declare module puremvc\r\n{\r\n\texport interface ICommand\r\n\t\textends INotifier\r\n\t{\r\n\t\texecute( notification:INotification ):void;\r\n\t}\r\n\r\n\texport interface IController\r\n\t{\r\n\t\texecuteCommand( notification:INotification ):void;\r\n\t\tregisterCommand( notificationName:string, commandClassRef:Function ):void;\r\n\t\thasCommand( notificationName:string ):boolean;\r\n\t\tremoveCommand( notificationName:string ):void;\r\n\t}\r\n\r\n\texport interface IFacade\r\n\t\textends INotifier\r\n\t{\r\n\t\tregisterCommand( notificationName:string, commandClassRef:Function ):void;\r\n\t\tremoveCommand( notificationName:string ): void;\r\n\t\thasCommand( notificationName:string ):boolean;\r\n\t\tregisterProxy( proxy:IProxy ):void;\r\n\t\tretrieveProxy( proxyName:string ):IProxy;\r\n\t\tremoveProxy( proxyName:string ):IProxy;\r\n\t\thasProxy( proxyName:string ):boolean;\r\n\t\tregisterMediator( mediator:IMediator ):void;\r\n\t\tretrieveMediator( mediatorName:string ):IMediator;\r\n\t\tremoveMediator( mediatorName:string ):IMediator;\r\n\t\thasMediator( mediatorName:string ):boolean;\r\n\t\tnotifyObservers( notification:INotification ):void;\r\n\t}\r\n\r\n\texport interface IMediator\r\n\t\textends INotifier\r\n\t{\r\n\t\tgetMediatorName():string;\r\n\t\tgetViewComponent():any;\r\n\t\tsetViewComponent( viewComponent:any ):void;\r\n\t\tlistNotificationInterests( ):string[];\r\n\t\thandleNotification( notification:INotification ):void;\r\n\t\tonRegister():void;\r\n\t\tonRemove():void;\r\n\t}\r\n\r\n\texport interface IModel\r\n\t{\r\n\t\tregisterProxy( proxy:IProxy ):void;\r\n\t\tremoveProxy( proxyName:string ):IProxy;\r\n\t\tretrieveProxy( proxyName:string ):IProxy;\r\n\t\thasProxy( proxyName:string ):boolean;\r\n\t}\r\n\r\n\texport interface INotification\r\n\t{\r\n\t\tgetName():string;\r\n\t\tsetBody( body:any ):void;\r\n\t\tgetBody():any;\r\n\t\tsetType( type:string ):void;\r\n\t\tgetType():string;\r\n\t\ttoString():string;\r\n\t}\r\n\r\n\texport interface INotifier\r\n\t{\r\n\t\tsendNotification( name:string, body?:any, type?:string ):void;\r\n\t}\r\n\r\n\texport interface IObserver\r\n\t{\r\n\t\tsetNotifyMethod( notifyMethod:Function ):void;\r\n\t\tsetNotifyContext( notifyContext:any ):void;\r\n\t\tnotifyObserver( notification:INotification ):void;\r\n\t\tcompareNotifyContext( object:any ):boolean;\r\n\t}\r\n\r\n\texport interface IProxy\r\n\t\textends INotifier\r\n\t{\r\n\t\tgetProxyName():string;\r\n\t\tsetData( data:any ):void;\r\n\t\tgetData():any;\r\n\t\tonRegister( ):void;\r\n\t\tonRemove( ):void;\r\n\t}\r\n\r\n\texport interface IView\r\n\t{\r\n\t\tregisterObserver( notificationName:string, observer:IObserver ):void;\r\n\t\tremoveObserver( notificationName:string, notifyContext:any ):void;\r\n\t\tnotifyObservers( notification:INotification ):void;\r\n\t\tregisterMediator( mediator:IMediator ):void;\r\n\t\tretrieveMediator( mediatorName:string ):IMediator;\r\n\t\tremoveMediator( mediatorName:string ):IMediator;\r\n\t\thasMediator( mediatorName:string ):boolean;\r\n\t}\r\n\r\n    export class Observer\r\n\t\timplements IObserver\r\n\t{\r\n        public notify: Function;\r\n        public context: any;\r\n        constructor (notifyMethod: Function, notifyContext: any);\r\n        private getNotifyMethod(): Function;\r\n        public setNotifyMethod(notifyMethod: Function): void;\r\n        private getNotifyContext(): any;\r\n        public setNotifyContext(notifyContext: any): void;\r\n        public notifyObserver(notification: INotification): void;\r\n        public compareNotifyContext(object: any): boolean;\r\n    }\r\n\t\r\n\texport class View\r\n\t\timplements IView\r\n\t{\r\n        public mediatorMap: Object;\r\n        public observerMap: Object;\r\n        public multitonKey:string;\r\n        constructor (key);\r\n        public initializeNotifier(key):void;\r\n        public initializeView(): void;\r\n        public registerObserver(notificationName: string, observer: IObserver): void;\r\n        public removeObserver(notificationName: string, notifyContext: any): void;\r\n        public notifyObservers(notification: INotification): void;\r\n        public registerMediator(mediator: IMediator): void;\r\n        public retrieveMediator(mediatorName: string): IMediator;\r\n        public removeMediator(mediatorName: string): IMediator;\r\n        public hasMediator(mediatorName: string): boolean;\r\n        static SINGLETON_MSG: string;\r\n        // static instance: IView;\r\n        static instanceMap:Object;\r\n        static removeView(key):void;\r\n        static getInstance(key): IView;\r\n    }\r\n\r\n\r\n    export class Controller\r\n\t\timplements IController\r\n\t{\r\n        public view: IView;\r\n        public commandMap: Object;\r\n        public multitonKey:string;\r\n        constructor (key);\r\n        public initializeNotifier(key):void;\r\n        public initializeController(): void;\r\n        public executeCommand(notification: INotification): void;\r\n        public registerCommand(notificationName: string, commandClassRef: Function): void;\r\n        public hasCommand(notificationName: string): boolean;\r\n        public removeCommand(notificationName: string): void;\r\n        // static instance: IController;\r\n        static SINGLETON_MSG: string;\r\n        static instanceMap:Object;\r\n        static removeController(key):void;\r\n        static getInstance(key): IController;\r\n    }\r\n\r\n    export class Model\r\n\t\timplements IModel\r\n\t{\r\n        public proxyMap: Object;\r\n        public multitonKey:string;\r\n        constructor (key);\r\n        public initializeNotifier(key):void;\r\n        public initializeModel(): void;\r\n        public registerProxy(proxy: IProxy): void;\r\n        public removeProxy(proxyName: string): IProxy;\r\n        public retrieveProxy(proxyName: string): IProxy;\r\n        public hasProxy(proxyName: string): boolean;\r\n        static SINGLETON_MSG: string;\r\n        // static instance: IModel;\r\n        static instanceMap:Object;\r\n        static removeModel(key):void;\r\n        static getInstance(key): IModel;\r\n    }\r\n\r\n    export class Notification\r\n\t\timplements INotification\r\n\t{\r\n        public name: string;\r\n        public body: any;\r\n        public type: string;\r\n        constructor (name: string, body?: any, type?: string);\r\n        public getName(): string;\r\n        public setBody(body: any): void;\r\n        public getBody(): any;\r\n        public setType(type: string): void;\r\n        public getType(): string;\r\n        public toString(): string;\r\n    }\r\n\r\n    export class Facade\r\n\t\timplements IFacade\r\n\t{\r\n        public model: IModel;\r\n        public view: IView;\r\n        public controller: IController;\r\n        public multitonKey:string;\r\n        constructor (key);\r\n        public initializeNotifier(key):void;\r\n        public initializeFacade(): void;\r\n        public initializeModel(): void;\r\n        public initializeController(): void;\r\n        public initializeView(): void;\r\n        public registerCommand(notificationName: string, commandClassRef: Function): void;\r\n        public removeCommand(notificationName: string): void;\r\n        public hasCommand(notificationName: string): boolean;\r\n        public registerProxy(proxy: IProxy): void;\r\n        public retrieveProxy(proxyName: string): IProxy;\r\n        public removeProxy(proxyName: string): IProxy;\r\n        public hasProxy(proxyName: string): boolean;\r\n        public registerMediator(mediator: IMediator): void;\r\n        public retrieveMediator(mediatorName: string): IMediator;\r\n        public removeMediator(mediatorName: string): IMediator;\r\n        public hasMediator(mediatorName: string): boolean;\r\n        public notifyObservers(notification: INotification): void;\r\n        public sendNotification(name: string, body?: any, type?: string): void;\r\n        static SINGLETON_MSG: string;\r\n        // static instance: IFacade;\r\n        static instanceMap:Object;\r\n        static removeCore(key);\r\n        static getInstance(key): IFacade;\r\n    }\r\n\r\n    export class Notifier\r\n\t\timplements INotifier\r\n\t{\r\n        public facade: IFacade;\r\n        public multitonKey:string;\r\n        constructor ();\r\n        public initializeNotifier(key:string):void;\r\n        public sendNotification(name: string, body?: any, type?: string): void;\r\n    }\r\n\r\n    export class MacroCommand\r\n\t\textends Notifier\r\n\t\timplements ICommand, INotifier\r\n\t{\r\n        public subCommands: Function[];\r\n        constructor ();\r\n        public initializeMacroCommand(): void;\r\n        public addSubCommand(commandClassRef: Function): void;\r\n        public execute(notification: INotification): void;\r\n    }\r\n\r\n    export class SimpleCommand\r\n\t\textends Notifier\r\n\t\timplements ICommand, INotifier\r\n\t{\r\n        public execute(notification: INotification): void;\r\n    }\r\n\r\n    export class Mediator\r\n\t\textends Notifier\r\n\t\timplements IMediator, INotifier\r\n\t{\r\n        public mediatorName: string;\r\n        public viewComponent: any;\r\n        constructor (mediatorName?: string, viewComponent?: any);\r\n        public getMediatorName(): string;\r\n        public getViewComponent(): any;\r\n        public setViewComponent(viewComponent: any): void;\r\n        public listNotificationInterests(): string[];\r\n        public handleNotification(notification: INotification): void;\r\n        public onRegister(): void;\r\n        public onRemove(): void;\r\n        static NAME: string;\r\n    }\r\n\r\n    export class Proxy\r\n\t\textends Notifier\r\n\t\timplements IProxy, INotifier\r\n\t{\r\n        public proxyName: string;\r\n        public data: any;\r\n        constructor (proxyName?: string, data?: any);\r\n        public getProxyName(): string;\r\n        public setData(data: any): void;\r\n        public getData(): any;\r\n        public onRegister(): void;\r\n        public onRemove(): void;\r\n        static NAME: string;\r\n    }\r\n}\r\n"
}