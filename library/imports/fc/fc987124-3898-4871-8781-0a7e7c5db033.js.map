{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\http\\HttpRequest.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import EventDispatcher from \"../../event/EventDispatcher\";\r\nimport { Logger } from \"../../debug/Logger\";\r\nimport { ServerUrl } from \"../../../logic/core/setting/ServerRoutes\";\r\n\r\nexport default class HttpRequest extends EventDispatcher {\r\n    public static EVENT_COMPLETE = \"complete\";\r\n    public static EVENT_ERROR = \"error\";\r\n\r\n    private _http: XMLHttpRequest = new XMLHttpRequest;\r\n    private _data: any;\r\n    private _url: string;\r\n    private _responseType: string;\r\n    private _startTime = 0;\r\n    private _endTime = 0;\r\n\r\n    _timeOut:any\r\n    isError = false;\r\n\r\n    public get data() {\r\n        return this._data;\r\n    }\r\n\r\n    public get url() {\r\n        return this._url;\r\n    }\r\n\r\n    public send(serverUrl: ServerUrl, data: any = null, method: string = \"get\", responseType = \"text\", headers: [] = null) {\r\n        this._responseType = responseType;\r\n        this._data = null;\r\n        // Logger.error(\"Global.Http.cookie  = \" + Global.Http.cookie)\r\n        let url = \"\"\r\n        let requestInfo = Global.DNS.getHttpRequestDNSInfo(serverUrl,0);\r\n        if(requestInfo != null && requestInfo.headerMap != null)\r\n        {\r\n            url = requestInfo.realUrl;\r\n            let headerMap = requestInfo.headerMap;\r\n            if(headerMap != null)\r\n            {\r\n                if (Global.Http.cookie){\r\n                    headerMap[\"Cookie\"] = Global.Http.cookie\r\n                }\r\n                let headerStr = JSON.stringify(headerMap);\r\n                Logger.error(\"header 1 is !!!!\", headerStr);\r\n                Global.NativeEvent.setRequestProperty(headerStr);\r\n                for (let key in headerMap){\r\n                    let value = headerMap[key]\r\n                    this._http.setRequestHeader(key,value)\r\n                }\r\n                \r\n            }\r\n        }else {\r\n            if (Global.Http.cookie){\r\n                let headerMap = {\"Cookie\":Global.Http.cookie}\r\n                let headerStr = JSON.stringify(headerMap);\r\n                Logger.error(\"header 2 is !!!!\", headerStr);\r\n                Global.NativeEvent.setRequestProperty(headerStr);\r\n\r\n                for (let key in headerMap){\r\n                    let value = headerMap[key]\r\n                    this._http.setRequestHeader(key,value)\r\n                }\r\n            }\r\n        }\r\n        let headSign = null\r\n        let sign_url = null\r\n        if (serverUrl.isInnerRequest){\r\n            let httpSignInfo = Global.UrlUtil.dealHttpSign(serverUrl)\r\n            headSign = httpSignInfo.headSign\r\n            sign_url = httpSignInfo.sign_url\r\n        }else {\r\n            sign_url = serverUrl.getUrl()\r\n        }\r\n        \r\n        if (!sign_url){\r\n            Logger.error(\"http send sign_url error \" + sign_url)\r\n            return;\r\n        }\r\n        \r\n        // Logger.error(\"send url\", sign_url);\r\n        url = sign_url\r\n        this._url = sign_url;\r\n        let http = this._http;\r\n        \r\n        \r\n        //更新链接和header信息\r\n        \r\n        http.open(method, url, true);\r\n        \r\n        if (headers && headers.length > 0) {\r\n            for (let i = 0; i < headers.length; i++) {\r\n                http.setRequestHeader(headers[i++], headers[i]);\r\n            }\r\n        }\r\n        else {\r\n            http.setRequestHeader(\"Content-Type\", \"text/plain\");\r\n        }\r\n\r\n         if (cc.sys.isNative && headSign){\r\n            http.setRequestHeader(\"Summor\", headSign);\r\n         }\r\n\r\n        //  if(url.indexOf(\"mini\")>=0){\r\n        //     http.setRequestHeader(\"Summor\", httpSign);\r\n        //  }\r\n         \r\n\r\n        http.responseType = responseType !== \"arraybuffer\" ? \"text\" : \"arraybuffer\";\r\n        http.onreadystatechange = this.onReadyStateChange.bind(this)\r\n\r\n        \r\n        http.send(data);\r\n        \r\n\r\n        http.onerror = (e) => {\r\n            this.onError(\"onerror \" + \"[\" + this._http.status + \"]\" + this._http.statusText + \":\" + this._http.responseURL)\r\n        }\r\n        this._startTime = new Date().valueOf()\r\n        http.ontimeout = (e)=>{ this.httpEvent(\"ontimeout\", e)}\r\n\r\n    }\r\n\r\n    public setTimeout(timeout) {\r\n        this.clearTimer();\r\n        if (this._http) {\r\n            this._http.timeout = timeout;\r\n            this._timeOut = setTimeout(() => {\r\n                this.onError(\"request timeout  \" + 0)\r\n                \r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    private clearTimer(){\r\n        if (this._timeOut) {\r\n            clearTimeout(this._timeOut)\r\n            this._timeOut = null\r\n        }\r\n    }\r\n\r\n    private httpEvent(type, event: ProgressEvent) {\r\n        Logger.error(type, event);\r\n        this.onError(\"request timeout  \" + 0)\r\n    }\r\n\r\n    private onReadyStateChange() {\r\n        if (this._http.readyState == 4) {\r\n            this._endTime = new Date().valueOf();\r\n            this.clearTimer();\r\n            if (this._http.status >= 200 && this._http.status < 300) {\r\n                this.onComplete()\r\n            }else {\r\n                this.onError(\"onReadyStateChange \" + \"[\" + this._http.status + \"]\" + this._http.statusText + \":\" + this._http.responseURL)\r\n            }\r\n        }\r\n    }\r\n\r\n    private onError(content) {\r\n        this.clearTimer();\r\n        this._endTime = new Date().valueOf();\r\n        Logger.error(\"onError():\" + content, this._url);\r\n        if (this.isError){\r\n            return;\r\n        }\r\n        this.isError = true;\r\n        let hTime = this._endTime - this._startTime\r\n        this.event(HttpRequest.EVENT_ERROR, this._http,hTime);\r\n        this.clear();\r\n    }\r\n\r\n    private onComplete() {\r\n        this.clearTimer();\r\n        \r\n        var flag: Boolean = true;\r\n        try {\r\n            if (this._responseType === \"json\") {\r\n                this._data = JSON.parse(this._http.responseText);\r\n                //暂不支持xml\r\n                // } else if (this._responType === \"xml\") {\r\n                // \tthis._data = Utils.parseXMLFromString(this._http.responseText);\r\n            } else {\r\n                this._data = this._http.response || this._http.responseText;\r\n            }\r\n        }\r\n        catch (e) {\r\n            flag = false;\r\n            this.onError(e)\r\n        }\r\n        flag && this.event(HttpRequest.EVENT_COMPLETE, this._data instanceof Array ? [this._data] : this._data);\r\n        this.clear();\r\n    }\r\n\r\n    private clear() {\r\n        this._http.onreadystatechange = null;\r\n        this.offAll(\"\")\r\n    \r\n    }\r\n\r\n}"]}