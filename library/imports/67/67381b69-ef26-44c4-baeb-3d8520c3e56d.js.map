{"version":3,"sources":["assets\\ddz\\ddz\\scripts\\tool\\DdzTypeCheck.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import DdzPokerCheck from \"./DdzPokerCheck\";\r\n\r\nexport default class DdzTypeCheck{\r\n    // 检测单张\r\n    public checkSingle(arr: number[]){\r\n        if (arr.length != 1)\r\n            return 0;\r\n        let [w] = DdzPokerCheck.getPokerWeight(arr[0]);\r\n        return w;\r\n    }\r\n\r\n    // 检测火箭\r\n    public checkRocket(arr: number[]){\r\n        if (DdzPokerCheck.checkIsGhost(arr[0]) && DdzPokerCheck.checkIsGhost(arr[1]))\r\n            return 99;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    // 检测对子\r\n    public checkPair(arr: number[]){\r\n        if (arr.length != 2)\r\n            return 0;\r\n        let [num0] = DdzPokerCheck.getPokerValue(arr[0]);\r\n        let [num1] = DdzPokerCheck.getPokerValue(arr[1]);\r\n        if (num0 == num1){\r\n            let [w] = DdzPokerCheck.getPokerWeight(arr[0]);\r\n            return w;\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // 检测3+0\r\n    public checkThreeZero(arr: number[], maxCount: number, maxNumArr: number[]){\r\n        if(arr.length != 3 || maxCount != 3)\r\n            return 0;\r\n        if(maxNumArr.length == 1){\r\n            let [w] = DdzPokerCheck.getPokerWeight(maxNumArr[0]);\r\n            return w;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    // 检测3+1\r\n    public checkThreeOne(arr: number[], maxCount: number, maxNumArr: number[]){\r\n        if(arr.length != 4 || maxCount != 3)\r\n            return 0;\r\n        if(maxNumArr.length == 1){\r\n            let [w] = DdzPokerCheck.getPokerWeight(maxNumArr[0]);\r\n            return w;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    // 检测3+2\r\n    public checkThreeTwo(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        if(arr.length != 5 || maxCount != 3)\r\n            return 0;\r\n        let pairOrderArr = this.getOrderNumArr(map, 2);\r\n        if(maxNumArr.length == 1 && pairOrderArr.length == 1){\r\n            let [w] = DdzPokerCheck.getPokerWeight(maxNumArr[0]);\r\n            return w;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    // 检测飞机不带\r\n    public checkPlaneZero(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        if(arr.length < 6 || arr.length != 3 * maxNumArr.length)\r\n            return 0;\r\n        if (this.checkContinuity(map, 3)){\r\n            let threeOrderArr = this.getOrderNumArr(map, 3);\r\n            let [w] = DdzPokerCheck.getPokerWeight(threeOrderArr[threeOrderArr.length -1]);\r\n            return w;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    // 检测飞机带单\r\n    public checkPlaneOne(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        let total = arr.length;\r\n        if (total >= 8 && total % 4 == 0){\r\n            let nContinu = arr.length / 4;\r\n            let threeOrderArr = this.getOrderBiggerNumArr(map, 3);\r\n            let lastNum = 0;\r\n            let catchArr = [];\r\n            for(let i=threeOrderArr.length-1; i >=0; i--){\r\n                let value = Number(threeOrderArr[i]);\r\n                lastNum = value;\r\n                catchArr.push(lastNum);\r\n                if (catchArr.length == nContinu){\r\n                    let big = lastNum + nContinu -1;\r\n                    let [w] = DdzPokerCheck.getPokerWeight(big);\r\n                    return w;\r\n                }\r\n                if (lastNum > 0 && lastNum - Number(threeOrderArr[i-1]) != 1 || lastNum == 2){\r\n                    catchArr = [];\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // 检测飞机带对\r\n    public checkPlaneTwo(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        let total = arr.length;\r\n        if (total >= 10 && total % 5 == 0){\r\n            let nContinu = arr.length / 5;\r\n            let threeOrderArr = this.getOrderBiggerNumArr(map, 3);\r\n            let lastNum = 0;\r\n            let catchArr = [];\r\n            for(let i=threeOrderArr.length-1; i >=0; i--){\r\n                let value = Number(threeOrderArr[i]);\r\n                lastNum = value;\r\n                catchArr.push(lastNum);\r\n                if (catchArr.length == nContinu){\r\n                    let tmpArr = this.getRealValueArr(arr);\r\n                    this.removeRootArr(tmpArr, catchArr, 3);\r\n                    let [leftMap] = this.computeValueTimes(tmpArr);\r\n                    let threeArr = this.getOrderNumArr(leftMap, 3);\r\n                    if (threeArr.length > 0){\r\n                        catchArr.shift();\r\n                        continue;\r\n                    }\r\n                    else{\r\n                        let fourArr = this.getOrderNumArr(leftMap, 4);\r\n                        let twoArr = this.getOrderNumArr(leftMap, 2);\r\n                        if (fourArr.length *2 + twoArr.length == nContinu){\r\n                            let big = lastNum + nContinu -1;\r\n                            let [w] = DdzPokerCheck.getPokerWeight(big);\r\n                            return w;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                if (lastNum > 0 && lastNum - Number(threeOrderArr[i-1]) != 1 || lastNum == 2){\r\n                    catchArr = [];\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public removeRootArr(arr: number[], catchArr: number[], times: number = 1){\r\n        for(let i=0; i< catchArr.length * times; i++){\r\n            let index = arr.indexOf(catchArr[i % catchArr.length]);\r\n            if (index > -1){\r\n                arr.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 检测炸弹\r\n    public checkBomb(arr: number[], maxCount: number){\r\n        if(arr.length != 4 || maxCount != 4)\r\n            return 0;\r\n        let [w] = DdzPokerCheck.getPokerWeight(arr[0]);\r\n        return w;\r\n    }\r\n\r\n    // 检测4+1+1\r\n    public checkBombWithSingles(arr: number[], maxCount: number, maxNumArr: number[]){\r\n        if (arr.length != 6 || maxCount != 4)\r\n            return 0;\r\n        let [w] = DdzPokerCheck.getPokerWeight(maxNumArr[0]);\r\n        return w;\r\n    }\r\n\r\n    // 检测4+2+2\r\n    public checkBombWithPairs(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        if (arr.length != 8 || maxCount != 4)\r\n            return 0;\r\n        let orderNumArr = this.getOrderNumArr(map, 4);\r\n        if (maxNumArr.length == 2){    // 4+4\r\n            let [w] = DdzPokerCheck.getPokerWeight(orderNumArr[1]);\r\n            return w;\r\n        }\r\n        else{   // 4+...\r\n            let count = 0;\r\n            for(let key in map){\r\n                if (map[key] == 2)\r\n                    count ++;\r\n            }\r\n            if (count == 2){    // 4+2+2\r\n                let [w] = DdzPokerCheck.getPokerWeight(maxNumArr[0]);\r\n                return w;\r\n            }\r\n            else{\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public checkLinkPairs(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        if (maxCount !=2 || arr.length != 2 * maxNumArr.length || maxNumArr.length < 3)\r\n            return 0;\r\n        if (this.checkContinuity(map, 2)){\r\n            let orderNumArr = this.getOrderNumArr(map, 2);\r\n            let [w] = DdzPokerCheck.getPokerWeight(orderNumArr[maxNumArr.length -1]);\r\n            return w;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    public checkQuickLinkPairs(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        if (maxCount !=2 || arr.length != 2 * maxNumArr.length || maxNumArr.length < 2)\r\n            return 0;\r\n        if (this.checkContinuity(map, 2)){\r\n            let orderNumArr = this.getOrderNumArr(map, 2);\r\n            let [w] = DdzPokerCheck.getPokerWeight(orderNumArr[maxNumArr.length -1]);\r\n            return w;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    public checkStraight(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        if (maxCount !=1 || arr.length != maxNumArr.length || maxNumArr.length < 5)\r\n            return 0;\r\n        if (this.checkContinuity(map, 1)){\r\n            let orderNumArr = this.getOrderNumArr(map, 1);\r\n            let [w] = DdzPokerCheck.getPokerWeight(orderNumArr[maxNumArr.length -1]);\r\n            return w;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    public checkQuickStraight(arr: number[], maxCount: number, maxNumArr: number[], map: {}){\r\n        if (maxCount !=1 || arr.length != maxNumArr.length || maxNumArr.length < 3)\r\n            return 0;\r\n        if (this.checkContinuity(map, 1)){\r\n            let orderNumArr = this.getOrderNumArr(map, 1);\r\n            let [w] = DdzPokerCheck.getPokerWeight(orderNumArr[maxNumArr.length -1]);\r\n            return w;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    /**\r\n     * 计算牌数据中牌面出现次数，返回[numMap, maxShowCount, maxNumArr]\r\n     * numMap 标记次数\r\n     * maxShowCount 最多次数\r\n     * maxNumArr 最多次数的牌面数组\r\n     * @param arr \r\n     */\r\n    public computeValueTimes(arr = []):[any, number, number[]]{\r\n        let numMap = {};\r\n        arr.forEach(value => {\r\n            let [num] = DdzPokerCheck.getPokerValue(value);\r\n            if (numMap[num])\r\n                numMap[num] ++;\r\n            else\r\n                numMap[num] = 1;\r\n        });\r\n\r\n        let maxShowCount = 0;\r\n        for(let key in numMap){\r\n            if (numMap[key] > maxShowCount){\r\n                maxShowCount = numMap[key];\r\n            }\r\n        }\r\n        let maxNumArr = [];\r\n        for(let key in numMap){\r\n            if (numMap[key] == maxShowCount){\r\n                maxNumArr.push(key);\r\n            }\r\n        }\r\n\r\n        return [numMap, maxShowCount, maxNumArr];\r\n    }\r\n\r\n    /**\r\n     * 指定count的num 按权重递增排列数组\r\n     * @param numMap 牌面map{num: count}\r\n     * @param count 张数\r\n     */\r\n    public getOrderNumArr(numMap: {}, count: number =1): number[]{\r\n        let arr = [];\r\n        for(let key in numMap){\r\n            let value = numMap[key];\r\n            if(value == count){\r\n                arr.push(key);\r\n            }\r\n        }\r\n        arr.sort((a, b)=>{\r\n            let [wa] = DdzPokerCheck.getPokerWeight(a);\r\n            let [wb] = DdzPokerCheck.getPokerWeight(b);\r\n            return wa - wb; // 递增排序\r\n        });\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * 检测牌面值连续 (只可用于检测顺子 连对 飞机不带)\r\n     * @param numMap 牌面map{num: count}\r\n     * @param count 张数\r\n     */\r\n    public checkContinuity(numMap: {}, count: number): boolean{\r\n        let sortNumArr = this.getOrderNumArr(numMap, count);\r\n        let lastNum = 0;\r\n        for(let i=0; i< sortNumArr.length; i++){\r\n            if (lastNum > 0 && (sortNumArr[i] - lastNum != 1) || sortNumArr[i] == 2) // 不连续或者含2\r\n                return false;\r\n            lastNum = sortNumArr[i];\r\n        }\r\n        return lastNum > 0;\r\n    }\r\n\r\n    /**\r\n     * 不小于指定count的num 按权重递增排列数组\r\n     * @param numMap 牌面map{num: count}\r\n     * @param count 张数\r\n     */\r\n    public getOrderBiggerNumArr(numMap: {}, count: number =1): number[]{\r\n        let arr = [];\r\n        for(let key in numMap){\r\n            let value = numMap[key];\r\n            if(value >= count){\r\n                arr.push(key);\r\n            }\r\n        }\r\n        arr.sort((a, b)=>{\r\n            let [wa] = DdzPokerCheck.getPokerWeight(a);\r\n            let [wb] = DdzPokerCheck.getPokerWeight(b);\r\n            return wa - wb; // 递增排序\r\n        });\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * 不小于指定count的num 按先数量后权重递增排列数组\r\n     * @param numMap 牌面map{num: count}\r\n     * @param count 张数\r\n     */\r\n    public getOrderBiggerNumArrByCount(numMap: {}, count: number =1): number[]{\r\n        let arr = [];\r\n        for(let key in numMap){\r\n            let value = numMap[key];\r\n            if(value >= count){\r\n                arr.push(key);\r\n            }\r\n        }\r\n        arr.sort((a, b)=>{\r\n            if (numMap[a] == numMap[b]){\r\n                let [wa] = DdzPokerCheck.getPokerWeight(a);\r\n                let [wb] = DdzPokerCheck.getPokerWeight(b);\r\n                return wa - wb;     // 权重递增排序\r\n            }\r\n            else\r\n                return numMap[a] - numMap[b]; // 数量递增排序\r\n        });\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * 获取牌的牌面列表\r\n     * @param arr \r\n     */\r\n    public getRealValueArr(arr){\r\n        let tmpArr = [];\r\n        for(let i =0; i< arr.length; i++){\r\n            let [value] = DdzPokerCheck.getPokerValue(arr[i]);\r\n            tmpArr.push(value);\r\n        }\r\n        return tmpArr;\r\n    }\r\n}"]}