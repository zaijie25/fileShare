{"version":3,"sources":["assets\\hall\\scripts\\logic\\hallcommon\\model\\MsgModel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,gEAA2D;AAC3D,yDAA0D;AAC1D,uDAA+D;AAC/D,yCAA8C;AAC9C,qEAAgF;AAIhF;IAAsC,4BAAS;IAA/C;QAAA,qEAkUC;QAzSW,eAAS,GAA0B,EAAE,CAAA;QACrC,qBAAe,GAAsB,EAAE,CAAA,CAAC,QAAQ;QAChD,uBAAiB,GAAsB,EAAE,CAAA,CAAA,QAAQ;;IAuS7D,CAAC;IAjUa,yBAAM,GAAhB;QACG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,WAAW,EAAC,IAAI,EAAC,IAAI,CAAC,WAAW,CAAC,CAAA;IACjE,CAAC;IACD,8BAAW,GAAX,UAAY,IAAI;QACZ,IAAI,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAA;QAChC,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;QACzB,IAAG,CAAC,SAAS,EACb;YACI,OAAM;SACT;QACD,QAAQ,WAAW,EAAE;YACjB,KAAK,2BAAe,CAAC,OAAO;gBACxB;oBACI,IAAI,CAAC,iBAAiB,CAAC,kBAAO,CAAC,MAAM,CAAC,CAAA;oBACtC,MAAM;iBACT;YACL,KAAK,2BAAe,CAAC,IAAI;gBACrB;oBACI,IAAI,CAAC,iBAAiB,CAAC,kBAAO,CAAC,IAAI,CAAC,CAAA;oBACpC,MAAM;iBACT;SAER;IACL,CAAC;IAKM,gCAAa,GAApB,UAAqB,QAAe;QAEhC,IAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EACtF;YACI,IAAI,CAAC,IAAI,EAAE,CAAA;YACX,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;YACnC,OAAO,IAAI,CAAA;SACd;QACD,OAAO,IAAI,CAAA;IAEf,CAAC;IAED,sBAAW,0BAAI;aAAf;YAEI,OAAO,UAAU,CAAC;QACtB,CAAC;;;OAAA;IAKD,sBAAW,4BAAM;aAAjB;YAEI,OAAO,IAAI,CAAC,OAAO,CAAA;QACvB,CAAC;;;OAAA;IAED;;;OAGG;IACI,4BAAS,GAAhB,UAAiB,MAAM;QAEnB,IAAI,CAAC,OAAO,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,CAAA,MAAM,CAAA;QAC1C,IAAI,MAAM,EAAC;YACP,0BAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,6BAAU,CAAC,MAAM,EAAE;gBACpD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAA;SACL;IACL,CAAC;IAEM,oCAAiB,GAAxB,UAAyB,QAAe;QAEpC,qFAAqF;QACrF,IAAI,CAAC,oBAAoB,EAAE,CAAA;QAC3B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,CAAC,CAAA;IAC/C,CAAC;IAEM,uCAAoB,GAA3B;QACI,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,qBAAU,CAAC,GAAG,EAAC,qBAAU,CAAC,UAAU,EAAC,EAAC,IAAI,EAAC,kBAAO,CAAC,GAAG,EAAC,CAAC,CAAA;QACrF,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,qBAAU,CAAC,GAAG,EAAC,qBAAU,CAAC,UAAU,EAAC,EAAC,IAAI,EAAC,kBAAO,CAAC,IAAI,EAAC,CAAC,CAAA;QACtF,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,qBAAU,CAAC,GAAG,EAAC,qBAAU,CAAC,UAAU,EAAC,EAAC,IAAI,EAAC,kBAAO,CAAC,MAAM,EAAC,CAAC,CAAA;IAC5F,CAAC;IAEM,6BAAU,GAAjB,UAAkB,QAAe,EAAE,UAA2B,EAAE,OAAsB,EAAC,WAA4B;QAAnH,iBAgCC;QAhCkC,2BAAA,EAAA,kBAA2B;QAAE,wBAAA,EAAA,eAAsB;QAAC,4BAAA,EAAA,mBAA4B;QAE/G,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAU,CAAC,GAAG,EAAE,qBAAU,CAAC,UAAU,EAAE,EAAC,IAAI,EAAC,QAAQ,EAAC,EAAC,UAAC,GAAG;YAC9E,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAA;YAE9B,IAAG,UAAU,EACb;gBACI,IAAI,OAAO,GAAG,KAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAA;gBACpD,IAAG,OAAO,EACV;oBACI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAC,CAAC,KAAK,EAAC,2BAAe,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC5E;gBAED,IAAI,UAAU,GAAG,KAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAA;gBACzD,IAAG,UAAU,EACb;oBACI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAC,CAAC,KAAK,EAAC,2BAAe,CAAC,OAAO,CAAC,CAAC,CAAC;iBAC/E;gBACD,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;aAEzB;iBAED;gBACI,KAAI,CAAC,IAAI,EAAE,CAAA;gBACX,IAAI,IAAI,GAAG,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;gBACnC,IAAG,QAAQ,IAAI,kBAAO,CAAC,MAAM,EAAC;oBAC3B,KAAI,CAAC,KAAK,CAAC,mBAAQ,CAAC,kBAAkB,EAAC,IAAI,CAAC,CAAA;iBAC9C;qBAAI;oBACD,KAAI,CAAC,KAAK,CAAC,mBAAQ,CAAC,eAAe,EAAC,IAAI,CAAC,CAAA;iBAC5C;aACJ;QACL,CAAC,EAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,CAAA,CAAC,CAAA,CAAC,CAAA,CAAC,CAAA,GAAG,CAAE,CAAA;IAC7D,CAAC;IAED,+BAAY,GAAZ,UAAa,GAAQ;QACjB,IAAG,GAAG,IAAI,IAAI,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,EACnD;YACI,OAAM;SACT;QAED,IAAG,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,kBAAO,CAAC,IAAI,CAAC,EAC/C;YACI,IAAI,IAAI,GAAG,EAAE,CAAA;YACb,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,UAAU,IAAI,CAAC,CAAC,CAAA;YACzC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,IAAI,IAAI,IAAI,CAAA;YAC/B,IAAI,CAAC,SAAS,CAAC,kBAAO,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,CAAA;SAC9C;QAED,IAAG,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,kBAAO,CAAC,MAAM,CAAC,EACjD;YACI,IAAI,IAAI,GAAG,EAAE,CAAA;YACb,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,YAAY,IAAI,CAAC,CAAC,CAAA;YAC7C,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,MAAM,IAAI,IAAI,CAAA;YACnC,IAAI,CAAC,SAAS,CAAC,kBAAO,CAAC,MAAM,CAAC,GAAG,IAAI,IAAI,IAAI,CAAA;SAChD;IAEL,CAAC;IAEO,kCAAe,GAAvB,UAAyB,IAAU;QAC/B,IAAG,IAAI,CAAC,OAAO,IAAI,IAAI,EAAC;YACpB,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,GAAC,EAAE,CAAC,CAAC;YACrC,wDAAwD;YACtD,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAGM,0BAAO,GAAd,UAAe,EAAS;QAAxB,iBAiBC;QAfG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAU,CAAC,GAAG,EAAE,qBAAU,CAAC,OAAO,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAC,UAAC,GAAG;YACnE,IAAI,IAAI,GAAG,kBAAO,CAAC,IAAI,CAAA;YACvB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAG,EACzD;gBACI,IAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EACxE;oBACI,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;oBACrC,MAAM;iBACT;aAEJ;YACD,KAAI,CAAC,oBAAoB,EAAE,CAAA;YAC3B,KAAI,CAAC,KAAK,CAAC,mBAAQ,CAAC,iBAAiB,EAAC,GAAG,CAAC,CAAA;QAE9C,CAAC,EAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;IACtC,CAAC;IAEM,0BAAO,GAAd,UAAe,EAAE,EAAC,QAAQ,EAAC,UAAU;QAArC,iBA4BC;QA1BG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAU,CAAC,GAAG,EAAE,qBAAU,CAAC,OAAO,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,QAAQ,EAAC,QAAQ,EAAC,UAAU,EAAC,UAAU,EAAC,EAAC,UAAC,GAAG;YAC3G,IAAI,IAAI,GAAG,IAAI,CAAA;YAEf,IAAG,QAAQ,IAAI,kBAAO,CAAC,IAAI,EAC3B;gBACI,IAAI,GAAG,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAA;aACvC;iBACI,IAAG,QAAQ,IAAI,kBAAO,CAAC,MAAM,EAClC;gBACI,IAAI,GAAG,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAA;aACzC;YACD,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAG,EACpC;gBACI,IAAG,IAAI,CAAC,CAAC,CAAC,IAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAC9B;oBACI,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAA;oBACtB,MAAM;iBACT;aAEJ;YACD,KAAI,CAAC,oBAAoB,EAAE,CAAA;YAC3B,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAC,EAAE,EAAC,GAAG,CAAC,CAAA;YACjC,KAAI,CAAC,KAAK,CAAC,mBAAQ,CAAC,eAAe,EAAC,GAAG,CAAC,CAAA;YAE5C,mDAAmD;QACnD,CAAC,EAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,KAAK,EAAC,KAAK,CAAC,CAAA;IAClD,CAAC;IACD,8BAAW,GAAX,UAAY,QAAgB,EAAC,EAAS,EAAE,GAAQ;QAC5C,IAAG,QAAQ,IAAI,kBAAO,CAAC,IAAI,EAC3B;YACI,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,GAAG,GAAG,CAAA;SACjC;aAED;YACI,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,GAAG,GAAG,CAAA;SACnC;IACL,CAAC;IAEM,iCAAc,GAArB,UAAsB,IAAY,EAAC,EAAS;QAExC,IAAG,IAAI,IAAI,kBAAO,CAAC,IAAI,EACvB;YACI,IAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,EAC1C;gBACI,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;aAClC;YACD,OAAO,IAAI,CAAA;SACd;aAED;YACI,IAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,CAAC,EAC5C;gBACI,OAAO,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;aACpC;YACD,OAAO,IAAI,CAAA;SAEd;IACL,CAAC;IAED;;;OAGG;IACI,wCAAqB,GAA5B,UAA6B,UAA0B;QAA1B,2BAAA,EAAA,kBAA0B;QACnD,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;YACxB,OAAM;SACT;QACD,IAAI,IAAI,GAAG,KAAK,CAAA;QAChB,IAAI,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAO,CAAC,GAAG,CAAC,CAAA,CAAC,CAAA,IAAI,CAAC,SAAS,CAAC,kBAAO,CAAC,IAAI,CAAC,CAAA;QAChF,IAAG,IAAI,EACP;YACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,EAAE;oBAC9C,IAAI,GAAG,IAAI,CAAA;oBACX,MAAM;iBACT;aAEJ;SACJ;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAEM,0CAAuB,GAA9B,UAA+B,UAA0B;QAA1B,2BAAA,EAAA,kBAA0B;QACrD,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;YACxB,OAAM;SACT;QACD,IAAI,IAAI,GAAG,KAAK,CAAA;QAChB,IAAI,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAO,CAAC,GAAG,CAAC,CAAA,CAAC,CAAA,IAAI,CAAC,SAAS,CAAC,kBAAO,CAAC,MAAM,CAAC,CAAA;QAClF,IAAG,IAAI,EAAC;YACJ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACzC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,EAAE;oBAClD,IAAI,GAAG,IAAI,CAAA;oBACX,MAAM;iBACT;aAEJ;SACJ;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IACM,wBAAK,GAAZ;QAEI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA;QACzB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAA;QAC5B,kEAAkE;IACrE,CAAC;IAEM,uBAAI,GAAX;QAEI,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EACzE;YACI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;YAChB,OAAM;SACT;QACD,IAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,kBAAO,CAAC,IAAI,CAAC,EAAC;YAC3C,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAO,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAA;YAExD,IAAG,QAAQ,IAAE,QAAQ,CAAC,MAAM,IAAI,CAAC,EACjC;gBACI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;aACnC;SAEJ;QACD,IAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,kBAAO,CAAC,MAAM,CAAC,EAChD;YACI,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAO,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,IAAI,CAAA;YAC9D,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;gBACtC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;aACrC;SACJ;IAEL,CAAC;IACD;;;;OAIG;IACI,+BAAY,GAAnB,UAAoB,CAAC,EAAC,CAAC;QAEnB,IAAG,CAAC,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,EACzC;YACI,OAAO,CAAC,CAAC,CAAA;SACZ;aACI,IAAG,CAAC,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,EAC9C;YACI,OAAO,CAAC,CAAA;SACX;aACG;YACA,OAAQ,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,CAAA;SACpB;IACL,CAAC;IAEL,eAAC;AAAD,CAlUA,AAkUC,CAlUqC,mBAAS,GAkU9C","file":"","sourceRoot":"/","sourcesContent":["import ModelBase from \"../../../framework/model/ModelBase\";\r\nimport { NetAppface } from \"../../core/net/hall/NetEvent\";\r\nimport { MsgEvent, MsgType } from \"../../hall/ui/msg/MsgEvent\";\r\nimport { HallRedSpotType } from \"./HallModel\";\r\nimport HallPopMsgHelper, { PopWndName } from \"../../hall/tool/HallPopMsgHelper\";\r\n\r\n\r\n\r\nexport default class MsgModel extends ModelBase{\r\n    protected onInit(){\r\n       Global.Event.on(GlobalEvent.ShowRedSpot,this,this.RefreshData)\r\n    }\r\n    RefreshData(data) {\r\n        let needfresh = data[0] || false\r\n        let redSpotType = data[1] \r\n        if(!needfresh)\r\n        {\r\n            return\r\n        }\r\n        switch (redSpotType) {\r\n            case HallRedSpotType.Gonggao:\r\n                {\r\n                    this.RefreshDataByType(MsgType.Notice)\r\n                    break;\r\n                }\r\n            case HallRedSpotType.Mail:\r\n                {\r\n                    this.RefreshDataByType(MsgType.Mail)\r\n                    break;\r\n                }\r\n\r\n        }\r\n    }\r\n    private DataTabel: { [key: number]: any } ={} \r\n    private MailContenTabel:{[key:number]:any} = {} //存储已读公告\r\n    private NoticeContenTabel:{[key:number]:any} = {}//存储已读邮件\r\n\r\n    public GetDataByType(msg_type:number)\r\n    {\r\n        if(this.DataTabel[msg_type] && !Global.Toolkit.isEmptyObject(this.DataTabel[msg_type]))\r\n        {\r\n            this.Sort()\r\n            let data = this.DataTabel[msg_type]\r\n            return data\r\n        }\r\n        return null\r\n\r\n    }\r\n   \r\n    public get Name()\r\n    {\r\n        return \"MsgModel\";\r\n    }\r\n\r\n    private _Status:number \r\n\r\n    \r\n    public get Status()\r\n    {\r\n        return this._Status\r\n    }\r\n\r\n    /**\r\n     * 公告弹窗字段\r\n     * @param status \r\n     */\r\n    public SetStatus(status)\r\n    {\r\n        this._Status = (status == null) ? 0:status\r\n        if (status){\r\n            HallPopMsgHelper.Instance.addMsgList(PopWndName.Notice, ()=>{\r\n                Global.Event.event(GlobalEvent.POP_NOTICE);\r\n            })\r\n        }\r\n    }\r\n\r\n    public RefreshDataByType(msg_type:number)\r\n    {\r\n        // Global.HallServer.clearCache(NetAppface.mod,NetAppface.GetMsgList,{type:msg_type})\r\n        this.ClearAllNetFaceCache()\r\n        this.GetMsgList(msg_type,false,false,false)\r\n    }\r\n\r\n    public ClearAllNetFaceCache(){\r\n        Global.HallServer.clearCache(NetAppface.mod,NetAppface.GetMsgList,{type:MsgType.All})\r\n        Global.HallServer.clearCache(NetAppface.mod,NetAppface.GetMsgList,{type:MsgType.Mail})\r\n        Global.HallServer.clearCache(NetAppface.mod,NetAppface.GetMsgList,{type:MsgType.Notice})\r\n    }\r\n\r\n    public GetMsgList(msg_type:number, isFromHall :boolean = false, isFresh :boolean=false,showwaiting :boolean = false)\r\n    {\r\n        Global.HallServer.send(NetAppface.mod, NetAppface.GetMsgList, {type:msg_type},(msg) =>{\r\n            this.DataTabel[msg_type] = msg\r\n           \r\n            if(isFromHall)\r\n            {   \r\n                let MsgFlag = this.CheckIsAnyMailNotRead(isFromHall)\r\n                if(MsgFlag)\r\n                {\r\n                    Global.Event.event(GlobalEvent.ShowRedSpot,[false,HallRedSpotType.Mail]);\r\n                }\r\n\r\n                let noticeFlag = this.CheckIsAnyNoticeNotRead(isFromHall)\r\n                if(noticeFlag)\r\n                {\r\n                    Global.Event.event(GlobalEvent.ShowRedSpot,[false,HallRedSpotType.Gonggao]);\r\n                }\r\n                this.AssemblyData(msg)\r\n\r\n            }\r\n            else\r\n            {\r\n                this.Sort()\r\n                let data = this.DataTabel[msg_type]\r\n                if(msg_type == MsgType.Notice){\r\n                   this.event(MsgEvent.NoticeListCallback,data) \r\n                }else{\r\n                    this.event(MsgEvent.MsgListCallback,data)\r\n                }\r\n            }\r\n        },this.SpreadErronFunc.bind(this), false, isFresh?0:180 )\r\n    }\r\n\r\n    AssemblyData(msg: any) {\r\n        if(msg == null || Global.Toolkit.isEmptyObject(msg))\r\n        {\r\n            return\r\n        }\r\n        \r\n        if(!this.DataTabel.hasOwnProperty(MsgType.Mail))\r\n        {\r\n            let data = {}\r\n            data[\"mail_total\"] = msg.mail_total || -1\r\n            data[\"mail\"] = msg.mail || null\r\n            this.DataTabel[MsgType.Mail] = data || null\r\n        }\r\n\r\n        if(!this.DataTabel.hasOwnProperty(MsgType.Notice))\r\n        {\r\n            let data = {}\r\n            data[\"notice_tital\"] = msg.notice_tital || -1\r\n            data[\"notice\"] = msg.notice || null\r\n            this.DataTabel[MsgType.Notice] = data || null\r\n        }\r\n\r\n    }\r\n\r\n    private SpreadErronFunc( data : any ){\r\n        if(data._errstr != null){\r\n            Global.UI.fastTip(data._errstr+\"\");\r\n          //  Global.UI.fastTip(data._errstr+\"[\"+data._errno+\"]\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n   \r\n    public DelMail(id:number)\r\n    {\r\n        Global.HallServer.send(NetAppface.mod, NetAppface.DelMail, {id:id},(msg) =>{\r\n            let type = MsgType.Mail\r\n            for(let i = 0; i < this.DataTabel[type].mail.length; i ++)\r\n            {\r\n                if(this.DataTabel[type].mail[i] &&this.DataTabel[type].mail[i].id === id)\r\n                {\r\n                    this.DataTabel[type].mail.splice(i,1)\r\n                    break;\r\n                }\r\n\r\n            }\r\n            this.ClearAllNetFaceCache()\r\n            this.event(MsgEvent.DeleteMsgCallback,msg)\r\n\r\n        },this.SpreadErronFunc.bind(this))\r\n    }\r\n\r\n    public ReadMsg(id,msg_type,red_status)\r\n    {\r\n        Global.HallServer.send(NetAppface.mod, NetAppface.ReadMsg, {id:id,msg_type:msg_type,red_status:red_status},(msg) =>{\r\n            let data = null\r\n\r\n            if(msg_type == MsgType.Mail)\r\n            {\r\n                data = this.DataTabel[msg_type].mail\r\n            }\r\n            else if(msg_type == MsgType.Notice)\r\n            {\r\n                data = this.DataTabel[msg_type].notice\r\n            }\r\n            for(let i = 0; i < data.length; i ++)\r\n            {\r\n                if(data[i] &&data[i].id === id)\r\n                {\r\n                    data[i].red_status = 1\r\n                    break;\r\n                }\r\n\r\n            }\r\n            this.ClearAllNetFaceCache()\r\n            this.SaveContent(msg_type,id,msg)\r\n            this.event(MsgEvent.ReadMsgCallBack,msg)\r\n\r\n        // },this.SpreadErronFunc.bind(this), false, 10000)\r\n        },this.SpreadErronFunc.bind(this),false,10000)\r\n    }\r\n    SaveContent(msg_type: number,id:number, msg: any) {\r\n        if(msg_type == MsgType.Mail)\r\n        {\r\n            this.MailContenTabel[id] = msg\r\n        }\r\n        else\r\n        {\r\n            this.NoticeContenTabel[id] = msg\r\n        }\r\n    }\r\n\r\n    public GetContentByID(type:MsgType,id:number)\r\n    {\r\n        if(type == MsgType.Mail)\r\n        {\r\n            if(this.MailContenTabel.hasOwnProperty(id))\r\n            {\r\n                return this.MailContenTabel[id]\r\n            }\r\n            return null\r\n        }\r\n        else\r\n        {   \r\n            if(this.NoticeContenTabel.hasOwnProperty(id))\r\n            {\r\n                return this.NoticeContenTabel[id]\r\n            }\r\n            return null\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param isFromHall 是否登录时请求\r\n     */\r\n    public CheckIsAnyMailNotRead(isFromHall:boolean = false) {\r\n        if (this.DataTabel == null) {\r\n            return\r\n        }\r\n        let flag = false\r\n        let data = isFromHall ? this.DataTabel[MsgType.All]:this.DataTabel[MsgType.Mail]\r\n        if(data)\r\n        {\r\n            for (let i = 0; i < data.mail.length; i++) {\r\n                if (data.mail[i] && data.mail[i].red_status == 0) {\r\n                    flag = true\r\n                    break;\r\n                }\r\n    \r\n            }\r\n        }\r\n        return flag\r\n    }\r\n\r\n    public CheckIsAnyNoticeNotRead(isFromHall:boolean = false) {\r\n        if (this.DataTabel == null) {\r\n            return\r\n        }\r\n        let flag = false\r\n        let data = isFromHall ? this.DataTabel[MsgType.All]:this.DataTabel[MsgType.Notice]\r\n        if(data){\r\n            for (let i = 0; i < data.notice.length; i++) {\r\n                if (data.notice[i] && data.notice[i].red_status == 0) {\r\n                    flag = true\r\n                    break;\r\n                }\r\n    \r\n            }\r\n        }\r\n        return flag\r\n    }\r\n    public clear()\r\n    {\r\n        this.DataTabel = [];\r\n        this.MailContenTabel = []\r\n        this.NoticeContenTabel = []\r\n       // Global.Event.off(GlobalEvent.ShowRedSpot,this,this.RefreshData)\r\n    }\r\n\r\n    public Sort()\r\n    {\r\n        if(this.DataTabel == null || Global.Toolkit.isEmptyObject(this.DataTabel))\r\n        {\r\n            cc.error(\"没有数据\")\r\n            return\r\n        }\r\n        if(this.DataTabel.hasOwnProperty(MsgType.Mail)){\r\n            let MailData = this.DataTabel[MsgType.Mail].mail || null\r\n       \r\n            if(MailData&&MailData.length != 0 )\r\n            {\r\n                MailData.sort(this.SortByStatus)\r\n            }\r\n            \r\n        }\r\n        if(this.DataTabel.hasOwnProperty(MsgType.Notice))\r\n        {\r\n            let NoticeData = this.DataTabel[MsgType.Notice].notice || null\r\n            if (NoticeData && NoticeData.length != 0) {\r\n                NoticeData.sort(this.SortByStatus)\r\n            }\r\n        }\r\n        \r\n    }\r\n    /**\r\n     * 根据是否已读排序\r\n     * @param a \r\n     * @param b \r\n     */\r\n    public SortByStatus(a,b)\r\n    {\r\n        if(a.red_status == 0 && b.red_status == 1)\r\n        {\r\n            return -1\r\n        }\r\n        else if(a.red_status == 1 && b.red_status == 0)\r\n        {\r\n            return 1\r\n        }\r\n        else{\r\n            return  b.id-a.id \r\n        }\r\n    }\r\n    \r\n}"]}