{"version":3,"sources":["assets\\hall\\scripts\\logic\\hallcommon\\model\\SignActivityModel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ModelBase from \"../../../framework/model/ModelBase\";\r\nimport { RightViewType } from \"../../hall/ui/Activity/ActivityConstants\";\r\n\r\n\r\n\r\nexport default class SignActivityModel extends ModelBase{\r\n   \r\n   \r\n    public get Name()\r\n    {\r\n        return \"SignActivityModel\";\r\n    }\r\n\r\n    /**\r\n     * 红点控制\r\n     */\r\n    private _redFlag:boolean = false\r\n\r\n    public set redSwitch(flag)\r\n    {\r\n        this._redFlag = flag\r\n        \r\n    }\r\n\r\n    public get redSwitch()\r\n    {\r\n       return this._redFlag\r\n    }\r\n\r\n    private actData = null\r\n\r\n\r\n    public static UpdataPanel = \"UpdataPanel\"\r\n\r\n    public static OnGetAward = \"OnGetAward\"\r\n\r\n    protected onInit() {\r\n\r\n    }\r\n\r\n    \r\n public reqReceiveActivityAward(activityId:number,key?:number) {\r\n        let param: any = {}\r\n        param.atype = activityId\r\n        param.key = key\r\n        Global.HallServer.send(NetAppface.mod, NetAppface.ReceiveActivityAward, param, (data) => {\r\n            this.event(SignActivityModel.OnGetAward,data)\r\n        }, null, true, 0);\r\n    }\r\n\r\n    public reqGetActivityCfg(showWaiting =false) {\r\n        Global.Event.event(GlobalEvent.SHOW_NET_WAITING,\"reqGetActivityCfg\")\r\n        let param: any = {}\r\n        Global.HallServer.send(NetAppface.mod, NetAppface.GetActivityCfg, param, (data) => {\r\n            let arr = data.data\r\n            for (let index = 0; index < arr.length; index++) {\r\n                let cfg = arr[index];\r\n                if(cfg && cfg.atype == RightViewType.signActivity )\r\n                {\r\n                    this.actData = cfg.cfg\r\n                    break\r\n                }\r\n            }\r\n            this.event(SignActivityModel.UpdataPanel,this.actData)\r\n        }, null, showWaiting, 0);\r\n    }\r\n    \r\n\r\n    public checkFlowStatusFinish()\r\n    {\r\n        if(!this.actData )\r\n        {\r\n            this.redSwitch = false\r\n            return false\r\n           \r\n        } \r\n        let day = this.actData.day\r\n        if(day == 4)\r\n        {\r\n            return true\r\n        }\r\n        for (let index = 0; index < this.actData.list.length; index++) {\r\n            let element = this.actData.list[index];\r\n            switch (day) {\r\n                case 1:\r\n                    let dayOneData = element.one\r\n                    if(dayOneData.flow_status === 0)\r\n                    {\r\n                        this.redSwitch = false\r\n                        return false\r\n                    }\r\n                   \r\n                    break;\r\n                case 2:\r\n                    let dayTwoData = element.two\r\n                    if(dayTwoData.flow_status === 0)\r\n                    {\r\n                        this.redSwitch = false\r\n                        return false\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    let dayThirdData = element.three\r\n                    if(dayThirdData.flow_status === 0)\r\n                    {\r\n                        this.redSwitch = false\r\n                        return false\r\n                    }\r\n                    break;\r\n    \r\n                default:\r\n                    break;\r\n            }        \r\n        }\r\n        this.redSwitch = this.actData.status == 1\r\n        return this.actData.status == 1\r\n    }\r\n    \r\n    \r\n}"]}