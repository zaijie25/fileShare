{"version":3,"sources":["assets\\hall\\scripts\\logic\\hall\\ui\\Spread\\CaptureTool.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CaptureTool extends cc.Component {\r\n\r\n    @property(cc.Camera)\r\n    camera:cc.Camera = null\r\n    private texture = null\r\n    private _width = null\r\n    private _height = null\r\n    private callback = null\r\n\r\n    \r\n    public BeginCapture(url,_callback?,closeNode = true)\r\n    {\r\n        this.callback = _callback\r\n        if(!this.checkImgExist(url))\r\n        {\r\n            Global.Event.event(GlobalEvent.SHOW_NET_WAITING, \"captureIng\");\r\n            this.init();\r\n            // create the capture\r\n            this.scheduleOnce(() => {\r\n                let picData = this.initImage();\r\n                //this.showSprite(picData);\r\n                this.saveFile(url,picData,closeNode);\r\n            }, 0.2);\r\n        }\r\n        else{\r\n            if(this.callback)\r\n            {\r\n                this.callback()\r\n                this.callback = null\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    init () {\r\n        this.camera.node.active = true\r\n        let texture = new cc.RenderTexture();\r\n        let gl = cc.game._renderContext;\r\n        texture.initWithSize(cc.visibleRect.width, cc.visibleRect.height, gl.STENCIL_INDEX8);\r\n        this.camera.targetTexture = texture;\r\n        this.texture = texture;\r\n    }\r\n    \r\n    // override\r\n    initImage () { \r\n        let data = this.texture.readPixels();\r\n        this._width = this.texture.width;\r\n        this._height = this.texture.height;\r\n        let picData = this.filpYImage(data, this._width, this._height);\r\n        return picData;\r\n    }\r\n\r\n    \r\n\r\n    saveFile (url,picData,closeNode) {\r\n        if (CC_JSB) {\r\n            let filePath = jsb.fileUtils.getWritablePath() + Global.Toolkit.md5(url) +'_capImage.png';\r\n\r\n            let success = jsb.saveImageData(picData, this._width, this._height, filePath)\r\n            if (success) {\r\n                Logger.log(\"save image data success, file: \" + filePath);\r\n                this.camera.targetTexture = null\r\n                this.camera.node.active = false\r\n                this.node.active = !closeNode\r\n                Global.Event.event(GlobalEvent.HIDE_NET_WAITING, \"captureIng\");\r\n                if(this.callback)\r\n                {\r\n                    this.callback()\r\n                    this.callback = null\r\n                }\r\n            }\r\n            else {\r\n                Logger.error(\"save image data failed!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    checkImgExist(url)\r\n    {\r\n        if(CC_JSB)\r\n        {\r\n            let filePath = jsb.fileUtils.getWritablePath() +Global.Toolkit.md5(url)+'_capImage.png';\r\n            return  jsb.fileUtils.isFileExist(filePath)\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    // This is a temporary solution\r\n    filpYImage (data, width, height) {\r\n        // create the data array\r\n        let picData = new Uint8Array(width * height * 4);\r\n        let rowBytes = width * 4;\r\n        for (let row = 0; row < height; row++) {\r\n            let srow = height - 1 - row;\r\n            let start = srow * width * 4;\r\n            let reStart = row * width * 4;\r\n            // save the piexls data\r\n            for (let i = 0; i < rowBytes; i++) {\r\n                picData[reStart + i] = data[start + i];\r\n            }\r\n        }\r\n        return picData;\r\n    }\r\n\r\n   \r\n}"]}