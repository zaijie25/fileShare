{"version":3,"sources":["assets\\hall\\scripts\\logic\\hall\\ui\\msg\\WndMsg.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import WndBase, { DestoryType } from \"../../../core/ui/WndBase\";\r\n// import MsgModel from \"./MsgModel\";\r\nimport MsgModel from \"../../../hallcommon/model/MsgModel\"\r\n// import { HallRedSpotType } from \"../hall/HallModel\";\r\nimport HallPopMsgHelper, { PopWndName } from \"../../tool/HallPopMsgHelper\";\r\nimport NoticeView from \"./NoticeView\";\r\nimport MsgView from \"./MsgView\"\r\nimport { MsgEvent } from \"./MsgEvent\";\r\nimport { HallRedSpotType } from \"../../../hallcommon/model/HallModel\";\r\n\r\nclass WndMsg extends WndBase{\r\n    MsgModel: MsgModel;\r\n \r\n    noticeTitle: cc.Node; //公告标题\r\n    msgTitle: cc.Node;    //邮件标题\r\n    noticeCheck:cc.Node;\r\n    noticeUncheck:cc.Node;\r\n    msgCheck:cc.Node;\r\n    msgUncheck:cc.Node;\r\n\r\n\r\n    noticePanel: cc.Node;   \r\n\r\n    noticeView: NoticeView; //公告\r\n\r\n    msgPanel:cc.Node;\r\n\r\n    msgView:MsgView;    //邮件\r\n\r\n    noticeUnread:cc.Node;   //公告小红点\r\n    msgUnread:cc.Node;      //邮件小红点\r\n\r\n    private subViewPath :any = {\r\n        \"noticeView\":\"hall/prefabs/ui/msg/subView/NoticePanel\",\r\n        \"msgView\":\"hall/prefabs/ui/msg/subView/MsgPanel\"\r\n    }\r\n\r\n    private viewKeyTypeMap :any = {\r\n        \"noticeView\":NoticeView,\r\n        \"msgView\":MsgView\r\n    }\r\n\r\n\r\n    protected onOpen(){\r\n        // this.noticeTitle.isChecked = true;\r\n        this.changeTitle(false);\r\n        this.changeNoticePanel()\r\n        this.MsgModel.on(MsgEvent.ReadMsgCallBack, this, this.checkUnread);\r\n        this.checkUnread()\r\n    }\r\n\r\n    checkUnread(){\r\n        let MailFlag = this.MsgModel.CheckIsAnyMailNotRead()\r\n        let NoticeFlag = this.MsgModel.CheckIsAnyNoticeNotRead()\r\n        this.msgUnread.active = MailFlag;\r\n        this.noticeUnread.active = NoticeFlag; \r\n\r\n    }\r\n\r\n    //切换公告\r\n    changeNoticePanel(){\r\n        // this.msgView.active = false;\r\n        // this.noticeView.active = true;\r\n        this.msgView.subViewState = false;\r\n        this.noticeView.subViewState = true\r\n        this.changeTitle(false);\r\n    }\r\n    //切换邮件\r\n    changeMsgPanel(){\r\n        // this.noticeView.active = false;\r\n        // this.msgView.active = true;\r\n        this.noticeView.subViewState = false;\r\n        this.msgView.subViewState = true;\r\n        this.changeTitle(true);\r\n    }\r\n\r\n    protected onInit(){\r\n        this.name = \"WndMsg\";\r\n        this.layer = \"PopLayer\";\r\n        this.resPath = \"hall/prefabs/ui/msg/MsgUI\";\r\n        this.MsgModel = <MsgModel>Global.ModelManager.getModel(\"MsgModel\");\r\n        this.destoryType = DestoryType.ChangeScene;\r\n    }\r\n\r\n    protected initView(){\r\n        this.noticeTitle = this.getChild(\"bg1/topButton/noticeTitle\");\r\n        this.msgTitle = this.getChild(\"bg1/topButton/msgTitle\");\r\n        this.noticeCheck = this.getChild(\"bg1/topButton/noticeTitle/check\");\r\n        this.noticeUncheck = this.getChild(\"bg1/topButton/noticeTitle/uncheck\");\r\n        this.msgCheck = this.getChild(\"bg1/topButton/msgTitle/check\");\r\n        this.msgUncheck = this.getChild(\"bg1/topButton/msgTitle/uncheck\");\r\n\r\n        this.noticeTitle.on(\"click\", this.changeNoticePanel, this);\r\n        this.msgTitle.on(\"click\", this.changeMsgPanel, this);\r\n\r\n        this.noticeUnread = this.getChild(\"bg1/topButton/noticeTitle/unread\");\r\n        this.msgUnread = this.getChild(\"bg1/topButton/msgTitle/unread\");\r\n        this.noticeUnread.active = false;\r\n        this.msgUnread.active = false;\r\n\r\n        // this.noticePanel = this.getChild(\"NoticeNode\");\r\n        // this.noticeView = <NoticeView>this.addView(\"NoticeView\", this.noticePanel, NoticeView);\r\n        // this.msgPanel = this.getChild(\"MsgNode\");\r\n        // this.msgView = <MsgView>this.addView(\"MsgView\",this.msgPanel,MsgView);\r\n        this.addCommonClick(\"close\", this.closeWnd, this);\r\n        this.initSubViewClass(this.viewKeyTypeMap)\r\n        this.InitScripts()\r\n    }\r\n\r\n    changeTitle(isMsg:boolean){\r\n        this.msgCheck.active = isMsg;\r\n        this.msgUncheck.active = !isMsg;\r\n        this.noticeCheck.active = !isMsg;\r\n        this.noticeUncheck.active = isMsg;\r\n    }\r\n\r\n    async InitScripts() {\r\n        await this.initSubView(this.subViewPath,this.viewKeyTypeMap,this.getChild(\"contentNode\"))\r\n    }\r\n   \r\n    protected onClose() {\r\n        let MailFlag = this.MsgModel.CheckIsAnyMailNotRead()\r\n        let NoticeFlag = this.MsgModel.CheckIsAnyNoticeNotRead()\r\n        if (MailFlag || NoticeFlag) {\r\n            Global.Event.event(GlobalEvent.ShowRedSpot, [false, HallRedSpotType.Mail]);\r\n        }else {\r\n            Global.Event.event(GlobalEvent.CloseRedSpot, HallRedSpotType.Mail);\r\n        }\r\n        this.MsgModel.off(MsgEvent.ReadMsgCallBack, this, this.checkUnread);\r\n        HallPopMsgHelper.Instance.releaseLock(PopWndName.Mail);\r\n\r\n    }\r\n\r\n    private closeWnd(){\r\n        this.close();\r\n    }\r\n\r\n    protected onDispose(){\r\n    }\r\n    \r\n    \r\n}\r\nexport default WndMsg"]}