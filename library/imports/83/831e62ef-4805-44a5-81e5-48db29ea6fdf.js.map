{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\algo\\AES.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { BlockCipher } from '../lib/BlockCipher';\r\nimport { WordArray } from '../lib/WordArray';\r\nimport { BufferedBlockAlgorithmConfig } from '../lib/BufferedBlockAlgorithmConfig';\r\n\r\n// Define lookup tables\r\nconst SBOX: Array<number> = [];\r\nconst INV_SBOX: Array<number> = [];\r\nconst SUB_MIX_0: Array<number> = [];\r\nconst SUB_MIX_1: Array<number> = [];\r\nconst SUB_MIX_2: Array<number> = [];\r\nconst SUB_MIX_3: Array<number> = [];\r\nconst INV_SUB_MIX_0: Array<number> = [];\r\nconst INV_SUB_MIX_1: Array<number> = [];\r\nconst INV_SUB_MIX_2: Array<number> = [];\r\nconst INV_SUB_MIX_3: Array<number> = [];\r\n\r\n// Compute lookup tables\r\n(function () {\r\n    // Compute double table\r\n    const d = [];\r\n    for (let i = 0; i < 256; i++) {\r\n        if (i < 128) {\r\n            d[i] = i << 1;\r\n        } else {\r\n            d[i] = (i << 1) ^ 0x11b;\r\n        }\r\n    }\r\n\r\n    // Walk GF(2^8)\r\n    let x = 0;\r\n    let xi = 0;\r\n    for (let i = 0; i < 256; i++) {\r\n        // Compute sbox\r\n        let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\r\n        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\r\n        SBOX[x] = sx;\r\n        INV_SBOX[sx] = x;\r\n\r\n        // Compute multiplication\r\n        const x2 = d[x];\r\n        const x4 = d[x2];\r\n        const x8 = d[x4];\r\n\r\n        // Compute sub bytes, mix columns tables\r\n        let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\r\n        SUB_MIX_0[x] = (t << 24) | (t >>> 8);\r\n        SUB_MIX_1[x] = (t << 16) | (t >>> 16);\r\n        SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\r\n        SUB_MIX_3[x] = t;\r\n\r\n        // Compute inv sub bytes, inv mix columns tables\r\n        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\r\n        INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\r\n        INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\r\n        INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\r\n        INV_SUB_MIX_3[sx] = t;\r\n\r\n        // Compute next counter\r\n        if (!x) {\r\n            x = xi = 1;\r\n        } else {\r\n            x = x2 ^ d[d[d[x8 ^ x2]]];\r\n            xi ^= d[d[xi]];\r\n        }\r\n    }\r\n}());\r\n\r\n// Precomputed Rcon lookup\r\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\r\n\r\nexport class AES extends BlockCipher {\r\n    // 256 / 32\r\n    public static keySize = 8;\r\n\r\n    _nRounds!: number;\r\n\r\n    _key!: WordArray;\r\n\r\n    _keyPriorReset!: WordArray;\r\n\r\n    _keySchedule!: Array<number>;\r\n\r\n    _invKeySchedule!: Array<number>;\r\n\r\n    constructor(xformMode: number, key: WordArray, cfg?: BufferedBlockAlgorithmConfig) {\r\n        super(xformMode, key, cfg);\r\n    }\r\n\r\n    reset() {\r\n        // reset core values\r\n        super.reset();\r\n\r\n        // Skip reset of nRounds has been set before and key did not change\r\n        if (this._nRounds && this._keyPriorReset === this._key) {\r\n            return;\r\n        }\r\n\r\n        // Shortcuts\r\n        const key = this._keyPriorReset = this._key;\r\n        const keyWords = key.words;\r\n        const keySize = key.sigBytes / 4;\r\n\r\n        // Compute number of rounds\r\n        const nRounds = this._nRounds = keySize + 6;\r\n\r\n        // Compute number of key schedule rows\r\n        const ksRows = (nRounds + 1) * 4;\r\n\r\n        // Compute key schedule\r\n        const keySchedule: Array<number> = this._keySchedule = [];\r\n        for (let ksRow = 0; ksRow < ksRows; ksRow++) {\r\n            if (ksRow < keySize) {\r\n                keySchedule[ksRow] = keyWords[ksRow];\r\n            } else {\r\n                let t = keySchedule[ksRow - 1];\r\n\r\n                if (!(ksRow % keySize)) {\r\n                    // Rot word\r\n                    t = (t << 8) | (t >>> 24);\r\n\r\n                    // Sub word\r\n                    t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\r\n\r\n                    // Mix Rcon\r\n                    t ^= RCON[(ksRow / keySize) | 0] << 24;\r\n                } else if (keySize > 6 && ksRow % keySize === 4) {\r\n                    // Sub word\r\n                    t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\r\n                }\r\n\r\n                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\r\n            }\r\n        }\r\n\r\n        // Compute inv key schedule\r\n        const invKeySchedule: Array<number> = this._invKeySchedule = [];\r\n        for (let invKsRow = 0; invKsRow < ksRows; invKsRow++) {\r\n            const ksRow = ksRows - invKsRow;\r\n\r\n            let t;\r\n            if (invKsRow % 4) {\r\n                t = keySchedule[ksRow];\r\n            } else {\r\n                t = keySchedule[ksRow - 4];\r\n            }\r\n\r\n            if (invKsRow < 4 || ksRow <= 4) {\r\n                invKeySchedule[invKsRow] = t;\r\n            } else {\r\n                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\r\n                                           INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\r\n            }\r\n        }\r\n    }\r\n\r\n    encryptBlock(M: Array<number>, offset: number) {\r\n        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\r\n    }\r\n\r\n    decryptBlock(M: Array<number>, offset: number) {\r\n        // Swap 2nd and 4th rows\r\n        let t = M[offset + 1];\r\n        M[offset + 1] = M[offset + 3];\r\n        M[offset + 3] = t;\r\n\r\n        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\r\n\r\n        // Inv swap 2nd and 4th rows\r\n        t = M[offset + 1];\r\n        M[offset + 1] = M[offset + 3];\r\n        M[offset + 3] = t;\r\n    }\r\n\r\n    _doCryptBlock(\r\n        M: Array<number>,\r\n        offset: number,\r\n        keySchedule: Array<number>,\r\n        sub_mix_0: Array<number>,\r\n        sub_mix_1: Array<number>,\r\n        sub_mix_2: Array<number>,\r\n        sub_mix_3: Array<number>,\r\n        sbox: Array<number>\r\n    ) {\r\n        // Get input, add round key\r\n        let s0 = M[offset]     ^ keySchedule[0];\r\n        let s1 = M[offset + 1] ^ keySchedule[1];\r\n        let s2 = M[offset + 2] ^ keySchedule[2];\r\n        let s3 = M[offset + 3] ^ keySchedule[3];\r\n\r\n        // Key schedule row counter\r\n        let ksRow = 4;\r\n\r\n        // Rounds\r\n        for (let round = 1; round < this._nRounds; round++) {\r\n            // Shift rows, sub bytes, mix columns, add round key\r\n            const t0 = sub_mix_0[s0 >>> 24] ^ sub_mix_1[(s1 >>> 16) & 0xff] ^ sub_mix_2[(s2 >>> 8) & 0xff] ^ sub_mix_3[s3 & 0xff] ^\r\n                     keySchedule[ksRow++];\r\n            const t1 = sub_mix_0[s1 >>> 24] ^ sub_mix_1[(s2 >>> 16) & 0xff] ^ sub_mix_2[(s3 >>> 8) & 0xff] ^ sub_mix_3[s0 & 0xff] ^\r\n                     keySchedule[ksRow++];\r\n            const t2 = sub_mix_0[s2 >>> 24] ^ sub_mix_1[(s3 >>> 16) & 0xff] ^ sub_mix_2[(s0 >>> 8) & 0xff] ^ sub_mix_3[s1 & 0xff] ^\r\n                     keySchedule[ksRow++];\r\n            const t3 = sub_mix_0[s3 >>> 24] ^ sub_mix_1[(s0 >>> 16) & 0xff] ^ sub_mix_2[(s1 >>> 8) & 0xff] ^ sub_mix_3[s2 & 0xff] ^\r\n                     keySchedule[ksRow++];\r\n\r\n            // Update state\r\n            s0 = t0;\r\n            s1 = t1;\r\n            s2 = t2;\r\n            s3 = t3;\r\n        }\r\n\r\n        // Shift rows, sub bytes, add round key\r\n        const t0g = ((sbox[s0 >>> 24] << 24) | (sbox[(s1 >>> 16) & 0xff] << 16) | (sbox[(s2 >>> 8) & 0xff] << 8) | sbox[s3 & 0xff]) ^\r\n                    keySchedule[ksRow++];\r\n        const t1g = ((sbox[s1 >>> 24] << 24) | (sbox[(s2 >>> 16) & 0xff] << 16) | (sbox[(s3 >>> 8) & 0xff] << 8) | sbox[s0 & 0xff]) ^\r\n                    keySchedule[ksRow++];\r\n        const t2g = ((sbox[s2 >>> 24] << 24) | (sbox[(s3 >>> 16) & 0xff] << 16) | (sbox[(s0 >>> 8) & 0xff] << 8) | sbox[s1 & 0xff]) ^\r\n                    keySchedule[ksRow++];\r\n        const t3g = ((sbox[s3 >>> 24] << 24) | (sbox[(s0 >>> 16) & 0xff] << 16) | (sbox[(s1 >>> 8) & 0xff] << 8) | sbox[s2 & 0xff]) ^\r\n                    keySchedule[ksRow++];\r\n\r\n        // Set output\r\n        M[offset]     = t0g;\r\n        M[offset + 1] = t1g;\r\n        M[offset + 2] = t2g;\r\n        M[offset + 3] = t3g;\r\n    }\r\n}"]}