{"version":3,"sources":["assets\\hall\\scripts\\logic\\hallcommon\\model\\ZhuanpanModel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ModelBase from \"../../../framework/model/ModelBase\";\r\nimport HallPopMsgHelper, { PopWndName } from \"../../hall/tool/HallPopMsgHelper\";\r\nimport HallBtnHelper from \"../../hall/ui/hall/views/HallBtnHelper\";\r\n\r\nimport { ActivityConstants, ActivityType } from \"../../hall/ui/Activity/ActivityConstants\";\r\n\r\n\r\n/**\r\n * 活动：转盘抽奖 数据类\r\n */\r\nexport default class ZhuanpanModel extends ModelBase{\r\n    /**\r\n     * 全局单例\r\n     */\r\n    static instance:ZhuanpanModel = null;\r\n    protected onInit(){\r\n        ZhuanpanModel.instance = this;\r\n    }\r\n\r\n    /**\r\n     * 刷新转盘 积分数据\r\n     */\r\n    static RefreshPanelUI = \"RefreshPanelUI\"\r\n\r\n    /**\r\n     * 刷新轮播数据\r\n     */\r\n    static RefreshRecordUI = \"RefreshRecordUI\"\r\n\r\n\r\n    /**\r\n     * 刷新积分\r\n     */\r\n\r\n     static RefreshScore = \"RefreshScore\"\r\n\r\n    /**\r\n     * 开始抽奖\r\n     */\r\n    static StartDrawLucky = \"StartDrawLucky\"\r\n\r\n    awardResult = -1\r\n    /**\r\n     * 数据对象\r\n     */\r\n    data: any = null;\r\n    /**\r\n     * 轮播数据集合\r\n     */\r\n    lunboDataArr = [];\r\n\r\n    /**\r\n     * 是否开启此活动\r\n     */\r\n    bOpen:boolean = false;\r\n\r\n    /**\r\n     * 登录是否自动打开界面\r\n     */\r\n    private _Status:boolean = false;\r\n    get Status()\r\n    {\r\n        return this._Status;\r\n    }\r\n\r\n    SetStatus(status)\r\n    {\r\n        this._Status = status;\r\n        // if (status){\r\n        //     //每次登录自动弹窗\r\n        //     HallPopMsgHelper.Instance.addMsgList(PopWndName.Zhuanpan, ()=>{\r\n        //         HallPopMsgHelper.Instance.addLock(PopWndName.Zhuanpan);\r\n        //         HallBtnHelper.WndZhuanpanOpen();\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    get Name()\r\n    {\r\n        return \"ZhuanpanModel\";\r\n    }\r\n    \r\n    clear()\r\n    {\r\n        this.SetStatus(false);\r\n    }\r\n\r\n    /**\r\n     * 请求活动配置\r\n     */\r\n    reqActivityCfg(){\r\n        let _param = {\r\n        }\r\n\r\n        var self = this;\r\n        Global.HallServer.send(NetAppface.mod, \"GetActivityCfg\", _param,\r\n            function (data : any){\r\n                //成功\r\n                Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, false)\r\n                var dataArr = data[\"data\"];\r\n                for(var i = 0; i < dataArr.length; i++){\r\n                    var obj = dataArr[i];\r\n                    if(obj.atype == ActivityType.zhuanpan){\r\n                        self.data = obj.cfg;\r\n                        self.event(ZhuanpanModel.RefreshPanelUI,self.data)\r\n                        self.event(ZhuanpanModel.RefreshScore)\r\n                    }\r\n                }\r\n            }.bind(this),\r\n\r\n            function (data : any) {\r\n                //失败\r\n                // self.bOpen = false;\r\n                Global.Event.event(ActivityConstants.SHOW_ACT_WAITTING, false)\r\n                Logger.error(\"zhuanpanModel reqActivityCfg failed\");\r\n            }.bind(this),\r\n            false\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 请求抽奖\r\n     */\r\n    reqChoujiang(type){\r\n        let _param = {\r\n            \"atype\": ActivityType.zhuanpan,\r\n            \"type\": type,\r\n        }\r\n\r\n        var self = this;\r\n        Global.HallServer.sendWithNoRetry(NetAppface.mod, \"ReceiveActivityAward\", _param,\r\n            function (data : any){\r\n                //成功\r\n                var award = data[\"award\"];\r\n                if(award==0){\r\n                    Global.UI.fastTip(\"转盘活动已结束！\");\r\n                    return;\r\n                }\r\n                var num = data[\"num\"];\r\n                var coin = data[\"coin\"];\r\n                self.data.coin = coin;\r\n                if(coin < 50){\r\n                    Global.Event.event(ActivityConstants.HIDE_RED_PORT,ActivityType.zhuanpan)\r\n                }\r\n                self.awardResult = award;  \r\n                self.event(ZhuanpanModel.StartDrawLucky,num) \r\n                self.event(ZhuanpanModel.RefreshScore)             \r\n                //ZhuanpanJifen.instance.UpdateUI();\r\n\r\n                //ZhuanpanChoujiang.instance.StartChoujiangAnimation(num);\r\n\r\n                \r\n            }.bind(this),\r\n\r\n            function (data : any) {\r\n                //失败\r\n                Logger.error(\"zhuanpanModel reqChoujiang failed\");\r\n            }.bind(this),\r\n            false\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 请求轮播数据\r\n     */\r\n    reqLunbo(startIndex:number = -1){\r\n        let _param = {\r\n            \"id\": 0,\r\n        }\r\n\r\n        var self = this;\r\n        Global.HallServer.send(NetAppface.mod, \"GetActivityAwardRecord\", _param,\r\n            function (data : any){\r\n                //成功\r\n                self.lunboDataArr = data[\"data\"];\r\n                self.event(ZhuanpanModel.RefreshRecordUI,startIndex)\r\n            }.bind(this),\r\n\r\n            function (data : any) {\r\n                //失败\r\n                Logger.error(\"zhuanpanModel reqLunbo failed:\" + JSON.stringify(data));\r\n                \r\n            }.bind(this),\r\n            false\r\n        );\r\n    }\r\n}"]}