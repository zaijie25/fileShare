{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\tool\\UrlUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 对Url操作的工具类\r\n * @author Peter\r\n * \r\n*/\r\n\r\nimport HallStorageKey from \"../../hallcommon/const/HallStorageKey\";\r\nimport { ServerUrl } from \"../setting/ServerRoutes\";\r\n\r\n\r\nexport class UrlUtil {\r\n    private mutiLinesSplit = [\",\",\";\",\"|\"]\r\n\r\n    public getHostFromUrl(url: string) {\r\n        if (url == null || url == \"\")\r\n            return url;\r\n        let arrs = url.split(\"//\");\r\n        let tmpUrl = url;\r\n        if (arrs.length > 1)\r\n            tmpUrl = arrs[1];\r\n        arrs = tmpUrl.split(\"/\");\r\n        let host = arrs[0];\r\n        if (host.indexOf(\":\") > -1)\r\n            host = host.split(\":\")[0];\r\n        return host;\r\n    }\r\n\r\n    public getPortFromUrl(url: string) {\r\n        if (url == null || url == \"\")\r\n            return null;\r\n        let arrs = url.split(\"//\");\r\n        let tmpUrl = url;\r\n        if (arrs.length > 1)\r\n            tmpUrl = arrs[1];\r\n        arrs = tmpUrl.split(\"/\");\r\n        let hostUrl = arrs[0];\r\n        let port = null\r\n        if (hostUrl.indexOf(\":\") > -1)\r\n            port = hostUrl.split(\":\")[1];\r\n        if (port && Number(port)) {\r\n            return Number(port)\r\n        }\r\n        return null;\r\n    }\r\n\r\n    domainURI(str_url) {\r\n        if (!str_url) {\r\n            return \"\"\r\n        }\r\n        let domain = str_url.split('/')\r\n        let domainUrl = ''\r\n        if (domain[2]) {\r\n            domainUrl = domain[0] + \"//\" + domain[2]\r\n        }\r\n        return domainUrl\r\n    }\r\n\r\n    public getHttpReffer(url: string) {\r\n        let urlSubStr = this.domainURI(url)\r\n        let newUrl = url.replace(urlSubStr, \"\");\r\n        let sign = this.getPlatformSign(newUrl)\r\n        // Logger.error(\"getHttpReffer new url = \" + newUrl + \" sign = \" + sign)\r\n        return sign;\r\n    }\r\n\r\n    public getPlatformSign(content: string, key?: string) {\r\n        if (!key) {\r\n            key = Global.Setting.signKey\r\n        }\r\n        let sign = null;\r\n        if (cc.sys.isNative) {\r\n            let retObj = Global.NativeEvent.getLoginSign(key, content)\r\n            if (retObj && retObj.result == 0) {\r\n                sign = retObj.funcParam\r\n            } else {\r\n                sign = this.getSign(key, content);\r\n            }\r\n        } else {\r\n            sign = this.getSign(key, content);\r\n        }\r\n        return sign;\r\n    }\r\n\r\n    public getSign(key: string, content: string) {\r\n        let msg: string = Global.AESUtil.md5(content);\r\n        msg = msg.substring(0, msg.length / 2)\r\n        let checkKey = Global.AESUtil.md5(key)\r\n        checkKey = checkKey.substring(checkKey.length / 2)\r\n        let data = Global.AESUtil.md5(msg + checkKey);\r\n        data = data.substring(5, 15)\r\n        return data;\r\n    }\r\n\r\n\r\n    public dealServerUrl(serverUrl: ServerUrl, port: number) {\r\n        let address = serverUrl.address\r\n        let protocol = serverUrl.protocol\r\n        if (address.indexOf(\"...\") > 0) {\r\n            //强制转ws https 强转http\r\n            if (protocol.startsWith(\"wss\")) {\r\n                protocol = \"ws://\"\r\n            }\r\n            let hostArray = address.split(\"...\")\r\n            let ipPortUrl = hostArray[0]\r\n            if (ipPortUrl.indexOf(\":\") > 0) {\r\n                if (protocol.startsWith(\"https\")) {\r\n                    protocol = \"http://\"\r\n                } else {\r\n                    Logger.error(\"head not startsWith https \")\r\n                }\r\n            } else {\r\n                Logger.error(\"ipPortUrl not :\")\r\n            }\r\n            serverUrl.protocol = protocol\r\n        }\r\n        if (port != null && port != 0 && port != 80 && port != 443)\r\n            serverUrl.port = port\r\n    }\r\n\r\n\r\n    /**\r\n     * 返回wss证书文件路径\r\n     */\r\n    public getCacertPath() {\r\n\r\n        if (jsb && jsb.fileUtils.isFileExist(\"cacert.pem\")) {\r\n            let fileFullPath = jsb.fileUtils.fullPathForFilename(\"cacert.pem\")\r\n            Logger.error(\"use native path\", fileFullPath);\r\n            return fileFullPath;\r\n        }\r\n        //return jsb.fileUtils.getWritablePath() + '/gameUpdate/hall/' + cc.url.raw(\"resources/hall/cacert1.pem\");\r\n        return cc.url.raw(\"resources/hall/cacert1.pem\");\r\n    }\r\n\r\n\r\n    public DealWithUrl(url: string) {\r\n\r\n        if (typeof (url) != \"string\" || !url) {\r\n            Logger.error(\"链接格式不对\")\r\n            return null\r\n        }\r\n        return url.replace(\"\\t\", \"\").trim()\r\n\r\n    }\r\n\r\n\r\n    //获取Url 前缀flag\r\n    public getUrlParamCommonPrefex() {\r\n        let appId = this.EncodeAppid(Global.Setting.appId);\r\n        // Logger.error(\"appId = \" + appId)\r\n        return \"_\" + appId + \"/\"\r\n    }\r\n\r\n\r\n    decimalDict = \"fgHijUvWXAbcdEyzKLMnOpqRst\"\r\n\r\n    // 10进制转任意进制\r\n    public EncodeAppid(appid: number) {\r\n        let new_num_str = \"\"\r\n        let remainder = 0\r\n        let remainder_string = \"\"\r\n        let nn = 26\r\n        let num = Number(appid)\r\n\r\n        do {\r\n            remainder = num % nn\r\n            if (nn > remainder && remainder >= 0) {\r\n                remainder_string = this.decimalDict.substring(remainder, remainder + 1)\r\n            } else {\r\n                remainder_string = remainder.toString()\r\n            }\r\n            new_num_str = remainder_string + new_num_str\r\n            num = Math.floor(num / nn)\r\n        } while (num != 0)\r\n\r\n        return new_num_str\r\n    }\r\n\r\n\r\n     //获取url 参数\r\n     public getUrlCommonParam() {\r\n        // let encodeUrl = Global.Toolkit.getRequestEncodeData()\r\n        let timeStr = this.getTimeEndFixParam();\r\n        let param = \"uid=\" + Global.PlayerData.uid + \"&token=\" + Global.PlayerData.token + \"&appver=\" + Global.Setting.SystemInfo.appVersion + \"&os=\" + Global.Toolkit.getOsType() + \"&m=\" + timeStr;\r\n        return param;\r\n    }\r\n\r\n    \r\n     //获取登录前和登录中通用参数\r\n     public getLoginCommonParam(){\r\n        let uid = Number(Global.Setting.storage.get(HallStorageKey.Uid)) || 0;\r\n        let timeStr = this.getTimeEndFixParam();\r\n        let param = \"uid=\" + uid  + \"&appver=\" + Global.Setting.SystemInfo.appVersion + \"&os=\" + Global.Toolkit.getOsType() + \"&n=\" + (new Date()).valueOf() + \"&m=\" + timeStr ;\r\n        return param;\r\n    }\r\n\r\n  //获取时间字符串\r\n  public getTimeEndFixParam() {\r\n    let date = new Date()\r\n    let timeStr = date.getHours().toString() + date.getMinutes().toString() + date.getSeconds().toString() + date.getMilliseconds()\r\n    return timeStr\r\n}\r\n\r\n    //处理http sign\r\n    public dealHttpSign(serverUrl: ServerUrl) {\r\n        let url = serverUrl.getUrl()\r\n        let httpSignInfo = { \"sign_url\": \"\", \"headSign\": \"\", \"endSign\": \"\" }\r\n        let sign_url = this.refreshSuffixOperTime(url)\r\n        let s_value = this.getQueryString(sign_url, \"s\")\r\n        let headSign = \"\"\r\n        let endSign = \"\"\r\n        let linkSymbol = sign_url.indexOf('?') > 0 && \"&s=\" || \"?s=\";\r\n        if (!s_value) {\r\n            headSign = this.getHttpReffer(sign_url)\r\n            endSign = this.getHttpReffer(sign_url + linkSymbol + headSign)\r\n            // Logger.error(\"dealHttpSign url with 4444\")\r\n            sign_url = sign_url + linkSymbol + endSign\r\n        } else {\r\n            let replaceUrl = sign_url.replace(\"&s=\" + s_value, \"\")\r\n            headSign = this.getHttpReffer(replaceUrl)\r\n            endSign = this.getHttpReffer(replaceUrl + linkSymbol + headSign)\r\n            // Logger.error(\"dealHttpSign url with 5555\")\r\n            sign_url = replaceUrl + linkSymbol + endSign\r\n        }\r\n        // Logger.error(\"dealHttpSign before sign_url = \" + sign_url)\r\n        if (serverUrl.isEncrptUrl) {\r\n            let sign_url_host = this.getHostFromUrl(sign_url)\r\n            // let sign_url_port = this.getPortFromUrl(sign_url)\r\n            let sign_url_array = sign_url.split(sign_url_host)\r\n            if (sign_url_array && sign_url_array.length > 0) {\r\n                let sign_url_first = sign_url_array[0]\r\n                let sign_url_second = sign_url_array[1]\r\n                let encryptStr = Global.AESUtil.aesEncryptWithCommonKey(sign_url_second)\r\n                // let decryptStr = this.aesDecrypt(encryptStr)\r\n                // Logger.error(\"decryptStr = \" + decryptStr.trim())\r\n                sign_url = sign_url_first + sign_url_host + \"/\" + encryptStr\r\n            }\r\n        }\r\n        // Logger.error(\"dealHttpSign after sign_url = \" + sign_url)\r\n\r\n        httpSignInfo.sign_url = sign_url\r\n        httpSignInfo.headSign = headSign\r\n        httpSignInfo.endSign = endSign\r\n        return httpSignInfo\r\n    }\r\n\r\n\r\n\r\n    //对socket url 处理\r\n    public dealWebSocketUrl(serverUrl: ServerUrl) {\r\n        if (typeof (serverUrl) == 'string') {\r\n            //捕鱼会发string url过来\r\n            Logger.log(\"dealWebSocketUrl url = string\")\r\n            return serverUrl\r\n        }\r\n        let address = serverUrl.getUrl()\r\n\r\n        if (address.indexOf(\"...\") > 0) {\r\n            Logger.log(\"dealWebSocketUrl url contains ... \")\r\n            let httpSignInfo = this.dealHttpSign(serverUrl)\r\n            let sign_url = httpSignInfo.sign_url\r\n            return sign_url\r\n        }\r\n\r\n        //20016版本开始 ios支持wss 支持httpDNS\r\n        if ( address.startsWith(\"wss\")) {\r\n            //wss协议的自动返回\r\n            Logger.log(\"dealWebSocketUrl address start wss  version < 20016\")\r\n            let httpSignInfo = this.dealHttpSign(serverUrl)\r\n            let sign_url = httpSignInfo.sign_url\r\n            return sign_url\r\n        }\r\n\r\n        Logger.log(\"dealWebSocketUrl getHttpRequestDNSInfo before \" + serverUrl.printSelf())\r\n        Global.DNS.getHttpRequestDNSInfo(serverUrl, 0);\r\n        Logger.log(\"dealWebSocketUrl getHttpRequestDNSInfo after \" + serverUrl.printSelf())\r\n        let httpSignInfo = this.dealHttpSign(serverUrl)\r\n        let sign_url = httpSignInfo.sign_url\r\n        if (!sign_url) {\r\n            Logger.log(\"dealWebSocketUrl sign_url error \" + serverUrl.getUrl())\r\n            return\r\n        }\r\n        let url = sign_url\r\n        Logger.log(\"dealWebSocketUrl url \", url)\r\n\r\n        return url\r\n    }\r\n\r\n    public getQueryString(suffix, name) {\r\n        let reg = new RegExp('(\\\\?|&)' + name + '=([^&?]*)', 'i');\r\n        let r = suffix.match(reg);\r\n        if (r != null) {\r\n            return unescape(r[2]);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public replaceUrlParmVal(url, paramName, replaceValue) {\r\n        let urlRet = url\r\n        if (url) {\r\n            let re = eval('/(' + paramName + '=)([^&]*)/gi');\r\n            let nUrl = url.replace(re, paramName + '=' + replaceValue);\r\n            urlRet = nUrl\r\n        }\r\n        return urlRet\r\n\r\n    }\r\n\r\n    public refreshSuffixOperTime(suffix) {\r\n        if (suffix) {\r\n            let n_value = this.getQueryString(suffix, \"n\")\r\n            // Logger.error(\"refreshSuffixOperTime n_value = \" + n_value)\r\n            if (n_value) {\r\n                suffix = this.replaceUrlParmVal(suffix, \"n\", (new Date()).valueOf())\r\n            }\r\n            let m_value = this.getQueryString(suffix, \"m\")\r\n            // Logger.error(\"refreshSuffixOperTime m_value = \" + m_value)\r\n            if (m_value) {\r\n                suffix = this.replaceUrlParmVal(suffix, \"m\", this.getTimeEndFixParam())\r\n            }\r\n            // Logger.error(\"refreshSuffixOperTime suffix = \" + suffix)\r\n        }\r\n        return suffix\r\n\r\n    }\r\n\r\n    public refreshSuffixRetryTime(suffix: string, times: number) {\r\n\r\n        if (!suffix)\r\n            return suffix;\r\n        let c_value = this.getQueryString(suffix, \"c\");\r\n        if (!c_value)\r\n            suffix = suffix + \"&c=\" + times;\r\n        else\r\n            suffix = this.replaceUrlParmVal(suffix, \"c\", times);\r\n        return suffix;\r\n    }\r\n\r\n\r\n\r\n    //判断是否是IP\r\n    public checkIsIp(ipAddress) {\r\n        if (ipAddress) {\r\n            let re = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/\r\n            if (re.test(ipAddress)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    //获取自签名证书路径\r\n    public getSelfSignCerPath(cerName) {\r\n        if (cc.sys.isNative) {\r\n            if (jsb && jsb.fileUtils.isFileExist(cerName)) {\r\n                let fileFullPath = jsb.fileUtils.fullPathForFilename(cerName)\r\n                Logger.log(\"getSelfSignCerPath cerName fileFullPath \", cerName, fileFullPath);\r\n                return fileFullPath;\r\n            } else {\r\n                Logger.log(\"cerName not exist \" + cerName)\r\n            }\r\n        } else {\r\n            return cc.url.raw(\"resources/hall/cert/\" + cerName + \".crt\");\r\n        }\r\n    }\r\n\r\n\r\n    //设置线路的是否需要证书\r\n    public setRouteUrlCer(serverUrl: ServerUrl) {\r\n        let cerDirFiles = Global.Setting.SystemInfo.cerDirFiles\r\n        if (cerDirFiles && cerDirFiles.length > 0) {\r\n            let isHasCerFile = false;\r\n            for (let i = 0; i < cerDirFiles.length; i++) {\r\n                let fileFullName = cerDirFiles[i]\r\n                if (fileFullName && (fileFullName.indexOf(\".cer\") > -1) || fileFullName.indexOf(\".crt\") > -1) {\r\n                    let tempArray = fileFullName.split(\"/\")\r\n                    let lastFileName = tempArray[tempArray.length - 1]\r\n                    let fileName = lastFileName.replace(\".cer\", \"\")\r\n                    let addressHost = serverUrl.addressHost.toLowerCase()\r\n                    if (fileName) {\r\n                        if (addressHost.indexOf(fileName.toLowerCase()) > -1) {\r\n                            Logger.log(\"cer file name = \" + fileName)\r\n                            Logger.log(\"cer fileFullName  = \" + fileFullName)\r\n                            serverUrl.cerName = fileFullName\r\n                            serverUrl.cerPath = fileFullName\r\n                            isHasCerFile = true;\r\n                            break;\r\n                        } else {\r\n                            // Logger.log(\"addressHost \" + addressHost + \" not contain cer host \" + fileName)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n            //没有该域名的cer文件\r\n            Logger.log(\"isHasCerFile = \" + isHasCerFile)\r\n            \r\n        } else {\r\n            Logger.log(\"cerDirFiles has no file\")\r\n           \r\n        }\r\n    }\r\n\r\n\r\n\r\n    //检查是否是多条地址同一个host\r\n    public checkIsMutiLinesSameHost(host:string){\r\n        let ret = false\r\n        if (!host){\r\n            return \r\n        }\r\n        // Logger.error(\"checkIsMutiLinesSameHost enter\" )\r\n        for (let i = 0 ;i<this.mutiLinesSplit.length;i++){\r\n            let splitStr = this.mutiLinesSplit[i]\r\n            if (host.indexOf(splitStr) > 0){\r\n                ret = true\r\n                break;\r\n            }\r\n        }\r\n        // Logger.error(\"checkIsMutiLinesSameHost ret \" + ret )\r\n        return ret\r\n    }\r\n    \r\n    //获取同host多条线路集合\r\n    public getMutiLinesSameHost(host:string){\r\n        let lines = null;\r\n        if (!host){\r\n            return \r\n        }\r\n        for (let i = 0;i< this.mutiLinesSplit.length;i++){\r\n            let splitStr = this.mutiLinesSplit[i]\r\n            if (host.indexOf(splitStr) > 0 ){\r\n                lines = host.split(splitStr)\r\n                break;\r\n            }\r\n        }\r\n        // Logger.error(\"getMutiLinesSameHost lines \" + JSON.stringify(lines) )\r\n        return lines\r\n\r\n    }\r\n\r\n    public transferUrlArrayToRoutes(urlarray)\r\n    {\r\n        if(!urlarray || urlarray.length == 0)\r\n        {\r\n            return urlarray\r\n        }\r\n        let routes = []\r\n\r\n        for (let index = 0; index < urlarray.length; index++) {\r\n            let url = urlarray[index];\r\n            let item :any = {\r\n                \"host\":url,\r\n                \"url_type\":1,\r\n                \"us_port\":0,\r\n                \"lo_type\":0\r\n            }\r\n            routes.push(item)\r\n        }\r\n        return routes\r\n    }\r\n\r\n    //处理url全部下发方式多线路同host问题\r\n    public dealFullUrlWithMutiLinesSameHost(urls){\r\n        // Logger.error(\"dealFullUrlWithMutiLinesSameHost enter \" + JSON.stringify(urls))\r\n        let mutiLineMap = cc.js.createMap()\r\n        if (urls && urls.length > 0){\r\n            for (let i = 0 ;i < urls.length;i ++){\r\n                let url = urls[i]\r\n                let protocol = ''\r\n                let address = ''\r\n                let port = 0\r\n                let suffix = ''\r\n                if (url.startsWith(\"https\")){\r\n                    protocol = \"https\"\r\n                }else if (url.startsWith(\"http\")){\r\n                    protocol = \"http\"\r\n                }else if (url.startsWith(\"wss\")){\r\n                    protocol = \"wss\"\r\n                }else if (url.startsWith(\"ws\")){\r\n                    protocol = \"ws\"\r\n                }\r\n                let arrs = url.split(\"//\");\r\n                let tmpUrl = url;\r\n                if (arrs.length > 1)\r\n                    tmpUrl = arrs[1];\r\n                arrs = tmpUrl.split(\"/\");\r\n                let host = arrs[0];\r\n                if (host.indexOf(\":\") > -1)\r\n                {\r\n                    address = host.split(\":\")[0];\r\n                    let port = host.split(\":\")[1];\r\n                    if (port && Number(port)) {\r\n                        port = Number(port)\r\n                    }\r\n                }else {\r\n                    address = host\r\n                }\r\n                if (arrs.length > 1){\r\n                    for (let i = 1;i<arrs.length;i++){\r\n                        suffix = suffix + \"/\" + arrs[i]\r\n                    }\r\n                }\r\n                // Logger.error(\"dealFullUrlWithMutiLinesSameHost address \" + address)\r\n                if (address && address.indexOf(\"...\") > 0){\r\n                    let address_array = address.split(\"...\");\r\n                    if (address_array && address_array.length > 0){\r\n                        let address_real = address_array[0]\r\n                        let address_host = address_array[1]\r\n                        if (this.checkIsMutiLinesSameHost(address_real)){\r\n                            // Logger.error(\"checkIsMutiLinesSameHost address_real \" + address_real)\r\n                            let mutiLines = this.getMutiLinesSameHost(address_real)\r\n                            if (mutiLines && mutiLines.length > 0){\r\n                                let curLines = []\r\n                                // Logger.error(\"checkIsMutiLinesSameHost mutiLines \" + JSON.stringify(mutiLines))\r\n                                for (let i = 0;i <mutiLines.length;i++){\r\n                                    let lineHost = mutiLines[i]\r\n                                    let linePort = port ? \":\" + port : \"\"\r\n                                    let lineUrl = protocol + \"://\" + lineHost + \"...\" + address_host + linePort + suffix\r\n                                    curLines.push(lineUrl)\r\n                                }\r\n                                mutiLineMap[url] = curLines\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Logger.error(\"mutiLineMap \" ,JSON.stringify(mutiLineMap))\r\n            for (let key in mutiLineMap){\r\n                let value = mutiLineMap[key]\r\n                let key_index = -1;\r\n                for (let i =0;i<urls.length;i++){\r\n                    let url_value = urls[i]\r\n                    if (url_value == key){\r\n                        key_index = i\r\n                    }\r\n                }\r\n                // Logger.error(\"key_index \" + key_index)\r\n                if (key_index > -1){\r\n                    urls.splice(key_index,1)\r\n                    urls = value.concat(urls)\r\n                }   \r\n                Logger.error(\"dealFullUrlWithMutiLinesSameHost urls = \" + JSON.stringify(urls))\r\n            }\r\n            \r\n        }\r\n        return urls\r\n    }\r\n    public formatServerUrl(head: string, host: string, port: number) {\r\n        let url = ''\r\n        // Logger.error(\"formatServerUrl head = \" + head)\r\n        // Logger.error(\"formatServerUrl host = \" + host)\r\n        // Logger.error(\"formatServerUrl port = \" + port)\r\n\r\n        //host带域名\r\n        if (host.indexOf(\"...\") > 0) {\r\n            //强制转ws https 强转http\r\n            if (head.startsWith(\"wss\")) {\r\n                head = \"ws://\"\r\n            }\r\n            let hostArray = host.split(\"...\")\r\n            let ipPortUrl = hostArray[0]\r\n            if (ipPortUrl.indexOf(\":\") > 0) {\r\n                if (head.startsWith(\"https\")) {\r\n                    head = \"http://\"\r\n                } else {\r\n                    Logger.error(\"head not startsWith https \")\r\n                }\r\n            } else {\r\n                Logger.error(\"ipPortUrl not :\")\r\n            }\r\n\r\n        }\r\n        url = head + host;\r\n        if (port != null && port != 0 && port != 80 && port != 443)\r\n            url = url + \":\" + port;\r\n        // Logger.error(\"formatServerUrl url = \" + url)\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param url 链接\r\n     * @param param 需要替换的字段\r\n     * @param name 目标字段\r\n     */\r\n    public replaceUrlParam(url,paramList)\r\n    {\r\n        if (!url)\r\n        {\r\n            return url;\r\n        }\r\n        url = Global.Toolkit.strReplaceCtrChar(url)\r\n        let urlParamArr = url.split('?')\r\n        if (urlParamArr.length <2)\r\n        {\r\n            Logger.error(\"没有额外参数\")\r\n            return url\r\n        }\r\n        let tmpParam :string = urlParamArr[1]\r\n        for(let i = 0;i<paramList.length;i++)\r\n        {\r\n            let param = paramList[i]\r\n            let lastIndex = urlParamArr[1].lastIndexOf(param[\"param\"])\r\n            if (lastIndex != -1)\r\n            {\r\n                urlParamArr[1] = urlParamArr[1].substr(0, lastIndex) + param[\"value\"]+ urlParamArr[1].substr(lastIndex + param[\"param\"].length);\r\n            }\r\n        }\r\n        \r\n\r\n        return  urlParamArr.join('?')\r\n    }\r\n\r\n}"]}