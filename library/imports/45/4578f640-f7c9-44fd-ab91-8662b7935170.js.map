{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\enc\\Utf8.ts"],"names":[],"mappings":";;;;;;;AAEA,mCAAkC;AAElC;IAAA;IAkCA,CAAC;IAjCG;;;;;;;;;;OAUG;IACW,cAAS,GAAvB,UAAwB,SAAoB;QACxC,IAAI;YACA,OAAO,kBAAkB,CAAC,MAAM,CAAC,eAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAClE;QAAC,OAAM,CAAC,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SAC3C;IACL,CAAC;IAED;;;;;;;;;;OAUG;IACW,UAAK,GAAnB,UAAoB,OAAe;QAC/B,OAAO,eAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IACL,WAAC;AAAD,CAlCA,AAkCC,IAAA;AAlCY,oBAAI;AAoCjB,8EAA8E;AAC9E,IAAM,CAAC,GAAa,IAAI,CAAC","file":"","sourceRoot":"/","sourcesContent":["import { Encoding } from './Encoding';\r\nimport { WordArray } from '../lib/WordArray';\r\nimport { Latin1 } from './Latin1';\r\n\r\nexport class Utf8 {\r\n    /**\r\n     * Converts a word array to a UTF-8 string.\r\n     *\r\n     * @param wordArray The word array.\r\n     *\r\n     * @return The UTF-8 string.\r\n     *\r\n     * @example\r\n     *\r\n     *     let utf8String = Utf8.stringify(wordArray);\r\n     */\r\n    public static stringify(wordArray: WordArray): string {\r\n        try {\r\n            return decodeURIComponent(escape(Latin1.stringify(wordArray)));\r\n        } catch(e) {\r\n            throw new Error('Malformed UTF-8 data');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a UTF-8 string to a word array.\r\n     *\r\n     * @param utf8Str The UTF-8 string.\r\n     *\r\n     * @return The word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     let wordArray = Utf8.parse(utf8String);\r\n     */\r\n    public static parse(utf8Str: string): WordArray {\r\n        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\r\n    }\r\n}\r\n\r\n// type guard for the formatter (to ensure it has the required static methods)\r\nconst _: Encoding = Utf8;"]}