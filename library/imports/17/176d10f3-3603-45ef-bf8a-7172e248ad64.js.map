{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\tool\\ReportTool.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import HallStorageKey from \"../../hallcommon/const/HallStorageKey\";\r\nimport { ServerUrl } from \"../setting/ServerRoutes\";\r\n\r\nexport class ReportTool {\r\n    //获取到nativeparam\r\n    public static REPORT_TYPE_OPEN = 1;\r\n    //获取appdata之后 开始热更之前\r\n    public static REPORT_TYPE_START_CHECKVERSION = 2;\r\n    //登录成功上报\r\n    public static REPORT_TYPE_LOGIN = 3;\r\n\r\n    //HTTP 异常上报\r\n    public static REPORT_TYPE_HTTP_ERROR = \"HTTP_ERROR\";\r\n    //data 异常上报\r\n    public static REPORT_TYPE_DATA_ERROR = \"DATA_ERROR\"\r\n    //checkversion 异常上报\r\n    public static REPORT_TYPE_CHECKVERSION_ERROR = \"CHECKVERSION_ERROR\"\r\n    //login 异常上报\r\n    public static REPORT_TYPE_LOGIN_ERROR = \"LOGIN_ERROR\"\r\n    //httpDNS 异常上报\r\n    public static REPORT_TYPE_HTTPDNS_ERROR = \"HTTPDNS_ERROR\"\r\n    //热更失败上报\r\n    public static REPORT_TYPE_HOT_UPDATE_ERROR = \"HOTUPDATE_ERROR\"\r\n    //解析json失败上报\r\n    public static REPORT_TYPE_JSON_ERROR = \"JSON_ERROR\"\r\n    //初始化T盾失败\r\n    public static REPORT_TYPE_INIT_DUN_ERROR = \"INIT_DUN_ERROR\"\r\n    //socket 上报\r\n    public static REPORT_TYPE_SOCKET_ERROR = \"SOCKET_ERROR\";\r\n    //测试线路 上报\r\n    public static REPORT_TYPE_TEST_ROUTE = \"TEST_ROUTE\";\r\n    //初始化盾成功\r\n    public static REPORT_TYPE_INIT_DUN_OK = \"INIT_DUN_OK\"\r\n\r\n    //上报请求成功和失败的次数  每次启动时上报\r\n    public static REPORT_TYPE_REQUEST_RECORD = \"REQUEST_RECORD\";\r\n\r\n    //测试data 上报\r\n    public static REPORT_TYPE_DATA_ROUTE = \"REPORT_TYPE_DATA_ROUTE\";\r\n\r\n    //渠道的源\r\n    public static REPORT_TYPE_CHANNEL_SOURCE = \"CHANNEL_SOURCE\";\r\n    //热更失败域名上报\r\n    public static REPORT_TYPE_HOTUPDATE_HOST_ERROR = \"HOTUPDATE_HOST_ERROR\";\r\n    //子游戏热更正常上报\r\n    public static REPORT_TYPE_DOWNLOADSUBGAME_RESULT = \"REPORT_TYPE_DOWNLOADSUBGAME_RESULT\";\r\n\r\n    //子游戏热更失败上报\r\n    public static REPORT_TYPE_DOWNLOADSUBGAME_FAILED = \"REPORT_TYPE_DOWNLOADSUBGAME_FAILED\";\r\n    //进入子游戏异常\r\n    public static REPORT_TYPE_LOADSUBGAME_ERROR: \"REPORT_TYPE_LOADSUBGAME_ERROR\"\r\n\r\n\r\n    //并发请求上报\r\n    public static REPORT_TYPE_PARALLEL_REQ = \"PARALLEL_REQ\";\r\n\r\n\r\n    //客户端上报日志\r\n    public static DEBUG_LOG = \"debug\";\r\n    //客户端错误日志\r\n    public static ERROR_LOG = \"error\";\r\n\r\n    public logUrlsList = []\r\n\r\n    public reportUrl = \"\"\r\n\r\n\r\n    //上报调试日志开关，通过checkversion下发，rootadmin控制\r\n    public debugEnable = false;\r\n\r\n    //debug uid 。 防止切换账号问题\r\n    public debugUid = 0;\r\n\r\n    //当前使用的线路索引\r\n    private curIndex = 0;\r\n    //上报次数\r\n    private reportTimes = 0\r\n\r\n    //日志是否合并上报\r\n    private merge: boolean = true;\r\n    //缓存日志上限 默认5条\r\n    private maxLogCount = 5;\r\n    //缓存日志时间上限 默认5分钟 秒数\r\n    private maxLogCacheInterval = 5 * 60;\r\n    //缓存日志DeBug\r\n    private LogCache: Array<any> = new Array<any>();\r\n    //缓存日志定时器\r\n    private logCacheInterval = 0;\r\n    //测试字段 (测试条数)\r\n    // private testCount = 200;\r\n    //测试字段 (已经产生的日志数)\r\n    // private testNum = 0;\r\n    //热更失败只上报一次\r\n    private hotUpdateReport = {}\r\n\r\n    //暂定为appdata修改，重启app生效\r\n    public init() {\r\n        Global.Event.off(GlobalEvent.RefreshHallNetCost, this, this.onRefreshHallCostTime)\r\n        Global.Event.on(GlobalEvent.RefreshHallNetCost, this, this.onRefreshHallCostTime)\r\n        this.reportTimes = 0\r\n \r\n        this.loadLocalLogUrls();\r\n        // if(url && url.indexOf(\"http\") > -1)\r\n        //     this.reportUrl = url;\r\n        this.initReportUrl();\r\n    }\r\n\r\n    private getReportUrl() {\r\n        let reportUrl = Global.Setting.storage.get(HallStorageKey.ReportUrl);\r\n        if (reportUrl == '') {\r\n            Logger.error(\"reportUrl = null\")\r\n            return;\r\n        }\r\n        let tempUrl = JSON.parse(reportUrl)\r\n        if (tempUrl) {\r\n            let url = tempUrl.split('/c')[0]\r\n            this.logUrlsList = [url];\r\n            this.reportUrl = url + \"/logCenter/\";\r\n        }\r\n    }\r\n\r\n\r\n    //判断host是否是reportUrl\r\n    public isReportUrl(reportUrl: ServerUrl) {\r\n        let host = reportUrl.realHost\r\n        let returnValue = false;\r\n        for (let i = 0; i < this.logUrlsList.length; i++) {\r\n            let url = this.logUrlsList[i]\r\n            if (url.indexOf(host) > -1) {\r\n                returnValue = true;\r\n            }\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    private loadLocalLogUrls() {\r\n        let urlsStr: string = Global.Setting.storage.get(HallStorageKey.ReportUrl);\r\n        var arr: string[] = [];\r\n        try {\r\n            if (urlsStr != null && urlsStr != \"\"){\r\n                let t = JSON.parse(urlsStr)\r\n                arr.push(t);\r\n            }\r\n        }\r\n        catch (e) {\r\n            Logger.error(\"解析ReportUrl失败\", urlsStr);\r\n        }\r\n        if (arr == null || arr.length == 0 )\r\n            return;\r\n        //过滤无效日志\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            if (arr[i].indexOf(\"http\") == -1) {\r\n                Logger.error(\"过滤无效域名:\", arr[i]);\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n        if (arr.length > 0)\r\n            this.logUrlsList = arr;\r\n        //处理多地址同host\r\n        this.logUrlsList = Global.UrlUtil.dealFullUrlWithMutiLinesSameHost(this.logUrlsList)\r\n    }\r\n\r\n\r\n    private initReportUrl() {\r\n        let length = this.logUrlsList.length;\r\n        if (length == 0) {\r\n            Logger.error(\"Report URL is null\"!!!);\r\n            return;\r\n        }\r\n        this.curIndex = Global.Toolkit.getRoundInteger(length, 0);\r\n        this.refreshReportUrl();\r\n        // if(this.logUrlsList[randIndex] && this.logUrlsList[randIndex].indexOf(\"http\") > -1)\r\n        // {\r\n        //     this.reportUrl = this.logUrlsList[randIndex] + \"/logCenter/\";\r\n        // }\r\n    }\r\n\r\n\r\n    private refreshReportUrl() {\r\n        if (this.curIndex >= this.logUrlsList.length || !this.logUrlsList[this.curIndex]) {\r\n            this.curIndex = 0;\r\n            Logger.error(\"curIndex is null !! , curIndex =\" + this.curIndex);\r\n            return;\r\n        }\r\n        if (this.logUrlsList[this.curIndex].indexOf(\"http\") > -1) {\r\n            this.reportUrl = this.logUrlsList[this.curIndex] + \"/logCenter/\";\r\n        }\r\n        else {\r\n            this.reportUrl = \"https://\" + this.logUrlsList[this.curIndex] + \"/logCenter/\";\r\n        }\r\n    }\r\n\r\n    private changeReportUrl() {\r\n        this.curIndex = (this.curIndex + 1) % this.logUrlsList.length\r\n        this.refreshReportUrl();\r\n    }\r\n\r\n    public ParseDebugConfig(config, uid) {\r\n        if (config.debug && config.debug == 1) {\r\n            Global.ReportTool.debugEnable = true;\r\n            this.debugUid = uid;\r\n        }\r\n    }\r\n\r\n    //**\r\n    // * 上报客户端日志\r\n    // * @param key 日志标识\r\n    // * @param param 上报内容\r\n    // * 只有debugEnable为true时生效 用于灰度上报\r\n    // */\r\n    public ReportPublicDebugLog(key, param) {\r\n        if (!this.debugEnable || this.debugUid != this.uid)\r\n            return;\r\n        // this.ReportLogInternal(ReportTool.DEBUG_LOG, key, param);\r\n        this.ReportLogMixing(ReportTool.DEBUG_LOG, key, param);\r\n    }\r\n\r\n    public ReportPublicClientLog(key, param, bacth = false) {\r\n\r\n        // this.ReportLogInternal(ReportTool.DEBUG_LOG, key, param,bacth);\r\n        //测试日志系统方法\r\n        // this.testLogCacheFunc();\r\n        this.ReportLogMixing(ReportTool.DEBUG_LOG, key, param);\r\n    }\r\n\r\n    public genHallKey(key) {\r\n        return \"Hall_\" + key;\r\n    }\r\n\r\n    public genGameKey(key) {\r\n        let gid = Game.Control.curGid;\r\n        return \"Game_\" + gid + \"_\" + key;\r\n    }\r\n\r\n    //**\r\n    // * 上报客户端错误日志\r\n    // * @param key 日志标识\r\n    // * @param param 上报内容\r\n    // */\r\n    public ReportClientError(key, param) {\r\n        //热更上报只上报一次\r\n        if (key == ReportTool.REPORT_TYPE_HOT_UPDATE_ERROR) {\r\n            let gameType = param.game\r\n            if (!gameType) {\r\n                return;\r\n            }\r\n            if (this.hotUpdateReport[gameType]) {\r\n                return;\r\n            }\r\n            this.hotUpdateReport[gameType] = 1\r\n        }\r\n        this.reportTimes++\r\n        // this.ReportLogInternal(ReportTool.ERROR_LOG, key, param);\r\n        this.ReportLogMixing(ReportTool.ERROR_LOG, key, param);\r\n    }\r\n\r\n    //上报设备信息\r\n    public ReportDevice(type) {\r\n        this.getReportUrl();\r\n        if(this.reportUrl == '') return;\r\n        let url = this.reportUrl + \"basic?\";\r\n        let param = this.genDeviceParam();\r\n        param._param.stype = type;\r\n        let serverUlr = new ServerUrl()\r\n        serverUlr.parse(url)\r\n\r\n        if (cc.sys.os == cc.sys.OS_IOS) {\r\n            Logger.log(\"ReportDevice ios param:\" + param);\r\n\r\n        } else if (cc.sys.os == cc.sys.OS_ANDROID) {\r\n            Logger.log(\"ReportDevice android param:\" + param);\r\n\r\n        }\r\n\r\n        Global.Http.send(serverUlr, param, () => { }, () => {\r\n            this.changeReportUrl();\r\n        });\r\n    }\r\n\r\n\r\n    public GetReportTimes() {\r\n        return this.reportTimes\r\n    }\r\n\r\n\r\n\r\n    private get phoneCode() {\r\n        return Global.Setting.storage.get(HallStorageKey.AreaCode) || \"\";\r\n    }\r\n\r\n    private get loginIp() {\r\n        if (Global.PlayerData && Global.PlayerData.ip)\r\n            return Global.PlayerData.ip;\r\n        return \"\"\r\n    }\r\n\r\n    private get uid() {\r\n        if (Global.PlayerData && Global.PlayerData.uid)\r\n            return Global.PlayerData.uid;\r\n        return Number(Global.Setting.storage.get(HallStorageKey.Uid)) || 0;\r\n    }\r\n\r\n    private get vip() {\r\n        if (Global.PlayerData && Global.PlayerData.vip)\r\n            return Global.PlayerData.vip;\r\n        return Number(Global.Setting.storage.get(HallStorageKey.VIPLevel)) || 0;\r\n    }\r\n\r\n    private get packId() {\r\n        if (Global.PlayerData && Global.PlayerData.pack)\r\n            return Global.PlayerData.pack;\r\n        return Number(Global.Setting.storage.get(HallStorageKey.Channel)) || 0;\r\n    }\r\n\r\n    private get hallSkin() {\r\n        if (Global.Setting.SystemInfo && Global.Setting.SystemInfo.hallSkin) {\r\n            return Global.Setting.SystemInfo.hallSkin\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    private get gameSkin() {\r\n        if (Global.Setting.SystemInfo && Global.Setting.SystemInfo.gameSkin) {\r\n            return Global.Setting.SystemInfo.gameSkin\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    private get packageTag() {\r\n        if (Global.Setting.SystemInfo && Global.Setting.SystemInfo.packageTag) {\r\n            return Global.Setting.SystemInfo.packageTag\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    private get pid() {\r\n        if (Global.PlayerData && Global.PlayerData.pid)\r\n            return Global.PlayerData.pid;\r\n        return Number(Global.Setting.storage.get(HallStorageKey.InviteCode)) || 0;\r\n    }\r\n\r\n    private get userType() {\r\n        if (Global.PlayerData && Global.PlayerData.type)\r\n            return Global.PlayerData.type;\r\n        return 0;\r\n    }\r\n\r\n    private get udid() {\r\n        if (Global.Setting.SystemInfo && Global.Setting.SystemInfo.udid)\r\n            return Global.Setting.SystemInfo.udid.toString()\r\n        return \"0\"\r\n    }\r\n\r\n    private get entry() {\r\n        if (Global.Setting.SystemInfo && Global.Setting.SystemInfo.entry)\r\n            return Global.Setting.SystemInfo.entry.toString()\r\n        return \"\"\r\n    }\r\n\r\n\r\n    private get sign_type() {\r\n        if (Global.Setting.SystemInfo && Global.Setting.SystemInfo.sign_type)\r\n            return Global.Setting.SystemInfo.sign_type.toString()\r\n        return \"\"\r\n    }\r\n\r\n\r\n    private get appId() {\r\n        if (Global.Setting.appId)\r\n            return Global.Setting.appId;\r\n        return Global.Setting.SystemInfo.appID;\r\n    }\r\n\r\n    private get osType() {\r\n        if (!cc.sys.isNative)\r\n            return 0;\r\n        if (cc.sys.os == cc.sys.OS_ANDROID)\r\n            return 1;\r\n        if (cc.sys.os == cc.sys.OS_IOS)\r\n            return 2;\r\n        return 0;\r\n    }\r\n\r\n    private get phone() {\r\n        if (Global.PlayerData && Global.PlayerData.phone)\r\n            return Global.PlayerData.phone;\r\n        return Global.Setting.storage.get(HallStorageKey.Phone) || \"\";\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param type 日志类型\r\n     * @param key 日志标识key\r\n     * @param contentTab 参数\r\n     * @param bacth 是否多条\r\n     */\r\n    private ReportLogInternal(type, key, contentTab, bacth = false) {\r\n        this.getReportUrl();\r\n        if(this.reportUrl == '') return;\r\n        if (contentTab == null)\r\n            contentTab = {}\r\n        if (Global.Setting.SystemInfo == null)\r\n            return;\r\n\r\n        let suffix = \"clis?\"\r\n        if (bacth) {\r\n            suffix = \"batchclis?\"\r\n        }\r\n        let url = this.reportUrl + suffix;\r\n        let paramTab: any = {}\r\n        paramTab._mod = \"logAgent\";\r\n        paramTab._func = \"clientLog\";\r\n        let param: any = {}\r\n        //大类型\r\n        param.class = type;\r\n        //子类型\r\n        param.sub_class = key;\r\n        let contentStr = \"\"\r\n        try {\r\n            contentStr = JSON.stringify(contentTab);\r\n        }\r\n        catch\r\n        {\r\n            contentStr = \"\"\r\n        }\r\n        //上报具体内容\r\n        param.content = contentStr;\r\n        if (contentTab.error_code) {\r\n            param.error_code = contentTab.error_code\r\n        }\r\n        if (contentTab.htime || contentTab.hTime) {\r\n            if (contentTab.htime) {\r\n                param.htime = contentTab.htime\r\n            }\r\n            if (contentTab.hTime) {\r\n                param.htime = contentTab.hTime\r\n            }\r\n\r\n        }\r\n\r\n        this.packLogParam(param);\r\n\r\n        paramTab._param = param;\r\n        let serverUlr = new ServerUrl()\r\n        serverUlr.parse(url)\r\n        Global.Http.send(serverUlr, paramTab, () => { }, () => {\r\n            this.changeReportUrl();\r\n        });\r\n    }\r\n\r\n    //合并上报接口\r\n    private ReportLogMergeInternal(params: any) {\r\n        this.getReportUrl();\r\n        if(this.reportUrl == '') return;\r\n        if (params == null)\r\n            params = {}\r\n        if (Global.Setting.SystemInfo == null) return;\r\n        let paramTab: any = {}\r\n        paramTab._mod = \"logAgent\";\r\n        paramTab._func = \"clientLog\";\r\n        paramTab._param = params;\r\n        let suffix = \"batchclis?\";\r\n        let url = this.reportUrl + suffix;\r\n        let serverUlr = new ServerUrl()\r\n        serverUlr.parse(url)\r\n        Global.Http.send(serverUlr, paramTab, () => { }, () => {\r\n            this.changeReportUrl();\r\n        });\r\n    }\r\n\r\n\r\n    //通用log 参数填充\r\n    private packLogParam(param) {\r\n        //上报的客户端时间\r\n        param.client_time = Date.now();\r\n        //系统类型\r\n        param.os_type = this.osType;\r\n        //设备id\r\n        param.device_id = Global.Setting.SystemInfo.deviceId;\r\n        //系统版本\r\n        param.os_version = cc.sys.osVersion;\r\n        //包tag\r\n        param.tagInfo = cc.js.formatStr(\"%s|%s|%s\", this.hallSkin, this.gameSkin, this.packageTag)\r\n\r\n        //设备型号\r\n        param.phone_model = Global.Setting.SystemInfo.osBuildModel;\r\n        //设备品牌\r\n        param.mobile_brand = Global.Setting.SystemInfo.deviceBrand;\r\n        //appid\r\n        param.app_id = this.appId;\r\n        //系统版本号\r\n        param.app_version = Global.Setting.SystemInfo.appVersion;\r\n        //包名\r\n        param.app_name = Global.Setting.SystemInfo.bundleName;\r\n        //马甲包类型\r\n        param.copy_pack_type = Global.Setting.SystemInfo.nativePlatform;\r\n        //是否第一次安装\r\n        param.is_first = Global.Setting.SystemInfo.firstInstallStatus ? 1 : 0;\r\n        //uid\r\n        param.uid = this.uid;\r\n\r\n        param.udid = this.udid\r\n\r\n        param.sign_type = this.sign_type\r\n\r\n        param.entry = this.entry\r\n        param.ios_type = Global.Toolkit.getIosSignType()\r\n\r\n        // vip\r\n        param.vip = this.vip\r\n        //手机号\r\n        param.mobile = Global.AESUtil.aesEncrypt(Global.Toolkit.cryptoKey, Global.Toolkit.cryptoIv, this.phone)\r\n        //服务器设备唯一码\r\n        param.server_id = Global.Setting.SystemInfo.server_id || \"\";\r\n        //大厅版本\r\n        param.hall_version = Global.Toolkit.genLoadingAppInfo()\r\n        //平台id\r\n        param.platform_id = Global.Setting.appDataPlatformId || 0;\r\n\r\n\r\n        if (Global.SceneManager.inGame())\r\n            param.gid = Game.Control.curGid;\r\n        else\r\n            param.gid = 0;\r\n    }\r\n\r\n    private genDeviceParam() {\r\n        let paramTab: any = {}\r\n        paramTab._mod = 'logAgent';\r\n        paramTab._func = \"clientLog\";\r\n        let param: any = {}\r\n        let sysInfo = Global.Setting.SystemInfo;\r\n        if (sysInfo == null) {\r\n            Logger.error(\"sysInfo is null !!!!\");\r\n            return;\r\n        }\r\n        //ios签名\r\n        param.ios_sign = sysInfo.appSign;\r\n        //微信key\r\n        param.wx_key = sysInfo.wxKey;\r\n        //极光key\r\n        param.jpush_key = sysInfo.jpushKey;\r\n        //使用的域名列表\r\n        param.data_urls = Global.Setting.dataUrlsList;\r\n        //正在使用的url\r\n        param.data_url = Global.Setting.curDataUrl;\r\n        //设备渠道号\r\n        if (sysInfo.packChannel && !isNaN(Number(sysInfo.packChannel)))\r\n            param.channel_id = Number(sysInfo.packChannel) || 0;\r\n        //appdata渠道id\r\n        param.app_data_channel_id = Global.Setting.ChannelInfo.configChannel;\r\n        //包名\r\n        param.pack_name = sysInfo.bundleName;\r\n        //玩家实际渠道id\r\n        param.pack_id = this.packId\r\n        //上级id\r\n        param.pid = this.pid;\r\n        //用户类型  0 游客  1 手机\r\n        param.user_type = this.userType;\r\n        //设备型号\r\n        param.phone_model = Global.Setting.SystemInfo.osBuildModel;\r\n        //玩家手机号 或者 缓存手机号\r\n        param.mobile = Global.AESUtil.aesEncrypt(Global.Toolkit.cryptoKey, Global.Toolkit.cryptoIv, this.phone);\r\n        //手机号码区域\r\n        param.mobile_form = this.phoneCode;\r\n        //登录ip\r\n        param.login_ip = this.loginIp;\r\n        //平台id\r\n        param.platform_id = Global.Setting.appDataPlatformId || 0;\r\n        //大厅版本\r\n        param.hall_version = Global.Toolkit.genLoadingAppInfo()\r\n\r\n        param.udid = this.udid\r\n\r\n        param.sign_type = this.sign_type\r\n\r\n        param.entry = this.entry\r\n\r\n        param.ios_type = Global.Toolkit.getIosSignType()\r\n\r\n        //剪贴板内容\r\n        if (Global.ChannelUtil.isCliptextVaild())\r\n            param.clipboardContent = Global.Setting.ChannelInfo.clipboardContent || \"\";\r\n        //模拟器\r\n        param.simulator = sysInfo.simulator;\r\n\r\n        this.packLogParam(param);\r\n\r\n        paramTab._param = param;\r\n        return paramTab;\r\n    }\r\n\r\n\r\n\r\n    //每60秒写一次到缓存\r\n    private RECODE_TIME = 60;\r\n    private REQUEST_SUCCESS = \"sCount\";\r\n    private REQUEST_FAILED = \"fCount\";\r\n    private interval = 0;\r\n    //记录成功的请求次数和域名\r\n    private requestResultMap: { [key: string]: LineRecordInfo } = {};\r\n    private socketResultMap: { [key: string]: SocketRecordInfo } = {};\r\n    //上报总数据结构\r\n    private recordTab: any = {}\r\n\r\n    //热更结束之后，才可以写本地缓存，防止restart 导致日志重复上报\r\n    public canRecord = false;\r\n\r\n    public enableRecord() {\r\n        this.canRecord = true;\r\n    }\r\n\r\n    public markSuccess(serverUrl: ServerUrl) {\r\n        if (!serverUrl)\r\n            return;\r\n        this.recordRequestResult(serverUrl, this.REQUEST_SUCCESS)\r\n    }\r\n\r\n    public markFailed(serverUrl: ServerUrl, httpStatus: number) {\r\n        if (!serverUrl)\r\n            return;\r\n        this.recordRequestResult(serverUrl, this.REQUEST_FAILED, httpStatus)\r\n    }\r\n\r\n    //统计socket链接成功失败  error_code = -1 不统计\r\n    public markSocketFailed(serverUrl: ServerUrl, errorCode: number) {\r\n        if (!serverUrl)\r\n            return;\r\n        this.recordSocketResult(serverUrl, this.REQUEST_FAILED, errorCode)\r\n    }\r\n\r\n    public markSocketSuccess(serverUrl: ServerUrl) {\r\n        if (!serverUrl)\r\n            return;\r\n        this.recordSocketResult(serverUrl, this.REQUEST_SUCCESS)\r\n    }\r\n\r\n    //请求失败或者成功 计数+1\r\n    //type: 1 成功 2 失败\r\n    private recordRequestResult(serverUrl: ServerUrl, type, httpStatus = 0) {\r\n        let host = serverUrl.realHost;\r\n        if (!host)\r\n            return;\r\n\r\n        if (this.requestResultMap[host] == null) {\r\n            this.requestResultMap[host] = LineRecordInfo.create(serverUrl)\r\n        }\r\n        let info = this.requestResultMap[host]\r\n        if (info == null)\r\n            return;\r\n        if (type == this.REQUEST_FAILED) {\r\n            info.fCount++;\r\n            if (info.errCodeMap[httpStatus] == null)\r\n                info.errCodeMap[httpStatus] = 0\r\n            info.errCodeMap[httpStatus]++\r\n        }\r\n        else\r\n            info.sCount++;\r\n        //ip每次请求更新\r\n        info.addr = serverUrl.address;\r\n    }\r\n\r\n    private recordSocketResult(serverUrl: ServerUrl, type, httpStatus = 0) {\r\n        if (httpStatus == -2)\r\n            return;\r\n        let host = serverUrl.realHost;\r\n        if (!host)\r\n            return;\r\n\r\n        if (this.socketResultMap[host] == null) {\r\n            this.socketResultMap[host] = SocketRecordInfo.create(serverUrl)\r\n        }\r\n        let info = this.socketResultMap[host]\r\n        if (info == null)\r\n            return;\r\n        if (type == this.REQUEST_FAILED)\r\n            info.fCount++;\r\n        else\r\n            info.sCount++;\r\n        //ip每次请求更新\r\n        info.addr = serverUrl.address;\r\n    }\r\n\r\n    //上报上一次的请求计数\r\n    public reportRequestRecord() {\r\n        let recordStr = Global.Setting.storage.get(HallStorageKey.RequestRecord)\r\n        if (recordStr == null || recordStr == \"\") {\r\n            return;\r\n        }\r\n        try {\r\n            let decodeStr = Global.AESUtil.aesDcryptWithPKC27(recordStr);\r\n            let content = JSON.parse(decodeStr);\r\n            this.ReportLogInternal(ReportTool.DEBUG_LOG, ReportTool.REPORT_TYPE_REQUEST_RECORD, content)\r\n        }\r\n        catch (e) {\r\n            Logger.error(\"decode RequestRecord failed!!!\", recordStr);\r\n        }\r\n        Global.Setting.storage.set(HallStorageKey.RequestRecord, \"\");\r\n    }\r\n\r\n    //记录心跳刷新时间\r\n    private onRefreshHallCostTime(time, isHeartBeat, serverUrl) {\r\n        if (!isHeartBeat) {\r\n            return;\r\n        }\r\n        if (!this.requestResultMap[serverUrl.realHost])\r\n            return;\r\n        let info = this.requestResultMap[serverUrl.realHost]\r\n        info.totalHBCount++;\r\n        info.totalHBTime += time;\r\n        if (info.maxHBTime < time)\r\n            info.maxHBTime = time\r\n    }\r\n\r\n\r\n    //把日志缓存到本地，下次登录时再上报\r\n    private saveRecord() {\r\n        //加密后存储到本地\r\n        try {\r\n            this.recordTab.reqMap = this.requestResultMap;\r\n            this.recordTab.sockMap = this.socketResultMap;\r\n            for (var key in this.requestResultMap) {\r\n                LineRecordInfo.deleteEmpty(this.requestResultMap[key])\r\n            }\r\n            for (var key in this.socketResultMap) {\r\n                SocketRecordInfo.deleteEmpty(this.socketResultMap[key])\r\n            }\r\n            let content = JSON.stringify(this.recordTab);\r\n            let encryptContent = Global.AESUtil.aesEncrypt(Global.Toolkit.cryptoKey, Global.Toolkit.cryptoIv, content);\r\n            Global.Setting.storage.set(HallStorageKey.RequestRecord, encryptContent);\r\n        }\r\n        catch (e) {\r\n            Logger.error(\"JSON.stringify(this.successRequestMap) error !!!\");\r\n            this.requestResultMap = {};\r\n            this.socketResultMap = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 超过时间限制无论缓存中有多少条日志都上报,同时清除缓存,清除Storage\r\n     */\r\n    private ReportCacheTimeout() {\r\n        if (this.LogCache == null || this.LogCache.length == 0) return;\r\n        try {\r\n            let mergeLog: any = {};\r\n            mergeLog.data = this.LogCache;\r\n            this.ReportLogMergeInternal(mergeLog);\r\n        } catch (error) {\r\n            Logger.error(\"ReportCacheTimeout:超过时限上报日志错误\", error);\r\n        }\r\n        this.clearLogCacheAll();\r\n    }\r\n\r\n    /**\r\n     * 上报上次登录后缓存在Storage中的日志(无论多少) \r\n     */\r\n    public ReportLastLoginLogCache() {\r\n        let lastLoginCache = Global.Setting.storage.get(HallStorageKey.PostLogCache);\r\n        if (lastLoginCache == null || lastLoginCache == \"\") return;\r\n        try {\r\n            let decodeStr = Global.AESUtil.aesDcryptWithPKC27(lastLoginCache);\r\n            let content = JSON.parse(decodeStr) as Array<any>;\r\n            let mergeLog: any = {};\r\n            mergeLog.data = content;\r\n            this.ReportLogMergeInternal(mergeLog);\r\n        }\r\n        catch (e) {\r\n            Logger.error(\"decode RequestRecord failed!!!\", lastLoginCache);\r\n        }\r\n        this.clearLogCacheAll();\r\n    }\r\n\r\n    /**\r\n     * 将日志先入缓存然后再检测超过5条上报再写入localStorage\r\n     * @param key       日志大类型\r\n     * @param subKey    日志小类型\r\n     * @param content   日志内容\r\n     */\r\n    private ReportLogMixing(key: string, subKey: string, content: any) {\r\n        //直接上报 不入缓存\r\n        if (!this.merge) {\r\n            this.ReportLogInternal(key, subKey, content);\r\n            return;\r\n        }\r\n        // 拿单条日志\r\n        let subLog = this.newLogParams(key, subKey, content);\r\n        this.LogCache.push(subLog);\r\n        if (this.LogCache.length >= this.maxLogCount) {\r\n            //上报\r\n            let mergeLog: any = {};\r\n            mergeLog.data = this.LogCache;\r\n            this.ReportLogMergeInternal(mergeLog);\r\n            //清空缓存\r\n            this.clearLogCacheAll();\r\n        } else {\r\n            //写Storage\r\n            this.saveLogCacheToStorage();\r\n        }\r\n    }\r\n\r\n    //合并上 报生成一条子日志\r\n    private newLogParams(key: string, subKey: string, content: any): any {\r\n        let param: any = {};\r\n        //上报的客户端时间\r\n        param.client_time = Date.now();\r\n        //系统类型\r\n        param.os_type = this.osType;\r\n        //设备id\r\n        param.device_id = Global.Setting.SystemInfo.deviceId;\r\n        //系统版本\r\n        param.os_version = cc.sys.osVersion;\r\n        //设备型号\r\n        param.mobile_brand = Global.Setting.SystemInfo.deviceBrand;\r\n        param.tagInfo = cc.js.formatStr(\"%s|%s|%s\", this.hallSkin, this.gameSkin, this.packageTag)\r\n\r\n        //设备型号\r\n        param.phone_model = Global.Setting.SystemInfo.osBuildModel;\r\n\r\n        param.udid = this.udid\r\n\r\n        param.sign_type = this.sign_type\r\n\r\n        param.entry = this.entry\r\n\r\n        param.ios_type = Global.Toolkit.getIosSignType()\r\n\r\n        //appid\r\n        param.app_id = this.appId;\r\n        //系统版本号\r\n        param.app_version = Global.Setting.SystemInfo.appVersion;\r\n        //包名\r\n        param.app_name = Global.Setting.SystemInfo.bundleName;\r\n        //马甲包类型\r\n        param.copy_pack_type = Global.Setting.SystemInfo.nativePlatform;\r\n        //是否第一次安装\r\n        param.is_first = Global.Setting.SystemInfo.firstInstallStatus ? 1 : 0;\r\n        //uid\r\n        param.uid = this.uid;\r\n        // vip\r\n        param.vip = this.vip\r\n        //手机号\r\n        param.mobile = Global.AESUtil.aesEncrypt(Global.Toolkit.cryptoKey, Global.Toolkit.cryptoIv, this.phone)\r\n        //服务器设备唯一码\r\n        param.server_id = Global.Setting.SystemInfo.server_id || \"\";\r\n        //大厅版本\r\n        param.hall_version = Global.Toolkit.genLoadingAppInfo()\r\n        //平台id\r\n        param.platform_id = Global.Setting.appDataPlatformId || 0;\r\n        //日志大类型\r\n        param.class = key;\r\n        //日志子类型\r\n        param.sub_class = subKey;\r\n        //日志内容\r\n        let contentStr = \"\"\r\n        try {\r\n            contentStr = JSON.stringify(content);\r\n        }\r\n        catch\r\n        {\r\n            contentStr = \"\"\r\n        }\r\n        param.content = contentStr;\r\n        if (content.error_code) {\r\n            param.error_code = content.error_code\r\n        }\r\n        if (content.htime || content.hTime) {\r\n            if (content.htime) {\r\n                param.htime = content.htime\r\n            }\r\n            if (content.hTime) {\r\n                param.htime = content.hTime\r\n            }\r\n        }\r\n        if (Global.SceneManager.inGame())\r\n            param.gid = Game.Control.curGid;\r\n        else\r\n            param.gid = 0;\r\n        return param;\r\n    }\r\n\r\n    /**\r\n     * 日志缓存写入localStorage\r\n     */\r\n    private saveLogCacheToStorage() {\r\n        try {\r\n            let content = JSON.stringify(this.LogCache);\r\n            let encryptContent = Global.AESUtil.aesEncrypt(Global.Toolkit.cryptoKey, Global.Toolkit.cryptoIv, content);\r\n            Global.Setting.storage.set(HallStorageKey.PostLogCache, encryptContent);\r\n        } catch (error) {\r\n            Logger.error(\"saveLogCacheToStorage:日志写缓存失败\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除所有缓存 同时清除Storage\r\n     */\r\n    private clearLogCacheAll() {\r\n        this.LogCache = null;\r\n        this.LogCache = new Array<any>();\r\n        Global.Setting.storage.set(HallStorageKey.PostLogCache, \"\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 模拟错误日志上报 模拟产生200条日志 每条日志产生间隔1-10秒 各种大类型以及小类型日志\r\n     */\r\n    // private testLogCacheFunc(){\r\n    //     let subKeyList = [\r\n    //         \"HTTP_ERROR\",\r\n    //         \"DATA_ERROR\",\r\n    //         \"CHECKVERSION_ERROR\",\r\n    //         \"LOGIN_ERROR\",\r\n    //         \"HTTPDNS_ERROR\",\r\n    //         \"HOTUPDATE_ERROR\",\r\n    //         \"JSON_ERROR\",\r\n    //         \"INIT_TDUN_ERROR\",\r\n    //         \"SOCKET_ERROR\",\r\n    //         \"TEST_ROUTE\",\r\n    //         \"INIT_DUN_OK\",\r\n    //         \"REQUEST_RECORD\",\r\n    //         \"CHANNEL_SOURCE\",\r\n    //         \"PARALLEL_REQ\"\r\n    //     ];\r\n    //     //120-30+1\r\n    //     // Math.floor(Math.random()*(max-min+1)+min);\r\n    //     let randomTime = Math.floor(Math.random()*91+30);//随机时间\r\n    //     let randomKey = Math.round(Math.random()) == 0 ? ReportTool.DEBUG_LOG : ReportTool.ERROR_LOG; //随机大类型\r\n    //     let randomSubkey = Math.floor(Math.random()*14);//随机小类型\r\n    //     if(randomTime == 0){\r\n    //         this.testLogCacheFunc();\r\n    //         return;\r\n    //     }\r\n    //     setTimeout(()=>{\r\n    //         this.testNum += 1;\r\n    //         if(this.testNum>=this.testCount) return;\r\n    //         let content:any = {};\r\n    //         if(randomTime<60){\r\n    //             content.data = `日志合并上报${this.testNum}===时间间隔:${randomTime}`;\r\n    //         }else if(randomTime<90){\r\n    //             content.data = `日志合并上报${this.testNum}===时间间隔:${randomTime}`;\r\n    //             content.error_code = `error_code_${randomTime}`\r\n    //         }else{\r\n    //             content.data = `日志合并上报${this.testNum}===时间间隔:${randomTime}`;\r\n    //             content.error_code = `error_code_${randomTime}`\r\n    //             content.htime = 1;\r\n    //             content.hTime = 2;\r\n    //         }\r\n    //         this.ReportLogMixing(randomKey,subKeyList[randomSubkey],content);\r\n    //         this.testLogCacheFunc();\r\n    //     },randomTime*1000);\r\n    // }\r\n\r\n    public onUpdate(dt) {\r\n        if (!this.canRecord)\r\n            return;\r\n        this.interval += dt;\r\n        if (this.interval >= this.RECODE_TIME) {\r\n            this.interval = 0;\r\n            this.saveRecord();\r\n        }\r\n        //5分钟上报一次日志\r\n        this.logCacheInterval += dt;\r\n        if (this.logCacheInterval >= this.maxLogCacheInterval) {\r\n            this.logCacheInterval = 0;\r\n            this.ReportCacheTimeout();\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nclass SocketRecordInfo {\r\n    public addrHost: string\r\n    public host: string\r\n    public addr: string\r\n    public lo_type = 0;\r\n    public port = 0;\r\n    public sCount = 0;\r\n    public fCount = 0;\r\n\r\n    public static create(serverUrl: ServerUrl) {\r\n        if (serverUrl == null)\r\n            return\r\n        let recordInfo = new SocketRecordInfo()\r\n        recordInfo.addrHost = serverUrl.addressHost\r\n        recordInfo.host = serverUrl.realHost\r\n        recordInfo.port = serverUrl.port\r\n        recordInfo.lo_type = serverUrl.lo_type\r\n        return recordInfo\r\n    }\r\n\r\n    public static deleteEmpty(info: SocketRecordInfo) {\r\n        for (var key in info) {\r\n            if (info[key] == 0 && key != \"fCount\" && key != \"sCount\")\r\n                delete info[key]\r\n        }\r\n        if (info.addrHost == info.host)\r\n            delete info.addrHost\r\n\r\n        if (info.addr == info.host)\r\n            delete info.addr\r\n    }\r\n}\r\n\r\nclass LineRecordInfo {\r\n    public addrHost: string\r\n    public host: string\r\n    public addr: string\r\n    public port = 0\r\n    public lo_type = 0\r\n    public totalHBTime: number = 0\r\n    public totalHBCount: number = 0\r\n    public maxHBTime: number = 0\r\n    public sCount = 0;\r\n    public fCount = 0;\r\n    public errCodeMap = {}\r\n\r\n\r\n    public static create(serverUrl: ServerUrl) {\r\n        if (serverUrl == null)\r\n            return\r\n        let recordInfo = new LineRecordInfo()\r\n        recordInfo.addrHost = serverUrl.addressHost\r\n        recordInfo.host = serverUrl.realHost\r\n        recordInfo.port = serverUrl.port\r\n        recordInfo.lo_type = serverUrl.lo_type\r\n        return recordInfo\r\n    }\r\n\r\n    public static deleteEmpty(info: LineRecordInfo) {\r\n        for (var key in info) {\r\n            if (info[key] == 0 && key != \"fCount\" && key != \"sCount\")\r\n                delete info[key]\r\n        }\r\n        if (info.addrHost == info.host)\r\n            delete info.addrHost\r\n\r\n        if (info.addr == info.host)\r\n            delete info.addr\r\n    }\r\n\r\n\r\n}"]}