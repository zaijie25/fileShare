{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\net\\hall\\CheckHelper.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ServerRouteInfo, ServerUrl } from \"../../setting/ServerRoutes\";\r\n\r\nexport default class CheckHelper \r\n{\r\n    private checkNum = 0;\r\n    private MAXCHECKNUM = 1000000;\r\n\r\n    private timeMap = {};\r\n\r\n    private checkTimeList = []\r\n\r\n    //上次网络开销\r\n    private lastNetCost = 0;\r\n\r\n    //是否开启刷新定时器\r\n    private runTimer = false;\r\n    \r\n    //计时\r\n    private timeCount = 0;\r\n\r\n    //类型  1 大厅 2 子游戏\r\n    private type;\r\n\r\n    constructor(type)\r\n    {\r\n        this.type = type;\r\n    }\r\n\r\n    public clear()\r\n    {\r\n        this.checkTimeList = [];\r\n        this.checkNum = 0;\r\n        this.timeCount = 0;\r\n        this.runTimer = false;\r\n    }\r\n\r\n    public getNetCost()\r\n    {\r\n        return this.lastNetCost;\r\n    }\r\n\r\n    //发送心跳时开始计时，每秒更新网络延时。收到心跳后，停止计时器，以回包时间为准。\r\n    public recordHeartbeat(serverUrl :ServerUrl = null)\r\n    {\r\n        this.timeMap[this.checkNum] = {\r\n            sendTime:Date.now(), \r\n            liveTime:0,\r\n        }\r\n\r\n        this.checkTimeList.push([this.checkNum, Date.now(), serverUrl])\r\n        this.runTimer = true;\r\n    }\r\n\r\n\r\n    public refreshCostTime(checkStr)\r\n    {\r\n        if(checkStr == null || checkStr == \"\")\r\n            return;\r\n        let strs = checkStr.split(\"_\");\r\n        if(strs.length <= 0 || isNaN(Number(strs[0])))\r\n            return;\r\n        let check = Number(strs[0]);\r\n        this.runTimer = false;\r\n        this.timeCount = 0;\r\n        for(let i = 0; i < this.checkTimeList.length; i++)\r\n        {\r\n            if(this.checkTimeList[i][0] == check)\r\n            {\r\n                let time = this.checkTimeList[i][1];\r\n                let serverUrl = this.checkTimeList[i][2]\r\n                let diff = Date.now() - time;\r\n                this.checkTimeList.splice(0, i + 1);\r\n                // this.lastNetCost = diff;\r\n                this.updateCostTime(diff, true, serverUrl);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private updateCostTime(time, isHeartbeat = false, serverUrl:ServerUrl = null)\r\n    {\r\n        this.lastNetCost = time;\r\n        if(this.type == 1)\r\n            Global.Event.event(GlobalEvent.RefreshHallNetCost, this.lastNetCost, isHeartbeat, serverUrl)\r\n        else\r\n            Global.Event.event(GlobalEvent.RefreshGameNetCost, this.lastNetCost, isHeartbeat)\r\n    }\r\n\r\n\r\n    public getCostTime(checkStr:string)\r\n    {\r\n        if(checkStr == null || checkStr == \"\")\r\n            return 0;\r\n        let strs = checkStr.split(\"_\");\r\n        if(strs.length <= 0 || isNaN(Number(strs[0])))\r\n            return 0;\r\n        let check = Number(strs[0]);\r\n        for(let i = 0; i < this.checkTimeList.length; i++)\r\n        {\r\n            if(this.checkTimeList[i][0] == check)\r\n            {\r\n                let time = this.checkTimeList[i][1];\r\n                let diff = Date.now() - time;\r\n                this.checkTimeList.splice(0, i + 1);\r\n                return diff;\r\n            }\r\n        }\r\n        return 0;\r\n    } \r\n\r\n\r\n    public updateChecker()\r\n    {\r\n        this.checkNum++;\r\n        if(this.checkNum > this.MAXCHECKNUM)\r\n        {\r\n            this.checkNum = 0;\r\n        }\r\n    }\r\n\r\n\r\n    public getChecker()\r\n    {\r\n        return this.checkNum;\r\n    }\r\n\r\n    public getNomalChecker()\r\n    {\r\n        return this.checkNum + \"_\" + this.getNowTimeStr();\r\n    }\r\n\r\n    public getHeartBeatChecker(sn?)\r\n    {\r\n        sn = sn || 0\r\n        return this.getNomalChecker() + \"_\" + this.lastNetCost + \"_\" + sn;\r\n    }\r\n\r\n    private getNowTimeStr()\r\n    {\r\n        let date = new Date();\r\n        let M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';\r\n        let D = date.getDate() + ' ';\r\n        let h = date.getHours() + ':';\r\n        let m = (date.getMinutes() < 10? \"0\" + date.getMinutes() : date.getMinutes()) +  ':';\r\n        let s = (date.getSeconds() < 10? \"0\" + date.getSeconds() : date.getSeconds());\r\n        return M + D + h + m + s;\r\n    }\r\n\r\n\r\n    public onUpdate(dt)\r\n    {\r\n        if(!this.runTimer )\r\n            return;\r\n        this.timeCount += dt;\r\n        if(this.timeCount < 1 || this.checkTimeList.length == 0)\r\n            return;\r\n        this.timeCount = 0;\r\n        //取第一个心跳的时间差\r\n        this.updateCostTime( Date.now() - this.checkTimeList[0][1]);\r\n    }\r\n}"]}