{"version":3,"sources":["assets\\ermj\\Ermj\\scripts\\tool\\ErmjBasePool.ts"],"names":[],"mappings":";;;;;;AAAA;IAEI,sBAAsB,IAAa;QAAb,SAAI,GAAJ,IAAI,CAAS;QADzB,SAAI,GAAQ,EAAE,CAAC;QAErB,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAEO,gCAAS,GAAjB;QAAA,iBAcC;QAbG,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,WAAW,GAAG;YACd,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,UAAU,EAAE,CAAC,EAAE,EAAC;gBACpC,IAAI,IAAI,GAAG,KAAI,CAAC,UAAU,EAAE,CAAC;gBAC7B,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvB,KAAK,EAAE,CAAC;gBACR,IAAI,KAAK,IAAI,KAAI,CAAC,QAAQ,EAAC;oBACvB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;oBACvC,MAAM;iBACT;aACJ;QACL,CAAC,CAAA;QACD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IAC9C,CAAC;IAGD,sBAAc,kCAAQ;QADtB,mBAAmB;aACnB;YACI,OAAO,EAAE,CAAC;QACd,CAAC;;;OAAA;IAGD,sBAAc,oCAAU;QADxB,sBAAsB;aACtB;YACI,OAAO,EAAE,CAAC;QACd,CAAC;;;OAAA;IAES,iCAAU,GAApB;QACI,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,8BAAO,GAAd;QACI,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,EAAC;YACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC;IAEM,iCAAU,GAAjB,UAAkB,KAAa;QAC3B,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAE,KAAK,EAAE,CAAC,EAAE,EAAC;YACvB,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC1B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAES,gCAAS,GAAnB,UAAoB,IAAO;IAE3B,CAAC;IAEM,kCAAW,GAAlB,UAAmB,IAAO;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAEM,iCAAU,GAAjB,UAAkB,GAAQ;QAA1B,iBAIC;QAHG,GAAG,CAAC,OAAO,CAAC,UAAA,GAAG;YACX,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,gCAAS,GAAhB;QACI,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,sBAAW,8BAAI;aAAf;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5B,CAAC;;;OAAA;IACL,mBAAC;AAAD,CA1EA,AA0EC,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class ErmjBasePool<T>{\r\n    protected pool: T[] = [];\r\n    constructor(protected root: cc.Node){\r\n        this.preCreate();\r\n    }\r\n\r\n    private preCreate(){\r\n        let count = 0;\r\n        let loadByFrame = ()=>{\r\n            for(let i = 0; i < this.everyCount; i++){\r\n                let item = this.createItem();\r\n                this.recycleItem(item);\r\n                count++;\r\n                if (count >= this.preCount){\r\n                    Game.Component.unschedule(loadByFrame);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        Game.Component.schedule(loadByFrame, 0.2);\r\n    }\r\n    \r\n    // 预加载总数 需要修改的话继承重写\r\n    protected get preCount(){\r\n        return 30;\r\n    }\r\n\r\n    // 每固定帧加载数量 需要修改的话继承重写\r\n    protected get everyCount(){\r\n        return 30;\r\n    }\r\n\r\n    protected createItem(){\r\n        return null;\r\n    }\r\n\r\n    public getItem(): T{\r\n        if (this.size > 0){\r\n            return this.pool.pop();\r\n        }\r\n        return this.createItem();\r\n    }\r\n\r\n    public getItemArr(count: number): T[]{\r\n        let arr = [];\r\n        for(let i=0; i< count; i++){\r\n            let item = this.getItem();\r\n            arr.push(item);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    protected resetItem(item: T){\r\n        \r\n    }\r\n\r\n    public recycleItem(item: T){\r\n        this.resetItem(item);\r\n        this.pool.push(item);\r\n    }\r\n\r\n    public recycleAll(arr: T[]){\r\n        arr.forEach(ele => {\r\n            this.recycleItem(ele);\r\n        });\r\n    }\r\n\r\n    public resetPool(){\r\n        this.pool = [];\r\n    }\r\n\r\n    public get size(){\r\n        return this.pool.length;\r\n    }\r\n}"]}