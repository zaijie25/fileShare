{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\dun\\YunDun.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import IDun from \"./IDun\";\r\nimport HallStorageKey from \"../../../logic/hallcommon/const/HallStorageKey\";\r\nimport { DUNTYPE, DUNSTATE } from \"./AppDunControl\";\r\nimport { ReportTool } from \"../../../logic/core/tool/ReportTool\";\r\n\r\nexport default class YunDun implements IDun {\r\n    private isDunInit = false;\r\n    private _isSupport = false;\r\n    private sdkName = \"yundun\";\r\n    private _dunType = 0;\r\n\r\n    constructor(dunType) {\r\n        this._dunType = dunType\r\n        Global.NativeEvent.isSupportSDK(this.sdkName, null, (retObj) => {\r\n            if (retObj.result == 0) {\r\n                this._isSupport = true;\r\n            } else {\r\n                Logger.error(\"checkAppIsSupportDunByType dunType = \" + dunType + \" isSupport = false\")\r\n            }\r\n        })\r\n    }\r\n\r\n    public isAppSupport() {\r\n        return this._isSupport\r\n    }\r\n\r\n    public checkCfgIsValid(cfg: any) {\r\n        if (cfg && cfg.accessKey && cfg.uuid) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //异步初始化\r\n    public init(cfg, callback?: Function) {\r\n        Logger.error(\"init YunDun SDK\")\r\n        if (!this.checkCfgIsValid(cfg)) {\r\n            Logger.error(\"init YunDun SDK checkCfgIsValid  = false\")\r\n            return;\r\n        }\r\n        if (this.isDunInit) {\r\n            Logger.error(\"init YunDun SDK this.isTDunInit  = true\")\r\n            return;\r\n        }\r\n        let initState = this.getInitState()\r\n        Logger.error(\"init YunDun SDK state = \" + initState)\r\n        let accessKey = cfg.accessKey\r\n        let uuid = cfg.uuid\r\n        if ((initState == DUNSTATE.INIT) && accessKey && uuid) {\r\n            Logger.error(\"initYunDunSDK\")\r\n            Global.NativeEvent.initYunDunSDK(accessKey, uuid, (retObj) => {\r\n                Logger.error(\"initYunDunSDK ret = \" + JSON.stringify(retObj))\r\n                if (retObj) {\r\n                    let result = Number(retObj.result)\r\n                    if (result == 0 || result == 0.0) {\r\n                        this.isDunInit = true;\r\n                        Global.Event.event(GlobalEvent.DunInitFinish);\r\n                        Global.Setting.storage.set(HallStorageKey.DunInitRecord + \"_\" + DUNTYPE.YUN_DUN, 1)\r\n                        Logger.error(\"initYunDunSDK ret = 0 success \")\r\n                        // let reportParam = { \"result\": 0, \"type\": DUNTYPE.YUN_DUN }\r\n                        // Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_OK, reportParam)\r\n                    } else {\r\n                        Logger.error(\"initYunDunSDK ret != 0 failed \")\r\n                        let reportParam = { \"result\": \"ret != 0 \" + result, \"type\": DUNTYPE.YUN_DUN }\r\n                        Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_ERROR, reportParam)\r\n                    }\r\n                } else {\r\n                    Logger.error(\"initYunDunSDK retObj == null failed \")\r\n                    let reportParam = { \"result\": \"initYunDunSDK retObj == null failed\", \"type\": DUNTYPE.YUN_DUN }\r\n                    Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_ERROR, reportParam)\r\n                }\r\n\r\n                if (callback) {\r\n                    callback()\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    //获取初始化状态\r\n    isInit() {\r\n        if (!this.isDunInit) {\r\n            let ret = this.getInitState();\r\n            if (ret == 0) {\r\n                this.isDunInit = true;\r\n            }\r\n        }\r\n        return this.isDunInit;\r\n    }\r\n\r\n    getInitState() {\r\n        let ret = Global.NativeEvent.getYunDunInitRet();\r\n        return ret;\r\n    }\r\n\r\n\r\n    getServerIPAndPort(host: string, port: number,attr:any) {\r\n        if (!this.isDunInit){\r\n            Logger.error(\"YunDun getServerIPAndPort isDunInit = false\")\r\n            return;\r\n        }\r\n        let serverIPAndPortJson = Global.NativeEvent.getYunDunServerIPAndPort(host, port);\r\n        if (serverIPAndPortJson) {\r\n            Logger.error(\"getServerIPAndPort serverIPAndPortJson = \" + serverIPAndPortJson)\r\n            let serverIPAndPort = JSON.parse(serverIPAndPortJson)\r\n            if (serverIPAndPort) {\r\n                if (serverIPAndPort.result != null && (serverIPAndPort.result == 0 || serverIPAndPort.result == 0.0) && serverIPAndPort.serverIp && serverIPAndPort.serverPort) {\r\n                    let ipPortObj = { \"ip\": serverIPAndPort.serverIp, \"port\": serverIPAndPort.serverPort }\r\n                    return ipPortObj\r\n                }\r\n            }\r\n        }else {\r\n            Logger.error(\"getServerIPAndPort serverIPAndPortJson = null\" )\r\n        }\r\n\r\n        return null\r\n    }\r\n}"]}