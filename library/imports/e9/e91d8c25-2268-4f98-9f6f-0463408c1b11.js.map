{"version":3,"sources":["assets\\hall\\scripts\\logic\\core\\game\\ViewSet.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS;AACT;IAAA;QAEY,YAAO,GAAG,EAAE,CAAA;QAoDpB,WAAW;QACX,QAAQ;IAEZ,CAAC;IArDU,4BAAU,GAAjB,UAAkB,GAAU,EAAE,IAAQ;QAElC,IAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,EAC5B;YACI,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAC5B,OAAO;SACV;QACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IAC7B,CAAC;IAEM,yBAAO,GAAd,UAAe,GAAU;QAErB,IAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,EAC5B;YACI,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IAEM,2BAAS,GAAhB,UAAoB,GAAG;QAEnB,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC7B,IAAG,IAAI,IAAI,IAAI;YACX,OAAO,IAAS,CAAC;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,0BAAQ,GAAf,UAAgB,GAAU,EAAE,IAAW;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QAE5C,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC7B,IAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EACjC;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACvC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,WAAW;IACJ,yBAAO,GAAd,UAAe,IAAW;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QAE/B,KAAI,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,EAC3B;YACI,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EACjC;gBACI,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAChC;SACJ;IACL,CAAC;IAKL,cAAC;AAAD,CAzDA,AAyDC,IAAA","file":"","sourceRoot":"/","sourcesContent":["//子界面管理组件\r\nexport default class ViewSet\r\n{\r\n    private viewMap = {}\r\n\r\n    public registView(key:string, view:any)\r\n    {\r\n        if(this.viewMap[key] != null)\r\n        {\r\n            Logger.error(\"重复注册组件\", key);\r\n            return;\r\n        }\r\n        this.viewMap[key] = view;\r\n    }\r\n\r\n    public getView(key:string)\r\n    {\r\n        if(this.viewMap[key] == null)\r\n        {\r\n            Logger.error(\"找不到组件\", key);\r\n        }\r\n        return this.viewMap[key];\r\n    }\r\n\r\n    public getViewEx<T>(key):T\r\n    {\r\n        let view = this.getView(key);\r\n        if(view != null)\r\n            return view as T;\r\n        return view;\r\n    }\r\n\r\n    public callView(key:string, func:string, ...args)\r\n    {\r\n        let view = this.getView(key);\r\n        if(view[func] && view[func].apply)\r\n        {\r\n            return view[func].apply(view, args);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //对所有组件调用方法\r\n    public callAll(func:string, ...args)\r\n    {\r\n        for(let key in this.viewMap)\r\n        {\r\n            let view = this.getView(key);\r\n            if(view[func] && view[func].apply)\r\n            {\r\n                view[func].apply(view, args);\r\n            }\r\n        }\r\n    }\r\n\r\n    //暂时不提供删除功能\r\n    //有需要再添加\r\n\r\n}"]}