{"version":3,"sources":["assets\\hall\\scripts\\framework\\libs\\cryptoTs\\enc\\Hex.ts"],"names":[],"mappings":";;;;;;;AACA,8CAA6C;AAE7C;IAAA;IA+CA,CAAC;IA9CG;;;;;;;;;;OAUG;IACW,aAAS,GAAvB,UAAwB,SAAoB;QACxC,UAAU;QACV,IAAM,QAAQ,GAAkB,EAAE,CAAC;QACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;YACzC,IAAM,IAAI,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YACtE,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YACzC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;SAC7C;QAED,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;OAUG;IACW,SAAK,GAAnB,UAAoB,MAAc;QAC9B,WAAW;QACX,IAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;QAEnC,UAAU;QACV,IAAM,KAAK,GAAkB,EAAE,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,IAAI,CAAC,EAAE;YACtC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC7E;QAED,OAAO,IAAI,qBAAS,CAAC,KAAK,EAAE,YAAY,GAAG,CAAC,CAAC,CAAC;IAClD,CAAC;IACL,UAAC;AAAD,CA/CA,AA+CC,IAAA;AA/CY,kBAAG;AAiDhB,8EAA8E;AAC9E,IAAM,CAAC,GAAa,GAAG,CAAC","file":"","sourceRoot":"/","sourcesContent":["import { Encoding } from './Encoding';\r\nimport { WordArray } from '../lib/WordArray';\r\n\r\nexport class Hex {\r\n    /**\r\n     * Converts a word array to a hex string.\r\n     *\r\n     * @param wordArray The word array.\r\n     *\r\n     * @return The hex string.\r\n     *\r\n     * @example\r\n     *\r\n     *     let hexString = Hex.stringify(wordArray);\r\n     */\r\n    public static stringify(wordArray: WordArray): string {\r\n        // Convert\r\n        const hexChars: Array<string> = [];\r\n        for (let i = 0; i < wordArray.sigBytes; i++) {\r\n            const bite = (wordArray.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n            hexChars.push((bite >>> 4).toString(16));\r\n            hexChars.push((bite & 0x0f).toString(16));\r\n        }\r\n\r\n        return hexChars.join('');\r\n    }\r\n\r\n    /**\r\n     * Converts a hex string to a word array.\r\n     *\r\n     * @param hexStr The hex string.\r\n     *\r\n     * @return The word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     let wordArray = Hex.parse(hexString);\r\n     */\r\n    public static parse(hexStr: string): WordArray {\r\n        // Shortcut\r\n        const hexStrLength = hexStr.length;\r\n\r\n        // Convert\r\n        const words: Array<number> = [];\r\n        for (let i = 0; i < hexStrLength; i += 2) {\r\n            words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\r\n        }\r\n\r\n        return new WordArray(words, hexStrLength / 2);\r\n    }\r\n}\r\n\r\n// type guard for the formatter (to ensure it has the required static methods)\r\nconst _: Encoding = Hex;"]}