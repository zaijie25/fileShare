{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\dns\\WangsuDns.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import IDNS, { DNSInfo } from \"./IDNS\";\r\nimport { ServerUrl } from \"../../../logic/core/setting/ServerRoutes\";\r\n\r\nexport default class WangsuDNS implements IDNS {\r\n    //网宿httpdns域名地址\r\n    // private httpDNSHost = \"edge.wshttpdns.com\";\r\n    //海外httpdns请求ip\r\n    private httpDNSAdverbIP = \"220.242.54.8\";\r\n    // private httpDNSAdverbIP = \"edge.wshttpdns.com\";\r\n\r\n    //大陆IP\r\n    private mainLandDNSIPs = [\"118.184.178.244\", \"118.184.176.205\", \"103.213.96.176\"]\r\n\r\n    //httpdns请求超时时长\r\n    private requestTimeout = 10000;\r\n\r\n    //host to ip arrays\r\n    private hostToIpMap = {};\r\n\r\n    private leftTTLTime = 0;\r\n\r\n    private isRunning = false;\r\n\r\n    private adverbIPMap = {};\r\n    private mainLandIPMap = {};\r\n    private IP_TYPE_ADVERB = 1;//海外IP\r\n    private IP_TYPE_MAINLAND = 2;//大陆IP\r\n\r\n    public init(cfg) { }\r\n\r\n    /**\r\n     * 预设置使用httpdns的host\r\n     * @param hosts \r\n     * @param callback 完成回调，如果使用回调最好在外部做好超时处理，10超时体验会比较差\r\n     */\r\n    public requestHosts(hosts: string[], callback, syncMode) {\r\n        if (hosts == null || hosts.length == 0) {\r\n            Logger.error(\"请求的hosts列表为空\")\r\n            return;\r\n        }\r\n\r\n        //使用海外IP\r\n        let url = this.getRequestUrl(this.httpDNSAdverbIP, hosts);\r\n        Global.Http.requestDirect(url,\r\n            (msg) => {\r\n                Logger.error(\"receive \", msg);\r\n                this.decodeMsg(msg, this.IP_TYPE_ADVERB)\r\n                if (syncMode && callback)\r\n                    callback()\r\n            },\r\n            () => {\r\n                this.handleError(callback)\r\n                if (syncMode && callback)\r\n                    callback();\r\n            }\r\n            , \"get\", null, this.requestTimeout);\r\n\r\n        let WangsuDNS = Global.Setting.WangsuDNS\r\n        let dnsArray = this.mainLandDNSIPs;\r\n        if (WangsuDNS && WangsuDNS.length > 0) {\r\n            Logger.error(\"use data dns\")\r\n            dnsArray = WangsuDNS\r\n        } else {\r\n            Logger.error(\"no use data dns\")\r\n        }\r\n        //同时使用国内ip并发请求。\r\n        for (let i = 0; i < dnsArray.length; i++) {\r\n            let mainLandIP = dnsArray[i]\r\n            let ipUrl = this.getRequestUrl(mainLandIP, hosts);\r\n            Global.Http.requestDirect(ipUrl, (msg) => {\r\n                this.decodeMsg(msg, this.IP_TYPE_MAINLAND)\r\n            }, () => {\r\n                this.handleError(callback)\r\n            }, \"get\", null, this.requestTimeout)\r\n\r\n        }\r\n\r\n        if (!syncMode && callback) {\r\n            callback();\r\n            Logger.error(\"call now\")\r\n        }\r\n    }\r\n\r\n    public getHttpRequestDNSInfo(url, ipAreaType = 0) {\r\n        let host = Global.UrlUtil.getHostFromUrl(url);\r\n        if (this.checkIsWangsuSelfIp(host)) {\r\n            let requestInfo = new DNSInfo();\r\n            requestInfo.realUrl = url;\r\n            requestInfo.ip = host;\r\n            requestInfo.host = \"edge.wshttpdns.com\";\r\n            requestInfo.headerMap = { \"Host\": \"edge.wshttpdns.com\" };\r\n            return requestInfo;\r\n        } else {\r\n            let ip = this.getIp(host, ipAreaType);\r\n            if (ip == null || ip == \"\") {\r\n                return null;\r\n            }\r\n            url = url.replace(host, ip);\r\n            let requestInfo = new DNSInfo();\r\n            requestInfo.realUrl = url;\r\n            requestInfo.ip = ip;\r\n            requestInfo.host = host;\r\n            requestInfo.headerMap = { \"Host\": host };\r\n            return requestInfo;\r\n        }\r\n    }\r\n\r\n    public getHttpDNSInfo(url:ServerUrl,ipAreaType =0){\r\n        let host = url.address\r\n        if (this.checkIsWangsuSelfIp(host)){\r\n            let requestInfo = new DNSInfo();\r\n            requestInfo.realUrl = url;\r\n            requestInfo.ip = host;\r\n            requestInfo.host = \"edge.wshttpdns.com\";\r\n            requestInfo.headerMap = { \"Host\": \"edge.wshttpdns.com\" };\r\n            return requestInfo;\r\n        }else {\r\n            let realHost = url.realHost\r\n            let addressHost = url.addressHost\r\n            let ip = this.getIp(realHost, ipAreaType);\r\n            if (ip == null || ip == \"\") {\r\n                //如果是自定义域名，则host走自定义域名\r\n                if (addressHost != realHost){\r\n                    url.address = realHost\r\n                    let dnsInfo = new DNSInfo()\r\n                    dnsInfo.ip = ip;\r\n                    dnsInfo.host = addressHost;\r\n                    let headerMap = { \"Host\": url.addressHost }\r\n                    if (url.cerPath){\r\n                        headerMap[\"CertPath\"] = url.cerPath\r\n                    }\r\n                    dnsInfo.headerMap = headerMap\r\n                    return dnsInfo;\r\n                }\r\n                return null;\r\n            }\r\n            url.address = ip\r\n            let requestInfo = new DNSInfo();\r\n            // requestInfo.realUrl = url;\r\n            requestInfo.ip = ip;\r\n            requestInfo.host = addressHost;\r\n            let headerMap = { \"Host\": url.addressHost }\r\n            if (url.cerPath){\r\n                headerMap[\"CertPath\"] = url.cerPath\r\n            }\r\n            requestInfo.headerMap = headerMap\r\n            return requestInfo;\r\n        }\r\n    }\r\n\r\n    public checkIsWangsuSelfIp(ip) {\r\n        if (ip == \"220.242.54.8\" || ip == \"118.184.178.244\" || ip == \"118.184.176.205\" || ip == \"103.213.96.176\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //获取IP\r\n    public getIp(host: string, ipAreaType = 0) {\r\n        // Logger.error(\"getIp ipAreaType=\" + ipAreaType)\r\n        let ips = null;\r\n        if (ipAreaType == this.IP_TYPE_ADVERB) {\r\n            ips = this.adverbIPMap[host]\r\n        } else if (ipAreaType == this.IP_TYPE_MAINLAND) {\r\n            ips = this.mainLandIPMap[host]\r\n        }\r\n        //如果取不到\r\n        if (ips == null || ips.length == 0) {\r\n            ips = this.hostToIpMap[host]\r\n        }\r\n\r\n        if (ips == null || ips.length == 0)\r\n            return null;\r\n        let randIndex = Math.floor(Math.random() * ips.length);\r\n        return ips[randIndex];\r\n    }\r\n\r\n    //定时器更新，暂定5秒更新一次\r\n    public update(time) {\r\n        if (!this.isRunning)\r\n            return;\r\n        this.leftTTLTime -= time;\r\n        if (this.leftTTLTime <= 0) {\r\n            //ttl跑完时  全部域名重新请求一次\r\n            this.isRunning = false;\r\n            this.reRequestAll();\r\n        }\r\n    }\r\n\r\n    private reRequestAll() {\r\n        let hostArr = []\r\n        for (let key in this.hostToIpMap) {\r\n            hostArr.push(key);\r\n        }\r\n        this.requestHosts(hostArr, null, false);\r\n    }\r\n\r\n    private decodeMsg(content, ipAreaType) {\r\n        let contentTab = null;\r\n        try {\r\n            contentTab = JSON.parse(content)\r\n        }\r\n        catch (e) {\r\n            contentTab = {};\r\n        }\r\n        if (contentTab.retCode == null || contentTab.retCode != 0 || contentTab.data == null)\r\n            return;\r\n\r\n        for (let key in contentTab.data) {\r\n            let host = key;\r\n            let ips = contentTab.data[key].ips;\r\n            if (ips.length <= 0 || contentTab.data[key].ttl == null || contentTab.data[key].ttl <= 0)\r\n                continue;\r\n            if (this.leftTTLTime <= 0 && contentTab.data[key].ttl > 0) {\r\n                this.leftTTLTime = contentTab.data[key].ttl\r\n                this.isRunning = true;\r\n            }\r\n            if (ipAreaType == this.IP_TYPE_ADVERB) {\r\n                this.adverbIPMap[host] = ips\r\n            } else {\r\n                this.mainLandIPMap[host] = ips\r\n            }\r\n            this.hostToIpMap[host] = ips;\r\n        }\r\n    }\r\n\r\n    private handleError(callback) {\r\n    }\r\n\r\n    //获取请求连接\r\n    private getRequestUrl(host: string, urls: string[]) {\r\n        let urlStr = urls.join(\";\")\r\n        return \"https://\" + host + \"/v1/httpdns/clouddns?ws_domain=\" + urlStr + \"&ws_ret_type=json\";\r\n    }\r\n}"]}