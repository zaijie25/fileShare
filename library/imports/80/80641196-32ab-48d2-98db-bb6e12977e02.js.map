{"version":3,"sources":["assets\\hall\\scripts\\framework\\net\\dun\\ZADun.ts"],"names":[],"mappings":";;;;;;AACA,iFAA4E;AAC5E,kEAAiE;AACjE,iDAAoD;AAEpD;IAOI,eAAY,OAAO;QAAnB,iBAUC;QAfO,cAAS,GAAG,KAAK,CAAC;QAClB,eAAU,GAAG,KAAK,CAAC;QACnB,YAAO,GAAG,OAAO,CAAC;QAClB,aAAQ,GAAG,CAAC,CAAC;QAGjB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,UAAC,MAAM;YACvD,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;gBACpB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aAC1B;iBAAM;gBACH,MAAM,CAAC,KAAK,CAAC,uCAAuC,GAAG,OAAO,GAAG,oBAAoB,CAAC,CAAA;aACzF;QACL,CAAC,CAAC,CAAA;IAEN,CAAC;IAEO,4BAAY,GAApB;QACI,OAAO,IAAI,CAAC,UAAU,CAAA;IAC1B,CAAC;IAEM,+BAAe,GAAtB,UAAuB,GAAO;QAC1B,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,EAAC;YAChB,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,OAAO;IACA,oBAAI,GAAX,UAAY,GAAG,EAAC,QAAmB;QAAnC,iBAmDC;QAlDG,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAA;QAC9B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAA;YACvD,OAAO;SACV;QACD,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,MAAM,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAA;YACtD,OAAO;SACV;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAC;YACjB,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAA;YAC7C,OAAO;SACV;QACD,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAA;QACnC,MAAM,CAAC,KAAK,CAAC,yBAAyB,GAAG,SAAS,CAAC,CAAA;QACnD,IAAI,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAA;QACvB,IAAI,SAAS,IAAI,wBAAQ,CAAC,IAAI,EAAE;YAC5B,+BAA+B;YAC/B,IAAI,QAAQ,EAAE;gBACV,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAC,MAAM;oBAC7C,+DAA+D;oBAC/D,IAAI,MAAM,EAAE;wBACR,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;wBAClC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,IAAI,GAAG,EAAE;4BAC9B,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;4BACtB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;4BAC9C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,wBAAc,CAAC,aAAa,GAAG,GAAG,GAAG,uBAAO,CAAC,MAAM,EAAC,CAAC,CAAC,CAAA;4BACjF,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAA;4BAC7C,2DAA2D;4BAC3D,uFAAuF;yBAC1F;6BAAM;4BACH,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAA;4BAC7C,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAA,CAAC,CAAC,EAAE,CAAA;4BACvD,IAAI,WAAW,GAAG,EAAE,QAAQ,EAAE,WAAW,GAAG,MAAM,EAAE,MAAM,EAAE,uBAAO,CAAC,MAAM,EAAC,WAAW,EAAC,SAAS,EAAC,CAAA;4BACjG,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC,uBAAU,CAAC,0BAA0B,EAAE,WAAW,CAAC,CAAA;yBAC1F;qBACJ;yBAAK;wBACF,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAA;wBACnD,IAAI,WAAW,GAAG,EAAE,QAAQ,EAAE,oCAAoC,EAAE,MAAM,EAAE,uBAAO,CAAC,MAAM,EAAC,CAAA;wBAC3F,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC,uBAAU,CAAC,0BAA0B,EAAE,WAAW,CAAC,CAAA;qBAC1F;oBAED,IAAI,QAAQ,EAAE;wBACV,QAAQ,EAAE,CAAA;qBACb;gBAEL,CAAC,CAAC,CAAC;aACN;SACJ;IAEL,CAAC;IAEM,4BAAY,GAAnB;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAC;YACjB,OAAO,wBAAQ,CAAC,MAAM,CAAA;SACzB;QACD,IAAI,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;QAC/C,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,uBAAO,GAAd,UAAe,OAAO;QAClB,oBAAoB;QACpB,IAAI,IAAI,GAAG,CAAC,CAAE;QACd,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,EAAC,OAAO,CAAC,CAAA;QAExD,MAAM,CAAC,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAC,CAAA;QAC5C,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,kCAAkB,GAAzB,UAA0B,IAAW,EAAC,OAAc,EAAC,IAAQ;QACzD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAC;YAChB,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAA;YAC1D,OAAO;SACV;QACD,IAAI,EAAE,GAAG,WAAW,CAAA;QACpB,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;QAChC,OAAO,EAAC,IAAI,EAAC,EAAE,EAAC,MAAM,EAAC,IAAI,EAAC,CAAA;IAChC,CAAC;IAEM,sBAAM,GAAb;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAC;YACjB,OAAO,KAAK,CAAA;SACf;QACD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAC9B,IAAI,GAAG,IAAI,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;SACJ;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAEL,YAAC;AAAD,CA5HA,AA4HC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import IDun from \"./IDun\";\r\nimport HallStorageKey from \"../../../logic/hallcommon/const/HallStorageKey\";\r\nimport { ReportTool } from \"../../../logic/core/tool/ReportTool\";\r\nimport { DUNTYPE, DUNSTATE } from \"./AppDunControl\";\r\n\r\nexport default class ZADun implements IDun {\r\n    \r\n    private isDunInit = false;\r\n    private _isSupport = false;\r\n    private sdkName = \"zadun\";\r\n    private _dunType = 0;\r\n\r\n    constructor(dunType){\r\n        this._dunType = dunType\r\n        Global.NativeEvent.isSupportSDK(this.sdkName, null, (retObj) => {\r\n            if (retObj.result == 0) {\r\n                this._isSupport = true;\r\n            } else {\r\n                Logger.error(\"checkAppIsSupportDunByType dunType = \" + dunType + \" isSupport = false\")\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    public  isAppSupport(){\r\n        return this._isSupport\r\n    }\r\n\r\n    public checkCfgIsValid(cfg:any){\r\n        if (cfg && cfg.key2){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //异步初始化\r\n    public init(cfg,callback?: Function) {\r\n        Logger.error(\"init ZADun SDK\")\r\n        if (!this.checkCfgIsValid(cfg)){\r\n            Logger.error(\"init ZADun SDK checkCfgIsValid  = false\")\r\n            return;\r\n        }\r\n        if (this.isDunInit) {\r\n            Logger.error(\"init ZADun SDK this.isTDunInit  = true\")\r\n            return;\r\n        }\r\n        if (!this._isSupport){\r\n            Logger.error(\"init ZADun SDK is not support\")\r\n            return;\r\n        }\r\n        let initState = this.getInitState()\r\n        Logger.error(\"init ZADun SDK state = \" + initState)\r\n        let zaDunkey = cfg.key2\r\n        if (initState == DUNSTATE.INIT) {\r\n            // Logger.error(\"initZADunSDK\")\r\n            if (zaDunkey) {\r\n                Global.NativeEvent.initZADunSDK(zaDunkey, (retObj) => {\r\n                    // Logger.error(\"initZADunSDK ret = \" + JSON.stringify(retObj))\r\n                    if (retObj) {\r\n                        let result = Number(retObj.result)\r\n                        if (result == 0 || result == 0.0) {\r\n                            this.isDunInit = true;\r\n                            Global.Event.event(GlobalEvent.DunInitFinish);\r\n                            Global.Setting.storage.set(HallStorageKey.DunInitRecord + \"_\" + DUNTYPE.ZA_DUN,1)\r\n                            Logger.error(\"initZADunSDK ret = 0 success \")\r\n                            // let reportParam = { \"result\": 0 ,\"type\": DUNTYPE.ZA_DUN}\r\n                            // Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_OK, reportParam)\r\n                        } else {\r\n                            Logger.error(\"initZADunSDK ret != 0 failed \")\r\n                            let funcParam = retObj.funcParam ? retObj.funcParam: \"\"\r\n                            let reportParam = { \"result\": \"ret != 0 \" + result ,\"type\": DUNTYPE.ZA_DUN,\"error_msg\":funcParam}\r\n                            Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_ERROR, reportParam)\r\n                        }\r\n                    }else {\r\n                        Logger.error(\"initZADunSDK retObj == null failed \")\r\n                        let reportParam = { \"result\": \"initZADunSDK retObj == null failed\" ,\"type\": DUNTYPE.ZA_DUN}\r\n                        Global.ReportTool.ReportClientError(ReportTool.REPORT_TYPE_INIT_DUN_ERROR, reportParam) \r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback()\r\n                    }\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public getInitState() {\r\n        if (!this._isSupport){\r\n            return DUNSTATE.FAILED\r\n        }\r\n        let ret = Global.NativeEvent.getZADunInitRet();\r\n        return ret;\r\n    }\r\n\r\n    public getPort(lo_port) {\r\n        //后续App添加了单独获取port方法\r\n        let port = 0 ;\r\n        port = Global.NativeEvent.getZADunPortByAddr(\"\",lo_port)\r\n        \r\n        Logger.error(\"ZADun getPort port = \" + port)\r\n        return port;\r\n    }\r\n\r\n    public getServerIPAndPort(host:string,lo_port:number,attr:any){\r\n        if (!this.isDunInit){\r\n            Logger.error(\"ZADun getServerIPAndPort isDunInit = false\")\r\n            return;\r\n        }\r\n        let ip = \"127.0.0.1\"\r\n        let port = this.getPort(lo_port)\r\n        return {\"ip\":ip,\"port\":port}\r\n    }\r\n\r\n    public isInit() {\r\n        if (!this._isSupport){\r\n            return false\r\n        }\r\n        if (!this.isDunInit) {\r\n            let ret = this.getInitState();\r\n            if (ret == 0) {\r\n                this.isDunInit = true;\r\n            }\r\n        }\r\n        return this.isDunInit;\r\n    }\r\n\r\n}"]}