{"version":3,"sources":["assets\\ermj\\Ermj\\scripts\\subView\\mahjong\\ErmjMahjongHillView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ErmjBaseView from \"../ErmjBaseView\";\r\nimport ErmjGameConst from \"../../data/ErmjGameConst\";\r\n\r\n/** 麻将牌山*/\r\nexport default class ErmjMahjongHillView extends ErmjBaseView{\r\n    /** 牌墙数组 key为0属于自己牌墙, 其他按照摸牌顺序顺时针依次往后123..., 与座位逆时针不同  */\r\n    public wallList: ErmjMahjongWallView[] = [];\r\n\r\n    private forwardOffset = 0;     // 麻将墙当前麻将指向偏移, 即正向接下来要发的那张, 0~71 按照自己开始顺时针数\r\n    private startIndex = 0;\r\n    private backOffset = 0;         // 麻将墙末尾麻将指向偏移,即逆向接下来要发的那张的前一张, 0~-72, 用于从尾部补牌\r\n    private backJump = -1;           //  > 0有效 记录尾部摸时跳过的上方realIndex 正向摸牌需要用此处理临界情况\r\n    \r\n    /** 牌山已摸完 */\r\n    private isFinish: boolean = false;\r\n\r\n    constructor(node: cc.Node){\r\n        super();\r\n        this.setNode(node);\r\n    }\r\n\r\n    protected initView(){\r\n        for (let i = 0; i< ErmjGameConst.mahjongWall; i++){\r\n            let node = this.getChild(\"wall_\" + i.toString());           // 0属于自己座位取本地座位\r\n            let wallView = new ErmjMahjongWallView(node, i == 1);\r\n            wallView.active = true;\r\n            this.wallList.push(wallView);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化发牌麻将墙\r\n     * @param startSeatView 摸牌起点所在座位 由此获取起点牌墙索引(顺时针转逆时针计算)\r\n     * @param nStart 牌墙内摸牌起点 需要计算\r\n     */\r\n    public initWallDeal(startSeatView: number, startInWall: number){\r\n        let wallIndex = (ErmjGameConst.mahjongWall - startSeatView) % ErmjGameConst.mahjongWall;            // 顺时针转逆时针求得 牌墙索引\r\n        let indexInHill = startInWall + wallIndex *(ErmjGameConst.mahjongTotal / ErmjGameConst.mahjongWall)        // 计算得牌墙内起点在牌山内的索引\r\n        \r\n        this.startIndex = indexInHill;\r\n        this.forwardOffset = 0;\r\n        this.backOffset = 0;\r\n        this.backJump = -1;\r\n\r\n        this.isFinish = false;\r\n        this.wallList.forEach(wall=>{\r\n            wall.showAll(true);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 摸牌\r\n     * @param count 发接下来几张牌\r\n     */\r\n    public doDeal(count: number = 1){\r\n        if (this.isFinish)\r\n            return console.error(\"doDeal error, 麻将已经发完啦\", this.forwardOffset, this.backOffset);        // 牌局结束, 理论上不会进来的异常情况\r\n \r\n        let nextRealIndex = this.getForwardCurIndex(this.forwardOffset + 1);\r\n        for (let i = 0; i < count; i++){\r\n            let realIndex = this.getForwardCurIndex(this.forwardOffset);\r\n            let [wallIndex, countInWall] = this.calculateIndex(realIndex);\r\n            if (this.backJump == nextRealIndex){\r\n                this.forwardOffset ++;\r\n                realIndex = this.getForwardCurIndex(this.forwardOffset);\r\n                [wallIndex, countInWall] = this.calculateIndex(realIndex);\r\n            }\r\n            this.wallList[wallIndex].dealNextCount(countInWall);\r\n\r\n            this.forwardOffset ++;\r\n            let left = this.getFinishLeft();\r\n            if (left <= 0){         \r\n                this.isFinish = true;\r\n                break;\r\n            }\r\n            // 剩余一张并且backJump有效临界处理时会有一次-2跳变, 所以left判断使用<=\r\n            // if (left == 1 && this.backJump > -1){\r\n            //     if (this.backJump == nextRealIndex){\r\n            //         this.forwardOffset += 1;\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从牌墙末尾补牌\r\n     * @param count 补末尾几张牌\r\n     */\r\n    public doPatchwork(count: number = 1){\r\n        if (this.isFinish)\r\n            return console.error(\"doPatchwork error, 麻将已经发完啦\", this.forwardOffset, this.backOffset);        // 牌局结束, 理论上不会进来的异常情况\r\n        \r\n        let forwardRealIndex = this.getForwardCurIndex(this.forwardOffset);\r\n        for (let i = 0; i < count; i++){\r\n            this.backOffset--;\r\n            let [realIndex, jump] = this.getBackCurIndex(this.backOffset);\r\n            this.backJump = jump;   // 记录给正向摸牌\r\n            if (jump == forwardRealIndex){\r\n                this.backOffset--;\r\n                [realIndex, jump] = this.getBackCurIndex(this.backOffset);\r\n                this.backJump = jump;   \r\n            }\r\n\r\n            let [wallIndex, countInWall] = this.calculateIndex(realIndex);\r\n            this.wallList[wallIndex].dealNextCount(countInWall);\r\n            \r\n            let left = this.getFinishLeft();\r\n            if (left <= 0){    \r\n                this.isFinish = true;\r\n                break;\r\n            }\r\n            // 剩余一张并且两个指向差2临届处理时, 会有一次-2跳变, 从1变成-1, 所以left判断使用<=\r\n            // if (left == 1){\r\n            //     if (Math.abs(realIndex - forwardRealIndex) == 2)\r\n            //         this.backOffset -= 1;\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 计算牌索引\r\n     * @returns [牌墙索引, 在牌墙内的索引]\r\n     * @param realIndex 在牌山的索引\r\n     */\r\n    private calculateIndex(realIndex: number){\r\n        let perCount = ErmjGameConst.mahjongTotal / ErmjGameConst.mahjongWall;\r\n        let wallIndex = Math.floor(realIndex / perCount);\r\n        let countInWall = realIndex % perCount;\r\n        return [wallIndex, countInWall];\r\n    }\r\n\r\n    /** 根据正向偏移获取摸牌的实际index 正向摸牌是先上面, 再下面*/\r\n    private getForwardCurIndex(offset: number){\r\n        return (this.startIndex + offset + ErmjGameConst.mahjongTotal) % ErmjGameConst.mahjongTotal;\r\n    }\r\n\r\n    /** 根据逆向偏移获取摸牌的实际index 需根据index奇偶作校准, 因为逆向摸牌也是先上面, 再下面\r\n     * @returns [校准后的readlIndex, 校准跳过的那张readlIndex];\r\n    */\r\n    private getBackCurIndex(offset: number){\r\n        let index = (this.startIndex + offset + ErmjGameConst.mahjongTotal) % ErmjGameConst.mahjongTotal;\r\n        let jump = -1;\r\n        if(index % 2 == 0){\r\n            jump = -1;\r\n            index += 1;\r\n        }\r\n        else{\r\n            jump = index;\r\n            index -= 1;\r\n        }\r\n        return [(index + ErmjGameConst.mahjongTotal) % ErmjGameConst.mahjongTotal, jump];\r\n    }\r\n\r\n    /** 检查牌山真实剩余麻将数 */\r\n    private getFinishLeft(){\r\n        return ErmjGameConst.mahjongTotal - this.forwardOffset + this.backOffset;\r\n    }\r\n\r\n    public clearByRound(){\r\n        this.active = false;\r\n    }\r\n}\r\n\r\nclass ErmjMahjongWallView extends ErmjBaseView{\r\n    private mahjongNodeList: cc.Node[] = [];\r\n    private mjCount = ErmjGameConst.mahjongTotal / ErmjGameConst.mahjongWall;\r\n\r\n    constructor(node: cc.Node, public isInverse: boolean){\r\n        super();\r\n        this.setNode(node);\r\n    }\r\n\r\n    protected initView(){\r\n        for(let i = 0; i < this.mjCount; i++){\r\n            let node = this.getChild(\"majiang\" + i.toString());\r\n            this.mahjongNodeList.push(node);\r\n        }\r\n    }\r\n\r\n    public dealNextCount(index: number, count: number = 1){\r\n        for(let i = index; i < index + count; i++){\r\n            let localIndex = this.getLocalIndex(i);\r\n            if(this.mahjongNodeList[localIndex]){\r\n                this.mahjongNodeList[localIndex].active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public showAll(flag: boolean){\r\n        this.mahjongNodeList.forEach(node=>{\r\n            node.active = flag;\r\n        })\r\n    }\r\n\r\n    /** 倒置牌墙的序号校准 index： 为从0开始*/\r\n    private getLocalIndex(index: number){\r\n        if(!this.isInverse)\r\n            return index;\r\n        if (index % 2 == 0)\r\n            return this.mjCount - index - 2;      // 因为对家牌墙UI是直接镜像过去的, 头尾得互换, 需要校准序号 0-34 1-35 2-32 3-33\r\n        else\r\n            return this.mjCount - index;\r\n    }\r\n}"]}