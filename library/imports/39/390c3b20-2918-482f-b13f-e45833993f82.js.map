{"version":3,"sources":["assets\\bbwz\\Bbwz\\scripts\\subview\\poker\\BbwzComparePokerView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import BbwzBaseView from \"../BbwzBaseView\";\r\nimport BbwzConstDefine from \"../../data/BbwzConstDefine\";\r\nimport BbwzPokerGroupView from \"./BbwzPokerGroupView\";\r\n\r\nexport default class BbwzComparePokerView extends BbwzBaseView{\r\n    private groupMap: Map<string, BbwzPokerGroupView> = new Map;\r\n    private dealWorldPos: cc.Vec2;\r\n\r\n    constructor(node: cc.Node){\r\n        super();\r\n        this.setNode(node);\r\n    }\r\n\r\n    protected initView(){\r\n        for(let i = 0; i < BbwzConstDefine.GROUP_DEFINE.length; i++){\r\n            let key = BbwzConstDefine.GROUP_DEFINE[i];\r\n            let groupNode = this.getChild(`content/compare/group_${key}`);\r\n            let group = new BbwzPokerGroupView(groupNode, key);\r\n            group.active = false;\r\n            this.groupMap.set(key, group);\r\n        }\r\n        let dealRoot = this.getChild(\"content/dealRoot\");\r\n        this.dealWorldPos = dealRoot.parent.convertToWorldSpaceAR(dealRoot.position);\r\n    }\r\n\r\n    public doOneGroupPokersFirstDeal(groupKey: string, needPlay: boolean, callback?: Function){\r\n        if (!this.groupMap.has(groupKey))\r\n            return;\r\n        let group = this.groupMap.get(groupKey);\r\n        group.active = true;\r\n        group.showGroupPokers(true, false);     // 显示牌背\r\n        if (needPlay){\r\n            group.doFirstDeal(this.dealWorldPos, 0.15, 0, callback);\r\n        }\r\n        else{\r\n            group.doFirstDealDirectly();\r\n            if (callback)\r\n                callback();\r\n        }\r\n    }\r\n\r\n    public doOneGroupPokersFlop(groupKey: string, pointJson: any, needPlay: boolean){\r\n        let group = this.groupMap.get(groupKey);\r\n        if (group && pointJson[groupKey]){\r\n            let groupData = pointJson[groupKey];\r\n            if (needPlay)\r\n                group.showDownPoker(groupData.poker, groupData.type, groupData.multi, 0, 1);\r\n            else{\r\n                group.setGroupPokerValue(groupData.poker, groupData.type, groupData.multi);      // 设置牌面\r\n                group.flopPokersDirectly();\r\n            }\r\n            // group.setGroupPokerValue(groupData.poker, groupData.type, groupData.multi);      // 设置牌面\r\n            // if (needPlay){\r\n            //     group.flopPokers(0.35);\r\n            // }\r\n            // else\r\n            //     group.flopPokersDirectly();\r\n        }\r\n    }\r\n\r\n    public doAllGroupPokersFirstDeal(){\r\n        this.groupMap.forEach(group=>{\r\n            group.active = true;\r\n            group.showGroupPokers(true, false);     // 显示牌背\r\n            group.doFirstDealDirectly();\r\n        })\r\n    }\r\n\r\n    public doAllGroupPokerDispatch(needPlay: boolean, pointJson: any){\r\n        this.groupMap.forEach((group, key)=>{\r\n            if (pointJson[key]){\r\n                let groupData = pointJson[key];\r\n                group.setGroupPokerValue(groupData.src_poker, groupData.type, groupData.multi);\r\n            }\r\n            if (needPlay){\r\n                group.doDispatch(0.15);\r\n            }\r\n            else{\r\n                group.dispatchPokersDirectly();\r\n                group.showGroupPokers(true, true);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 播报牌型点数\r\n     * @param isPlay 是否播放\r\n     * @param groupKey 手牌堆标识\r\n     */\r\n    public playPointSound(isPlay: boolean, groupKey: string){\r\n        if (isPlay) {\r\n            let group = this.groupMap.get(groupKey);\r\n            if (group){\r\n                group.playTypeSound();\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearByRound(){\r\n        this.groupMap.forEach(group=>{\r\n            group.reset();\r\n            group.active = false;\r\n        });\r\n        this.active = false;\r\n    }\r\n}"]}