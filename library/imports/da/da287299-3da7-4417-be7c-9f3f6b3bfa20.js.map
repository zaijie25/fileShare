{"version":3,"sources":["assets\\hall\\scripts\\framework\\event\\EventDispatcher.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import EventHandler from \"./EventHandler\";\r\nexport default class EventDispatcher  {\r\n    private eventMap = {}\r\n\r\n\r\n    public hasListener(type)\r\n    {\r\n        let listener = this.eventMap && this.eventMap[type];\r\n        return listener != null;\r\n    }\r\n\r\n    public on(type:string, caller, method:Function, args?)\r\n    {\r\n        return this._createListener(type, caller, method, args, false);\r\n    }\r\n\r\n    public once(type:string, caller, method:Function, args?)\r\n    {\r\n        return this._createListener(type, caller, method, args, true);\r\n    }\r\n\r\n    /**\r\n     * 从 EventDispatcher 对象中删除侦听器。\r\n     * @param type\t\t事件的类型。\r\n     * @param caller\t事件侦听函数的执行域。\r\n     * @param listener\t事件侦听函数。\r\n     * @param onceOnly\t（可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。\r\n     */\r\n    public off(type:string, caller, method:Function, onceOnly = false)\r\n    {\r\n        if(this.eventMap == null || this.eventMap[type] == null)\r\n            return this;\r\n\r\n        let listener = this.eventMap[type];\r\n\r\n        //单个handler\r\n        if(listener.run)\r\n        {\r\n            if((caller == null || listener.caller == caller) && (method == null || listener.method == method) && (!onceOnly || listener.once))\r\n            {\r\n                delete(this.eventMap[type]);\r\n                listener.recover();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let count = 0;\r\n            let n = listener.length;\r\n            for (let i = 0; i < n; i++) {\r\n                let item = listener[i];\r\n                if (!item)\r\n                {\r\n                    count++;\r\n                    continue;\r\n                }\r\n                if (item && (!caller || item.caller === caller) && (method==null || item.method === method) && (!onceOnly || item.once)) {\r\n                    count++;\r\n                    listener[i] = null;\r\n                    item.recover();\r\n                }\r\n            }\r\n            //如果全部移除，则删除索引\r\n            if (count === n) delete this.eventMap[type];\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public offAll(type:string) \r\n    {\r\n        var events = this.eventMap;\r\n        if (!events) return this;\r\n        if (type) \r\n        {\r\n            this.recoverHandlers(events[type]);\r\n            delete events[type];\r\n        } \r\n        else \r\n        {\r\n            for (let name in events) \r\n            {\r\n                this.recoverHandlers(events[name]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public offAllByCaller(caller:any) {\r\n        if (caller && this.eventMap) {\r\n            for (var name in this.eventMap) {\r\n                this.off(name, caller, null);\r\n            }\r\n        }\t\t\t\r\n        return this;\r\n    }\r\n\r\n\r\n        /**\r\n     * 派发事件。\r\n     * @param type\t事件类型。\r\n     * @param data\t（可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p ，且 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。\r\n     * @return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。\r\n     */\r\n    public event(type:string, ...data) \r\n    {\r\n        if (!this.eventMap || !this.eventMap[type]) return false;\r\n        \r\n        let listeners:any = this.eventMap[type];\r\n        if (listeners.run) {\r\n            if (listeners.once) delete this.eventMap[type];\r\n            data != null ? listeners.runWith(data) : listeners.run();\r\n        } else {\r\n            for (let i = 0, n = listeners.length; i < n; i++) {\r\n                let listener:EventHandler = listeners[i];\r\n                if (listener) {\r\n                    (data != null) ? listener.runWith(data) : listener.run();\r\n                }\r\n                if (!listener || listener.once) {\r\n                    listeners.splice(i, 1);\r\n                    i--;\r\n                    n--;\r\n                }\r\n            }\r\n            if (listeners.length === 0 && this.eventMap) delete this.eventMap[type];\r\n        }\r\n        \r\n        return true;\r\n\t}\r\n\r\n    private recoverHandlers(arr:any):void \r\n    {\r\n        if (!arr) return;\r\n        if (arr.run) \r\n        {\r\n            arr.recover();\r\n        } else \r\n        {\r\n            for (let i = arr.length - 1; i > -1; i--) \r\n            {\r\n                if (arr[i]) \r\n                {\r\n                    arr[i].recover();\r\n                    arr[i] = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _createListener(type:string, caller, method:Function, args, once, offBefroe = false)\r\n    {\r\n        offBefroe && this.off(type, caller, method, once);\r\n\r\n        let handler = EventHandler.create(caller || this, method, args, once);\r\n        \t\t\t//默认单个，每个对象只有多个监听才用数组，节省一个数组的消耗\r\n        if (!this.eventMap[type]) this.eventMap[type] = handler;\r\n        else {\r\n            if (!this.eventMap[type].run) this.eventMap[type].push(handler);\r\n            else this.eventMap[type] = [this.eventMap[type], handler];\r\n        }\r\n        return this;\r\n    }\r\n\r\n}\r\n"]}