{"version":3,"sources":["assets\\hall\\scripts\\framework\\resource\\ResourceManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ReleaseHelper from \"../../logic/core/tool/ReleaseHelper\";\r\n\r\nclass CacheInfo\r\n{\r\n    refs:Set<string>;\r\n    uses:Set<string>;\r\n}\r\n\r\n//资源管理器\r\n//@todo  资源加载，依赖管理， 资源释放\r\n\r\nexport default class ResourceManager\r\n{\r\n\r\n    //资源映射\r\n    private _resMap:Map<string, CacheInfo> = new  Map<string, CacheInfo>();\r\n    //收集依赖的资源路径\r\n    private _useSet:Set<string> = new Set<string>();\r\n\r\n    public releaseHelper:ReleaseHelper = new ReleaseHelper;\r\n    private _gameBundle:string;\r\n\r\n\r\n\r\n    public get gameBundle(){\r\n        return this._gameBundle\r\n    }\r\n\r\n    public set gameBundle(bundle:string){\r\n        this._gameBundle = bundle;\r\n    }\r\n\r\n    private _getResItem(url:string, type: typeof cc.Asset)\r\n    {\r\n        // let ccloader: any = cc.loader;\r\n        // let item = ccloader._cache[url];\r\n        // if (!item) {\r\n        //     let uuid = ccloader._getResUuid(url, type, false);\r\n        //     if (uuid) {\r\n        //         let ref = ccloader._getReferenceKey(uuid);\r\n        //         item = ccloader._cache[ref];\r\n        //     }\r\n        // }\r\n        // return item;\r\n    }\r\n\r\n    private addDependKey (item, refKey)\r\n    {\r\n        if (item && item.dependKeys && Array.isArray(item.dependKeys)) {\r\n            for (let depKey of item.dependKeys) {\r\n                // 记录该资源被我引用\r\n                this.getCacheInfo(depKey).refs.add(refKey);\r\n                // Logger.log(`${depKey} ref by ${refKey}`);\r\n                let ccloader: any = cc.loader;\r\n                let depItem = ccloader._cache[depKey]\r\n                this.addDependKey(depItem, refKey)\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCacheInfo(key: string): CacheInfo {\r\n        if (!this._resMap.has(key)) {\r\n            this._resMap.set(key, {\r\n                refs: new Set<string>(),\r\n                uses: new Set<string>()\r\n            });\r\n        }\r\n        return this._resMap.get(key);\r\n    }\r\n\r\n    public print(id)\r\n    {\r\n        for(let key in this._resMap)\r\n        {\r\n            if(key.indexOf(id))\r\n                Logger.error(this._resMap[id])\r\n        }\r\n    }\r\n\r\n\r\n    //加载单个资源\r\n    //只能加载Resources下资源，不能加后缀名\r\n    //collectDep 是否收集依赖，暂时只对大厅ui和预加载资源生效 \r\n    public loadRes(url:string, onComplete?:(error: Error, resource: any) => void, type?, \r\n        onProgress?:(completedCount: number, totalCount: number, item: any) => void, \r\n        autoRelease?:boolean, collectDep:boolean = false)\r\n    {\r\n        let self = this;\r\n        let completeFunc = (error: Error, resource: any)=>{\r\n            if(collectDep)\r\n            {\r\n                if(!this._useSet.has(url))\r\n                    this._useSet.add(url);\r\n                \r\n            }\r\n            if(onComplete) {\r\n                onComplete(error, resource);\r\n            }\r\n        }\r\n        if (url.indexOf(\"@\") > 0){\r\n            let urlArray = url.split(\"@\")\r\n            if (urlArray && urlArray.length > 0){\r\n                let bundleName = urlArray[0]\r\n                let resPath = urlArray[1]\r\n                if (bundleName && resPath){\r\n                    if (bundleName == \"hall\"){\r\n                      this.loadBundleRes(Global.customApp.getHallBundleName(),resPath,completeFunc)\r\n                    }else {\r\n                        Logger.error(\"bundleName not exist\")\r\n                    }\r\n                }else {\r\n                    if (completeFunc){\r\n                        let error = new Error();\r\n                        error.message = \"res load error\"\r\n                        completeFunc(error,null)\r\n                    }\r\n                }\r\n            }else {\r\n                if (completeFunc){\r\n                    let error = new Error();\r\n                    error.message = \"res load error\"\r\n                    completeFunc(error,null)\r\n                }\r\n            }\r\n        }else {\r\n            cc.loader.loadRes(url, type, onProgress, completeFunc);\r\n        }\r\n        \r\n    }\r\n\r\n    //加载资源列表\r\n    public loadResArr(urls:string[], onComplete?:(error: Error, resource: any) => void\r\n        , type?, onProgress?:(completedCount: number, totalCount: number, item: any) => void, autoRelease?:boolean,\r\n         collectDep = false)\r\n    {\r\n        let self = this;\r\n        let completeFunc = (error: Error, resource: any)=>{\r\n            if(error != null && CC_PREVIEW)\r\n                Logger.error(error);\r\n            if (!resource)\r\n                return Logger.error(\"resource == null\", JSON.stringify(urls));\r\n            resource.forEach((asset:any, index:number) => {\r\n\r\n                if(collectDep)\r\n                {\r\n                    let url = urls[index];\r\n                    if(!this._useSet.has(url))\r\n                        this._useSet.add(url);\r\n                    let item = this._getResItem(url, type);\r\n                    if (item && item.id) {\r\n                        this.addDependKey(item, item.id);\r\n                    } else {\r\n                        // Logger.warn(`addDependKey item error1! for ${url}`);\r\n                    }\r\n                    // 给自己加一个自身的引用\r\n                    if (item) {\r\n                        let info = this.getCacheInfo(item.id);\r\n                        info.refs.add(item.id);\r\n                    }\r\n                }\r\n            });\r\n            if(autoRelease && !error) {\r\n                resource.forEach((asset:any, index:number) => {\r\n                    self.setAutoReleaseRecursively(asset, true);\r\n                });\r\n            }\r\n            if(onComplete) {    \r\n                onComplete(error, resource);\r\n            }\r\n        }\r\n        cc.loader.loadResArray(urls, type, onProgress, completeFunc);\r\n    }\r\n\r\n    //加载路径下所有资源\r\n    public loadResDir(url:string, onComplete?:(error: Error, resource: any) => void, type?, onProgress?:(completedCount: number, totalCount: number, item: any) => void, autoRelease?:boolean)\r\n    {\r\n        let self = this;\r\n        let completeFunc = (error: Error, resource: any)=>{\r\n\r\n            if(autoRelease && !error) {\r\n                resource.forEach((asset:any, index:number) => {\r\n                    self.setAutoReleaseRecursively(asset, true);\r\n                });\r\n            }\r\n            if(onComplete) {\r\n                onComplete(error, resource);\r\n            }\r\n        }\r\n        cc.loader.loadResDir(url, type, onProgress, completeFunc);\r\n    }\r\n\r\n    public setAutoRelease(res, autoRelease)\r\n    {\r\n        cc.loader.setAutoRelease(res, autoRelease);\r\n    }\r\n\r\n    //切场景时清理资源\r\n    public setAutoReleaseRecursively(res, autoRelease)\r\n    {\r\n        cc.loader.setAutoReleaseRecursively(res, autoRelease);\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取自动图集图片\r\n     * @param {cc.Sprite} sprite\r\n     * @param {string} url\r\n     * @param {string} atalsName\r\n     * @param {string} spName\r\n     * @memberof ResourceManager\r\n     */\r\n    public loadAutoAtlas(sprite:cc.Sprite, url:string, spName:string, onComplete?:Function, autoRelease?:boolean)\r\n    {\r\n        let self = this\r\n        if(CC_PREVIEW)\r\n        {\r\n            let index = url.lastIndexOf(\"/\");\r\n            if(index > 0){\r\n                url = url.substring(0, index);\r\n            }\r\n            let texture = this.getRes(url + \"/\" + spName, cc.Texture2D);\r\n            if (texture) {\r\n                if(!sprite.isValid) {\r\n                    return;\r\n                }\r\n\r\n                sprite.spriteFrame = new cc.SpriteFrame(texture);\r\n                if(onComplete) {\r\n                    onComplete();\r\n                }\r\n            }\r\n            else {\r\n                this.loadRes(url + \"/\" + spName, (error, texture:cc.Texture2D)=>{\r\n                    if(error != null) {\r\n                        Logger.error(error.message, url + \"/\" + spName);\r\n                    }\r\n                    if(texture == null) {\r\n                        return;\r\n                    } \r\n                    if(autoRelease != null && autoRelease != undefined) {\r\n                        self.setAutoReleaseRecursively(texture, autoRelease);\r\n                    }\r\n                    \r\n                    if(!sprite.isValid) {\r\n                        return;\r\n                    }\r\n                    sprite.spriteFrame = new cc.SpriteFrame(texture);\r\n\r\n                    if(onComplete) {\r\n                        onComplete();\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            let atlas = this.getRes(url, cc.SpriteAtlas);\r\n            if (atlas) {\r\n                let spframe = atlas.getSpriteFrame(spName);\r\n                if(spframe == null){\r\n                    Logger.error(\"找不到sprite\", spName);\r\n                    return;\r\n                }\r\n                if(!sprite.isValid) {\r\n                    return;\r\n                }\r\n                sprite.spriteFrame = spframe;\r\n\r\n                if(onComplete) {\r\n                    onComplete();\r\n                }\r\n            }\r\n            else{\r\n                this.loadRes(url, (error, atlas:cc.SpriteAtlas)=>{\r\n                    if(error != null) {\r\n                        Logger.error(error.message);\r\n                    }  \r\n                    if(atlas == null) {\r\n                        return;\r\n                    }\r\n                    if(autoRelease != null && autoRelease != undefined) {\r\n                        self.setAutoReleaseRecursively(atlas, autoRelease);\r\n                    }\r\n\r\n                    let spframe = atlas.getSpriteFrame(spName);\r\n                    if(spframe == null) {\r\n                        Logger.error(\"找不到sprite\", spName);\r\n                        return;\r\n                    }\r\n                    if(!sprite.isValid) {\r\n                        return;\r\n                    }\r\n                    sprite.spriteFrame = spframe;\r\n                    \r\n                    if(onComplete) {\r\n                        onComplete();\r\n                    }\r\n                }, cc.SpriteAtlas);\r\n            }\r\n        }\r\n    }\r\n\r\n    //支持加载单个或多个资源\r\n    //支持加载远程资源\r\n    //支持本地资源（绝对路径）\r\n    // cc.loader.load('a.png', function (err, tex) {\r\n    //     Logger.log('Result should be a texture: ' + (tex instanceof cc.Texture2D));\r\n    // });\r\n    \r\n    // cc.loader.load('http://example.com/a.png', function (err, tex) {\r\n    //     Logger.log('Should load a texture from external url: ' + (tex instanceof cc.Texture2D));\r\n    // });\r\n    \r\n    // cc.loader.load({url: 'http://example.com/getImageREST?file=a.png', type: 'png'}, function (err, tex) {\r\n    //     Logger.log('Should load a texture from RESTful API by specify the type: ' + (tex instanceof cc.Texture2D));\r\n    // });\r\n    \r\n    // cc.loader.load(['a.png', 'b.json'], function (errors, results) {\r\n    //     if (errors) {\r\n    //         for (var i = 0; i < errors.length; i++) {\r\n    //             Logger.log('Error url [' + errors[i] + ']: ' + results.getError(errors[i]));\r\n    //         }\r\n    //     }\r\n    //     var aTex = results.getContent('a.png');\r\n    //     var bJsonObj = results.getContent('b.json');\r\n    // });\r\n    public load(resources, onComplete?:Function, onProgress? )\r\n    {\r\n        cc.loader.load(resources, onProgress, onComplete);\r\n    }\r\n\r\n\r\n    public loadResSprite(sp:cc.Sprite ,atlas:string, icon:string) \r\n    {\r\n        Global.ResourceManager.loadRes(atlas, (error, atlas:cc.SpriteAtlas)=>\r\n        {\r\n            if(error != null)\r\n            {\r\n                Logger.error(\"加载图集错误\", error.message);\r\n            }\r\n            if(atlas == null || !atlas.getSpriteFrame(icon))\r\n            {\r\n                Logger.error(\"找不到资源\", atlas, icon);\r\n                return;\r\n            }\r\n            sp.spriteFrame = atlas.getSpriteFrame(icon);\r\n        }, cc.SpriteAtlas)\r\n    }\r\n\r\n\r\n    public getRes(url:string, type:any)\r\n    {\r\n        return cc.loader.getRes(url, type)\r\n    }\r\n\r\n    //预加载部分图集\r\n    public loadAtlasArr(urls:string[], onComplete? :(error: Error, resource: any) => void)\r\n    {\r\n        this.loadResArr(urls, (error, resources)=>\r\n        {\r\n            if(error != null)\r\n            {\r\n                Logger.error(\"加载图集异常\", error.message);\r\n            }\r\n            for(let i = 0; i < urls.length; i++)\r\n            {\r\n                let atlas = this.getRes(urls[i], cc.SpriteAtlas);\r\n                if(atlas != null)\r\n                    this.atlasMap[urls[i]] = atlas;\r\n            }\r\n            if(onComplete)\r\n                onComplete(error, resources);\r\n        }, cc.SpriteAtlas, null, false, true);\r\n    }\r\n\r\n\r\n    private atlasMap = {};\r\n\r\n    //返回cc.spriteAtlas  可能为空  \r\n    public getAtlas(url:string):cc.SpriteAtlas\r\n    {\r\n        let atlas = this.atlasMap[url];\r\n        if(atlas == null)\r\n        {\r\n            Logger.error(\"获取图集为空，需要自行预加载图集  或者适用ResLoad 手动加载图集\", url)\r\n        }\r\n        if(!cc.isValid(atlas))\r\n        {\r\n            Logger.error(\"图集已经销毁，不应该再适用，需检查原因\", url);\r\n            atlas = null;\r\n        }\r\n\r\n        return atlas;\r\n    }\r\n\r\n    public getSprite(atlasPath:string, spName:string)\r\n    {\r\n        let atlas = this.getAtlas(atlasPath);\r\n        if(atlas == null)\r\n            return null;\r\n        return atlas.getSpriteFrame(spName);\r\n    }\r\n\r\n\r\n\r\n    //-----资源释放接口 -------\r\n\r\n    public releaseRes(url:string, type?)\r\n    {\r\n        cc.resources.release(url, type);\r\n    }\r\n\r\n    public releaseAsset(asset)\r\n    {\r\n        cc.assetManager.releaseAsset(asset);\r\n    }\r\n\r\n    public releaseDir(url, type?)\r\n    {\r\n        cc.resources.release(url, type)\r\n    }\r\n\r\n    public release(asset)\r\n    {\r\n        cc.resources.release(asset);\r\n    }\r\n\r\n    public releaseCache(url, type)\r\n    {\r\n        cc.resources.release(url,type)\r\n\r\n    }\r\n\r\n    // 释放一个资源\r\n    private _release(item, itemUrl) {\r\n        if (!item) {\r\n            return;\r\n        }\r\n        let cacheInfo = this.getCacheInfo(item.id);\r\n        // 解除自身对自己的引用\r\n        cacheInfo.refs.delete(itemUrl);\r\n        // 解除引用\r\n        let delDependKey = (item, refKey) => {\r\n            if (item && item.dependKeys && Array.isArray(item.dependKeys)) {\r\n                for (let depKey of item.dependKeys) {\r\n                    let ccloader: any = cc.loader;\r\n                    let depItem = ccloader._cache[depKey]\r\n                    this._release(depItem, refKey);\r\n                }\r\n            }\r\n        }\r\n        delDependKey(item, itemUrl);\r\n\r\n        if (cacheInfo.uses.size == 0 && cacheInfo.refs.size == 0) {\r\n            //如果没有uuid,就直接释放url\r\n            if (item.uuid) {\r\n                cc.loader.release(item.uuid);\r\n                // Logger.log(\"resloader release item by uuid :\" + item.id);\r\n            } else {\r\n                cc.loader.release(item.id);\r\n                // Logger.log(\"resloader release item by url:\" + item.id);\r\n            }\r\n            this._resMap.delete(item.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放资源和它的引用, 它引用的资源被释放会影响其他同样正在引用的资源 (慎用, 除非你确认没有任何其它引用的时候才使用接口)\r\n     * @param path 资源路径\r\n     */\r\n    public releaseWithDepend(path: string){\r\n        Logger.warn(\"释放资源和它引用的资源\", path);\r\n        let deps = cc.loader.getDependsRecursively(path);\r\n        cc.loader.release(path);\r\n        cc.loader.release(deps);\r\n    }\r\n\r\n\r\n\r\n    /******************2.4.0 新增************************/\r\n    /**\r\n     * 加载bundle\r\n     * @param {string} nameOrUrl\r\n     * @param {Function} onComplete\r\n     * @param {Record<string, any>} options\r\n    */\r\n    public loadBundle(nameOrUrl: string ,onComplete?: (err: Error, bundle: cc.AssetManager.Bundle) => void,options?: Record<string, any>): void\r\n    {\r\n        cc.assetManager.loadBundle(nameOrUrl,options,(err,bundle)=>{\r\n            if (onComplete){\r\n                onComplete(err,bundle)\r\n            }\r\n        })\r\n    }\r\n\r\n    /** 检测bundle是否已加载到内存 */\r\n    public checkBundleValid(bundleName: any){\r\n        return cc.assetManager.getBundle(bundleName.toString());\r\n    }\r\n\r\n    /**\r\n     * 加载当前游戏bundle res\r\n     * @param {string|string[]} paths\r\n     * @param {Function} onComplete\r\n    */\r\n    public loadGameBundleRes(paths: string|string[],onComplete?:Function,type?: typeof cc.Asset){\r\n        let bundleName = Global.ResourceManager.gameBundle\r\n        if (bundleName){\r\n            this.loadBundleRes(bundleName,paths,onComplete,type)\r\n        }else {\r\n            Logger.error(\"loadGameBundleRes bundleName null\")\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * 加载指定bundle res\r\n     * @param {string} bundleName\r\n     * @param {string|string[]} paths\r\n     * @param {Function} onComplete\r\n    */\r\n    public loadBundleRes(bundleName:any,paths: string|string[],onComplete?:Function,type?: typeof cc.Asset){\r\n        // test\r\n        // if (typeof paths == 'string'){\r\n        //     Logger.error(\"paths  = \" + paths) \r\n        //     let getRes = this.getBundleRes(bundleName,paths,type) \r\n        //     if (getRes){\r\n        //         Logger.error(\"getRes ==== \" + getRes)\r\n        //     }\r\n            \r\n        // }else if (typeof paths === 'object'){\r\n        //     for (let j =0;j< paths.length;j++){\r\n        //         let path = paths[j]\r\n        //         Logger.error(\"path  = \" + path)\r\n        //         let getRes = this.getBundleRes(bundleName,path,type) \r\n        //         if (getRes){\r\n        //             Logger.error(\"getRes object ==== \" + getRes)\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        let bundle:cc.AssetManager.Bundle = cc.assetManager.getBundle(bundleName.toString())\r\n        if (bundle){\r\n            bundle.load(paths,type,(err,res)=>{\r\n                if(!err && res){\r\n                    if (typeof paths == 'string'){\r\n                        this.releaseHelper.addBundleRelease(bundleName,paths,type)\r\n                    }else if (typeof paths === 'object'){\r\n                        for (let j =0;j< paths.length;j++){\r\n                            let path = paths[j]\r\n                            //Logger.error(\"path  = \" + path)\r\n                            this.releaseHelper.addBundleRelease(bundleName,path,type)\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                if (onComplete){\r\n                    onComplete(err,res)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取游戏bundle res\r\n     * @param {string} path\r\n     * @param {cc.Asset} type\r\n    */\r\n    public getGameBundleRes(path: string, type?: typeof cc.Asset){\r\n        let bundleName = Global.ResourceManager.gameBundle\r\n        if (bundleName){\r\n            let res:any = this.getBundleRes(bundleName,path,type)\r\n            if (res){\r\n                return res\r\n            }else {\r\n                Logger.error(\"getGameBundleRes getBundleRes null\")\r\n            }\r\n            \r\n        }else {\r\n            Logger.error(\"getGameBundleRes bundleName null\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取指定bundle res\r\n     * @param {string} bundleName\r\n     * @param {string} path\r\n     * @param {cc.Asset} type\r\n    */\r\n    public getBundleRes(bundleName:any,path: string, type?: typeof cc.Asset){\r\n        let bundle:cc.AssetManager.Bundle = cc.assetManager.getBundle(bundleName.toString())\r\n        if (bundle){\r\n            let res:any = bundle.get(path,type)\r\n           return res\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载当前游戏bundle dir\r\n     * @param {string} path\r\n     * @param {Function} onComplete\r\n    */\r\n    public loadGameBundleDir(path: string, onComplete?:Function,type?: typeof cc.Asset){\r\n        let bundleName = Global.ResourceManager.gameBundle\r\n        if (bundleName){\r\n            this.loadBundleDir(bundleName,path,onComplete,type)\r\n        }else {\r\n            Logger.error(\"loadGameBundleDir bundleName null\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载指定bundle dir\r\n     * @param {string} bundleName\r\n     * @param {string} path\r\n     * @param {Function} onComplete\r\n    */\r\n    public loadBundleDir(bundleName:any,path: string, onComplete?:Function,type?: typeof cc.Asset){\r\n        let bundle:cc.AssetManager.Bundle = cc.assetManager.getBundle(bundleName.toString())\r\n        if (bundle){\r\n            bundle.loadDir(path,type,(err,res)=>{\r\n                if(!err && res){\r\n                    this.releaseHelper.addBundleRelease(bundleName,path,type)\r\n                }\r\n               \r\n                if (onComplete){\r\n                    onComplete(err,res)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n     /**\r\n     * 加载游戏内自动合图资源\r\n     * @param {cc.Sprite} sprite\r\n     * @param {string} url\r\n     * @param {string} atalsName\r\n     * @param {string} spName\r\n     * @param {function} onComplete\r\n     * @param {boolean} autoRelease\r\n     * @param {boolean} isAutoAtlas //是否自动图集\r\n    */\r\n    public loadGameBundleAutoAtlas(sprite:cc.Sprite, url:string, spName:string, onComplete?:Function, autoRelease?:boolean,isAutoAtlas = true){\r\n        let bundleName = Global.ResourceManager.gameBundle\r\n        if (bundleName){\r\n            this.loadBundleAutoAtlas(bundleName,sprite,url,spName,onComplete,autoRelease,isAutoAtlas)\r\n        }else {\r\n            Logger.error(\"loadGameBundleAutoAtlas bundleName null\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取bundle自动图集图片\r\n     * @param {string} bundleName\r\n     * @param {cc.Sprite} sprite\r\n     * @param {string} url\r\n     * @param {string} atalsName\r\n     * @param {string} spName\r\n     * @param {function} onComplete\r\n     * @param {boolean} autoRelease\r\n     * @param {boolean} isAutoAtlas //是否自动图集\r\n     * @memberof ResourceManager\r\n     */\r\n    public loadBundleAutoAtlas(bundleName:any,sprite:cc.Sprite, url:string, spName:string, onComplete?:Function, autoRelease?:boolean,isAutoAtlas = true)\r\n    {\r\n        let self = this\r\n        if(CC_PREVIEW && isAutoAtlas)\r\n        {\r\n            let index = url.lastIndexOf(\"/\");\r\n            if(index > 0){\r\n                url = url.substring(0, index);\r\n            }\r\n            let texture = this.getBundleRes(bundleName,url + \"/\" + spName, cc.Texture2D);\r\n            if (texture) {\r\n                if(!sprite.isValid) {\r\n                    return;\r\n                }\r\n\r\n                sprite.spriteFrame = new cc.SpriteFrame(texture);\r\n                if(onComplete) {\r\n                    onComplete();\r\n                }\r\n            }\r\n            else {\r\n                this.loadBundleRes(bundleName,url + \"/\" + spName, (error, texture:cc.Texture2D)=>{\r\n                    Logger.log(\"bundleName \" + bundleName)\r\n                    if(error != null) {\r\n                        Logger.error(error.message, url + \"/\" + spName);\r\n                    }\r\n                    if(texture == null) {\r\n                        return;\r\n                    } \r\n                    if(autoRelease != null && autoRelease != undefined) {\r\n                        self.setAutoReleaseRecursively(texture, autoRelease);\r\n                    }\r\n                    \r\n                    if(!sprite.isValid) {\r\n                        return;\r\n                    }\r\n                    sprite.spriteFrame = new cc.SpriteFrame(texture);\r\n\r\n                    if(onComplete) {\r\n                        onComplete();\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            let atlas = this.getBundleRes(bundleName,url, cc.SpriteAtlas);\r\n            if (atlas) {\r\n                let spframe = atlas.getSpriteFrame(spName);\r\n                if(spframe == null){\r\n                    Logger.error(\"找不到sprite\", spName);\r\n                    return;\r\n                }\r\n                if(!sprite.isValid) {\r\n                    return;\r\n                }\r\n                sprite.spriteFrame = spframe;\r\n\r\n                if(onComplete) {\r\n                    onComplete();\r\n                }\r\n            }\r\n            else{\r\n                this.loadBundleRes(bundleName,url, (error, atlas:cc.SpriteAtlas)=>{\r\n                    if(error != null) {\r\n                        Logger.error(error.message);\r\n                    }  \r\n                    if(atlas == null) {\r\n                        return;\r\n                    }\r\n                    if(autoRelease != null && autoRelease != undefined) {\r\n                        self.setAutoReleaseRecursively(atlas, autoRelease);\r\n                    }\r\n\r\n                    let spframe = atlas.getSpriteFrame(spName);\r\n                    if(spframe == null) {\r\n                        Logger.error(\"找不到sprite\", spName);\r\n                        return;\r\n                    }\r\n                    if(!sprite.isValid) {\r\n                        return;\r\n                    }\r\n                    sprite.spriteFrame = spframe;\r\n                    \r\n                    if(onComplete) {\r\n                        onComplete();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 懒加载资源 不会执行解析和初始化*/\r\n    public lazyLoadBundleRes(bundleName:any, path: string | string[], type?: typeof cc.Asset){\r\n        let bundle:cc.AssetManager.Bundle = cc.assetManager.getBundle(bundleName.toString())\r\n        if (bundle){\r\n            bundle.preload(path, type);\r\n        }\r\n    }\r\n\r\n    public dumpAssets(){\r\n        if (cc.sys.isNative){\r\n            return;\r\n        }\r\n        let map = cc.assetManager.assets._map;\r\n        let str = \"\";\r\n        let count = 0;\r\n        for(let i in map){\r\n            let info = map[i];\r\n            if (info._name || info.nativeUrl){\r\n                str += `[${info._name},${info.nativeUrl},${info.refCount},${String(info.isValid)}]; /n`;\r\n            }\r\n            count += 1;\r\n        }\r\n        Logger.log(count, str);\r\n    }\r\n}"]}