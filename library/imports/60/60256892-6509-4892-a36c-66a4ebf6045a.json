{
  "__type__": "cc.TextAsset",
  "_name": "italkmsg_pb.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import * as $protobuf from protobuf\r\n/** Namespace italk. */\r\nexport namespace italk {\r\n\r\n    /** Namespace pb. */\r\n    namespace pb {\r\n\r\n        /** ItalkTypeEnum enum. */\r\n        enum ItalkTypeEnum {\r\n            ITKCECHO = 0,\r\n            ITKSECHO = 1,\r\n            ITKHEART = 2,\r\n            ITKRegister = 3,\r\n            ITKSubscribe = 4,\r\n            ITKPublish = 5,\r\n            ITKPull = 6,\r\n            ITKAbnormalFeedback = 7,\r\n            ITKBusinessStatistics = 8,\r\n            ITKFeedbackServer = 9,\r\n            ITKServerSet = 10,\r\n            ITKServerSetPack = 11,\r\n            ITKLoginNEW = 20,\r\n            ITKLogin = 21,\r\n            ITKChat = 22,\r\n            ITKCommon = 23,\r\n            ITKServerChat = 40,\r\n            ITKServerChatEcho = 41,\r\n            ITKServerCommon = 42,\r\n            ITKServerCommonEcho = 43,\r\n            ITKHeartECHO = 62,\r\n            ITKRegisterECHO = 63,\r\n            ITKSubscribeECHO = 64,\r\n            ITKPublishECHO = 65,\r\n            ITKPullECHO = 66,\r\n            ITKAbnormalFeedbackECHO = 67,\r\n            ITKBusinessStatisticsECHO = 68,\r\n            ITKFeedbackServerECHO = 69,\r\n            ITKServerSetECHO = 70,\r\n            ITKServerSetPackECHO = 71,\r\n            ITKLoginECHO = 81,\r\n            ITKChatECHO = 82,\r\n            ITKCommonECHO = 83\r\n        }\r\n\r\n        /** ItalkErrorEnum enum. */\r\n        enum ItalkErrorEnum {\r\n            ITKOK = 0,\r\n            ITKERROR = 1,\r\n            ITKXXX = 2\r\n        }\r\n\r\n        /** Properties of an ItalkEchoInfo. */\r\n        interface IItalkEchoInfo {\r\n\r\n            /** ItalkEchoInfo type */\r\n            type?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkEchoInfo error */\r\n            error?: (italk.pb.ItalkErrorEnum|null);\r\n\r\n            /** ItalkEchoInfo Info */\r\n            Info?: (string|null);\r\n        }\r\n\r\n        /** Represents an ItalkEchoInfo. */\r\n        class ItalkEchoInfo implements IItalkEchoInfo {\r\n\r\n            /**\r\n             * Constructs a new ItalkEchoInfo.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkEchoInfo);\r\n\r\n            /** ItalkEchoInfo type. */\r\n            public type: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkEchoInfo error. */\r\n            public error: italk.pb.ItalkErrorEnum;\r\n\r\n            /** ItalkEchoInfo Info. */\r\n            public Info: string;\r\n\r\n            /**\r\n             * Creates a new ItalkEchoInfo instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkEchoInfo instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkEchoInfo): italk.pb.ItalkEchoInfo;\r\n\r\n            /**\r\n             * Encodes the specified ItalkEchoInfo message. Does not implicitly {@link italk.pb.ItalkEchoInfo.verify|verify} messages.\r\n             * @param message ItalkEchoInfo message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkEchoInfo, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkEchoInfo message, length delimited. Does not implicitly {@link italk.pb.ItalkEchoInfo.verify|verify} messages.\r\n             * @param message ItalkEchoInfo message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkEchoInfo, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkEchoInfo message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkEchoInfo\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkEchoInfo;\r\n\r\n            /**\r\n             * Decodes an ItalkEchoInfo message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkEchoInfo\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkEchoInfo;\r\n\r\n            /**\r\n             * Verifies an ItalkEchoInfo message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkEchoInfo message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkEchoInfo\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkEchoInfo;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkEchoInfo message. Also converts values to other types if specified.\r\n             * @param message ItalkEchoInfo\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkEchoInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkEchoInfo to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkHeartMsg. */\r\n        interface IItalkHeartMsg {\r\n\r\n            /** ItalkHeartMsg msgType */\r\n            msgType?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkHeartMsg heartCount */\r\n            heartCount?: (number|Long|null);\r\n\r\n            /** ItalkHeartMsg number */\r\n            number?: (number|Long|null);\r\n\r\n            /** ItalkHeartMsg token */\r\n            token?: (string|null);\r\n\r\n            /** ItalkHeartMsg serverInfo */\r\n            serverInfo?: (string|null);\r\n\r\n            /** ItalkHeartMsg userid */\r\n            userid?: (string|null);\r\n        }\r\n\r\n        /** Represents an ItalkHeartMsg. */\r\n        class ItalkHeartMsg implements IItalkHeartMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkHeartMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkHeartMsg);\r\n\r\n            /** ItalkHeartMsg msgType. */\r\n            public msgType: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkHeartMsg heartCount. */\r\n            public heartCount: (number|Long);\r\n\r\n            /** ItalkHeartMsg number. */\r\n            public number: (number|Long);\r\n\r\n            /** ItalkHeartMsg token. */\r\n            public token: string;\r\n\r\n            /** ItalkHeartMsg serverInfo. */\r\n            public serverInfo: string;\r\n\r\n            /** ItalkHeartMsg userid. */\r\n            public userid: string;\r\n\r\n            /**\r\n             * Creates a new ItalkHeartMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkHeartMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkHeartMsg): italk.pb.ItalkHeartMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkHeartMsg message. Does not implicitly {@link italk.pb.ItalkHeartMsg.verify|verify} messages.\r\n             * @param message ItalkHeartMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkHeartMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkHeartMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkHeartMsg.verify|verify} messages.\r\n             * @param message ItalkHeartMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkHeartMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkHeartMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkHeartMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkHeartMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkHeartMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkHeartMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkHeartMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkHeartMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkHeartMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkHeartMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkHeartMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkHeartMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkHeartMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkHeartMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkHeartMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkHeartEchoMsg. */\r\n        interface IItalkHeartEchoMsg {\r\n\r\n            /** ItalkHeartEchoMsg msgType */\r\n            msgType?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkHeartEchoMsg echoInfo */\r\n            echoInfo?: (italk.pb.IItalkEchoInfo|null);\r\n\r\n            /** ItalkHeartEchoMsg heartCount */\r\n            heartCount?: (number|Long|null);\r\n\r\n            /** ItalkHeartEchoMsg number */\r\n            number?: (number|Long|null);\r\n        }\r\n\r\n        /** Represents an ItalkHeartEchoMsg. */\r\n        class ItalkHeartEchoMsg implements IItalkHeartEchoMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkHeartEchoMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkHeartEchoMsg);\r\n\r\n            /** ItalkHeartEchoMsg msgType. */\r\n            public msgType: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkHeartEchoMsg echoInfo. */\r\n            public echoInfo?: (italk.pb.IItalkEchoInfo|null);\r\n\r\n            /** ItalkHeartEchoMsg heartCount. */\r\n            public heartCount: (number|Long);\r\n\r\n            /** ItalkHeartEchoMsg number. */\r\n            public number: (number|Long);\r\n\r\n            /**\r\n             * Creates a new ItalkHeartEchoMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkHeartEchoMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkHeartEchoMsg): italk.pb.ItalkHeartEchoMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkHeartEchoMsg message. Does not implicitly {@link italk.pb.ItalkHeartEchoMsg.verify|verify} messages.\r\n             * @param message ItalkHeartEchoMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkHeartEchoMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkHeartEchoMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkHeartEchoMsg.verify|verify} messages.\r\n             * @param message ItalkHeartEchoMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkHeartEchoMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkHeartEchoMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkHeartEchoMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkHeartEchoMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkHeartEchoMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkHeartEchoMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkHeartEchoMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkHeartEchoMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkHeartEchoMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkHeartEchoMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkHeartEchoMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkHeartEchoMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkHeartEchoMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkHeartEchoMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkHeartEchoMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** ItalkMsgStatusEnum enum. */\r\n        enum ItalkMsgStatusEnum {\r\n            ITKUnsend = 0,\r\n            ITKSending = 1,\r\n            ITKSended = 2,\r\n            ITKSendFailed = 3,\r\n            ITKReceiverReceived = 4,\r\n            ITKSenderReceived = 5,\r\n            ITKReceiverReaded = 6,\r\n            ITKSenderReaded = 7,\r\n            ITKReceiverDestroyed = 8,\r\n            ITKSenderDestroyed = 9,\r\n            ITKReceiverTimeout = 10,\r\n            ITKSenderTimeout = 11,\r\n            ITKSenderRevoke = 12,\r\n            ITKReceiverRevoke = 13,\r\n            ITKMsgStatus1 = 21,\r\n            ITKMsgStatus2 = 22,\r\n            ITKMsgStatus3 = 23,\r\n            ITKMsgStatus4 = 24,\r\n            ITKMsgStatus5 = 25,\r\n            ITKMsgStatus6 = 26\r\n        }\r\n\r\n        /** ItalkChatTypeEnum enum. */\r\n        enum ItalkChatTypeEnum {\r\n            ITKSingleChat = 0,\r\n            ITKGroupChat = 1\r\n        }\r\n\r\n        /** ItalkBusinessTypeEnum enum. */\r\n        enum ItalkBusinessTypeEnum {\r\n            ITKSMS = 0,\r\n            ITKPic = 1,\r\n            ITKSound = 2,\r\n            ITKShortVideo = 3,\r\n            ITKFile = 4,\r\n            ITKLocation = 5,\r\n            ITKRedPacket = 6,\r\n            ITKVoiceCall = 7,\r\n            ITKVideoCall = 8,\r\n            ITKServerPush = 9,\r\n            ITKAddFriendRequest = 10,\r\n            ITKNeedFriendVerify = 11,\r\n            ITKAddFriendSucccess = 12,\r\n            ITKVerifyFriendAnswer = 13,\r\n            ITKVerifyFriendSuccess = 14,\r\n            ITKGroupCreate = 15,\r\n            ITKGroupMemberQuit = 16,\r\n            ITKGroupMemberAdd = 17,\r\n            ITKGroupOwnerTransfer = 18,\r\n            ITKInviteGroupMember = 19,\r\n            ITKVerifyInivitation = 20,\r\n            ITKDeleteGroupMember = 21,\r\n            ITKChatStatusChange = 22,\r\n            ITKSystemNotification = 23,\r\n            ITKRevokeMsg = 24,\r\n            ITkDestroyed = 25,\r\n            ITKReturnRedPacket = 26,\r\n            ITKRemoveMsgID = 27,\r\n            ITKOtherMachineLogin = 28,\r\n            ITKRequestLogin = 29,\r\n            ITKAuthLogin = 30,\r\n            ITKUserChange = 31,\r\n            ITKAppState = 32,\r\n            ITKBussniesstype1 = 41,\r\n            ITKBussniesstype2 = 42,\r\n            ITKBussniesstype3 = 43,\r\n            ITKBussniesstype4 = 44,\r\n            ITKBussniesstype5 = 45,\r\n            ITKBussniesstype6 = 46,\r\n            ITKBussniesstype7 = 47,\r\n            ITKBussniesstype8 = 48,\r\n            ITKBussniesstype9 = 49,\r\n            ITKBussniesstype10 = 50,\r\n            ITKBussniesstype11 = 51,\r\n            ITKBussniesstype12 = 52,\r\n            ITKBussniesstype13 = 53,\r\n            ITKBussniesstype14 = 54,\r\n            ITKBussniesstype15 = 55,\r\n            ITKBussniesstype16 = 56,\r\n            ITKBussniesstype17 = 57,\r\n            ITKBussniesstype18 = 58,\r\n            ITKBussniesstype19 = 59,\r\n            ITKBussniesstype20 = 60,\r\n            ITKBussniesstype21 = 61,\r\n            ITKBussniesstype22 = 62,\r\n            ITKBussniesstype23 = 63,\r\n            ITKBussniesstype24 = 64,\r\n            ITKBussniesstype25 = 65,\r\n            ITKBussniesstype26 = 66,\r\n            ITKBussniesstype27 = 67,\r\n            ITKBussniesstype28 = 68,\r\n            ITKBussniesstype29 = 69,\r\n            ITKBussniesstype30 = 70,\r\n            ITKBussniesstype31 = 71,\r\n            ITKBussniesstype32 = 72,\r\n            ITKBussniesstype33 = 73,\r\n            ITKBussniesstype34 = 74,\r\n            ITKBussniesstype35 = 75,\r\n            ITKBussniesstype36 = 76,\r\n            ITKBussniesstype37 = 77,\r\n            ITKBussniesstype38 = 78,\r\n            ITKBussniesstype39 = 79,\r\n            ITKBussniesstype40 = 80,\r\n            ITKBussniesstype41 = 81,\r\n            ITKBussniesstype42 = 82,\r\n            ITKRecodeMsg = 83\r\n        }\r\n\r\n        /** ItalkFormatTypeEnum enum. */\r\n        enum ItalkFormatTypeEnum {\r\n            ITKBmp = 0,\r\n            ITKJpg = 1,\r\n            ITKPng = 2,\r\n            ITKGif = 3,\r\n            ITKOtherFormat = 4\r\n        }\r\n\r\n        /** ItalkMsgErrorEnum enum. */\r\n        enum ItalkMsgErrorEnum {\r\n            ITKToAccountNotExist = 0,\r\n            ITKWrongMsgContent = 1,\r\n            ITKOtherError = 2\r\n        }\r\n\r\n        /** ItalkAddFriendStatusEnum enum. */\r\n        enum ItalkAddFriendStatusEnum {\r\n            ITKAdded = 0,\r\n            ITKWaitVerification = 1\r\n        }\r\n\r\n        /** Properties of an ItalkMsgContent. */\r\n        interface IItalkMsgContent {\r\n\r\n            /** ItalkMsgContent text */\r\n            text?: (string|null);\r\n\r\n            /** ItalkMsgContent size */\r\n            size?: (number|null);\r\n\r\n            /** ItalkMsgContent imageformat */\r\n            imageformat?: (italk.pb.ItalkFormatTypeEnum|null);\r\n\r\n            /** ItalkMsgContent width */\r\n            width?: (number|null);\r\n\r\n            /** ItalkMsgContent height */\r\n            height?: (number|null);\r\n\r\n            /** ItalkMsgContent thumburl */\r\n            thumburl?: (string|null);\r\n\r\n            /** ItalkMsgContent url */\r\n            url?: (string|null);\r\n\r\n            /** ItalkMsgContent second */\r\n            second?: (number|null);\r\n\r\n            /** ItalkMsgContent filename */\r\n            filename?: (string|null);\r\n\r\n            /** ItalkMsgContent desc */\r\n            desc?: (string|null);\r\n\r\n            /** ItalkMsgContent latitude */\r\n            latitude?: (string|null);\r\n\r\n            /** ItalkMsgContent longitude */\r\n            longitude?: (string|null);\r\n        }\r\n\r\n        /** Represents an ItalkMsgContent. */\r\n        class ItalkMsgContent implements IItalkMsgContent {\r\n\r\n            /**\r\n             * Constructs a new ItalkMsgContent.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkMsgContent);\r\n\r\n            /** ItalkMsgContent text. */\r\n            public text: string;\r\n\r\n            /** ItalkMsgContent size. */\r\n            public size: number;\r\n\r\n            /** ItalkMsgContent imageformat. */\r\n            public imageformat: italk.pb.ItalkFormatTypeEnum;\r\n\r\n            /** ItalkMsgContent width. */\r\n            public width: number;\r\n\r\n            /** ItalkMsgContent height. */\r\n            public height: number;\r\n\r\n            /** ItalkMsgContent thumburl. */\r\n            public thumburl: string;\r\n\r\n            /** ItalkMsgContent url. */\r\n            public url: string;\r\n\r\n            /** ItalkMsgContent second. */\r\n            public second: number;\r\n\r\n            /** ItalkMsgContent filename. */\r\n            public filename: string;\r\n\r\n            /** ItalkMsgContent desc. */\r\n            public desc: string;\r\n\r\n            /** ItalkMsgContent latitude. */\r\n            public latitude: string;\r\n\r\n            /** ItalkMsgContent longitude. */\r\n            public longitude: string;\r\n\r\n            /**\r\n             * Creates a new ItalkMsgContent instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkMsgContent instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkMsgContent): italk.pb.ItalkMsgContent;\r\n\r\n            /**\r\n             * Encodes the specified ItalkMsgContent message. Does not implicitly {@link italk.pb.ItalkMsgContent.verify|verify} messages.\r\n             * @param message ItalkMsgContent message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkMsgContent, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkMsgContent message, length delimited. Does not implicitly {@link italk.pb.ItalkMsgContent.verify|verify} messages.\r\n             * @param message ItalkMsgContent message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkMsgContent, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkMsgContent message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkMsgContent\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkMsgContent;\r\n\r\n            /**\r\n             * Decodes an ItalkMsgContent message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkMsgContent\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkMsgContent;\r\n\r\n            /**\r\n             * Verifies an ItalkMsgContent message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkMsgContent message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkMsgContent\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkMsgContent;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkMsgContent message. Also converts values to other types if specified.\r\n             * @param message ItalkMsgContent\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkMsgContent, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkMsgContent to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkRecordMsg. */\r\n        interface IItalkRecordMsg {\r\n\r\n            /** ItalkRecordMsg recordMsg */\r\n            recordMsg?: (italk.pb.IItalkRecordMsg|null);\r\n\r\n            /** ItalkRecordMsg level */\r\n            level?: (number|null);\r\n\r\n            /** ItalkRecordMsg CurCount */\r\n            CurCount?: (number|null);\r\n\r\n            /** ItalkRecordMsg chatMsgList */\r\n            chatMsgList?: (italk.pb.IItalkChatMsg[]|null);\r\n\r\n            /** ItalkRecordMsg briefInfo */\r\n            briefInfo?: (string[]|null);\r\n        }\r\n\r\n        /** Represents an ItalkRecordMsg. */\r\n        class ItalkRecordMsg implements IItalkRecordMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkRecordMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkRecordMsg);\r\n\r\n            /** ItalkRecordMsg recordMsg. */\r\n            public recordMsg?: (italk.pb.IItalkRecordMsg|null);\r\n\r\n            /** ItalkRecordMsg level. */\r\n            public level: number;\r\n\r\n            /** ItalkRecordMsg CurCount. */\r\n            public CurCount: number;\r\n\r\n            /** ItalkRecordMsg chatMsgList. */\r\n            public chatMsgList: italk.pb.IItalkChatMsg[];\r\n\r\n            /** ItalkRecordMsg briefInfo. */\r\n            public briefInfo: string[];\r\n\r\n            /**\r\n             * Creates a new ItalkRecordMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkRecordMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkRecordMsg): italk.pb.ItalkRecordMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkRecordMsg message. Does not implicitly {@link italk.pb.ItalkRecordMsg.verify|verify} messages.\r\n             * @param message ItalkRecordMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkRecordMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkRecordMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkRecordMsg.verify|verify} messages.\r\n             * @param message ItalkRecordMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkRecordMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkRecordMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkRecordMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkRecordMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkRecordMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkRecordMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkRecordMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkRecordMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkRecordMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkRecordMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkRecordMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkRecordMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkRecordMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkRecordMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkRecordMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkChatMsg. */\r\n        interface IItalkChatMsg {\r\n\r\n            /** ItalkChatMsg msgType */\r\n            msgType?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkChatMsg userid */\r\n            userid?: (string|null);\r\n\r\n            /** ItalkChatMsg localid */\r\n            localid?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg fid */\r\n            fid?: (string|null);\r\n\r\n            /** ItalkChatMsg memberids */\r\n            memberids?: (string[]|null);\r\n\r\n            /** ItalkChatMsg msgid */\r\n            msgid?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg timestamp */\r\n            timestamp?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg burnsecond */\r\n            burnsecond?: (number|null);\r\n\r\n            /** ItalkChatMsg burn */\r\n            burn?: (boolean|null);\r\n\r\n            /** ItalkChatMsg chattype */\r\n            chattype?: (italk.pb.ItalkChatTypeEnum|null);\r\n\r\n            /** ItalkChatMsg bussinesstype */\r\n            bussinesstype?: (italk.pb.ItalkBusinessTypeEnum|null);\r\n\r\n            /** ItalkChatMsg status */\r\n            status?: (italk.pb.ItalkMsgStatusEnum|null);\r\n\r\n            /** ItalkChatMsg content */\r\n            content?: (italk.pb.IItalkMsgContent|null);\r\n\r\n            /** ItalkChatMsg userupdatetime */\r\n            userupdatetime?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msgindex */\r\n            msgindex?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msglastindex */\r\n            msglastindex?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg online */\r\n            online?: (boolean|null);\r\n\r\n            /** ItalkChatMsg offlinenum */\r\n            offlinenum?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msgorder */\r\n            msgorder?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msguserorder */\r\n            msguserorder?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg text1 */\r\n            text1?: (string|null);\r\n\r\n            /** ItalkChatMsg text2 */\r\n            text2?: (string|null);\r\n\r\n            /** ItalkChatMsg text3 */\r\n            text3?: (string|null);\r\n\r\n            /** ItalkChatMsg groupupdatetime */\r\n            groupupdatetime?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msgflag */\r\n            msgflag?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msginfo1 */\r\n            msginfo1?: (string|null);\r\n\r\n            /** ItalkChatMsg msgint1 */\r\n            msgint1?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msginfo2 */\r\n            msginfo2?: (string|null);\r\n\r\n            /** ItalkChatMsg msgint2 */\r\n            msgint2?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msginfo3 */\r\n            msginfo3?: (string|null);\r\n\r\n            /** ItalkChatMsg uuid */\r\n            uuid?: (string|null);\r\n\r\n            /** ItalkChatMsg crc */\r\n            crc?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg errorinfo */\r\n            errorinfo?: (string|null);\r\n\r\n            /** ItalkChatMsg number */\r\n            number?: (number|Long|null);\r\n\r\n            /** ItalkChatMsg msgidList */\r\n            msgidList?: ((number|Long)[]|null);\r\n\r\n            /** ItalkChatMsg records */\r\n            records?: (italk.pb.IItalkRecordMsg|null);\r\n        }\r\n\r\n        /** Represents an ItalkChatMsg. */\r\n        class ItalkChatMsg implements IItalkChatMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkChatMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkChatMsg);\r\n\r\n            /** ItalkChatMsg msgType. */\r\n            public msgType: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkChatMsg userid. */\r\n            public userid: string;\r\n\r\n            /** ItalkChatMsg localid. */\r\n            public localid: (number|Long);\r\n\r\n            /** ItalkChatMsg fid. */\r\n            public fid: string;\r\n\r\n            /** ItalkChatMsg memberids. */\r\n            public memberids: string[];\r\n\r\n            /** ItalkChatMsg msgid. */\r\n            public msgid: (number|Long);\r\n\r\n            /** ItalkChatMsg timestamp. */\r\n            public timestamp: (number|Long);\r\n\r\n            /** ItalkChatMsg burnsecond. */\r\n            public burnsecond: number;\r\n\r\n            /** ItalkChatMsg burn. */\r\n            public burn: boolean;\r\n\r\n            /** ItalkChatMsg chattype. */\r\n            public chattype: italk.pb.ItalkChatTypeEnum;\r\n\r\n            /** ItalkChatMsg bussinesstype. */\r\n            public bussinesstype: italk.pb.ItalkBusinessTypeEnum;\r\n\r\n            /** ItalkChatMsg status. */\r\n            public status: italk.pb.ItalkMsgStatusEnum;\r\n\r\n            /** ItalkChatMsg content. */\r\n            public content?: (italk.pb.IItalkMsgContent|null);\r\n\r\n            /** ItalkChatMsg userupdatetime. */\r\n            public userupdatetime: (number|Long);\r\n\r\n            /** ItalkChatMsg msgindex. */\r\n            public msgindex: (number|Long);\r\n\r\n            /** ItalkChatMsg msglastindex. */\r\n            public msglastindex: (number|Long);\r\n\r\n            /** ItalkChatMsg online. */\r\n            public online: boolean;\r\n\r\n            /** ItalkChatMsg offlinenum. */\r\n            public offlinenum: (number|Long);\r\n\r\n            /** ItalkChatMsg msgorder. */\r\n            public msgorder: (number|Long);\r\n\r\n            /** ItalkChatMsg msguserorder. */\r\n            public msguserorder: (number|Long);\r\n\r\n            /** ItalkChatMsg text1. */\r\n            public text1: string;\r\n\r\n            /** ItalkChatMsg text2. */\r\n            public text2: string;\r\n\r\n            /** ItalkChatMsg text3. */\r\n            public text3: string;\r\n\r\n            /** ItalkChatMsg groupupdatetime. */\r\n            public groupupdatetime: (number|Long);\r\n\r\n            /** ItalkChatMsg msgflag. */\r\n            public msgflag: (number|Long);\r\n\r\n            /** ItalkChatMsg msginfo1. */\r\n            public msginfo1: string;\r\n\r\n            /** ItalkChatMsg msgint1. */\r\n            public msgint1: (number|Long);\r\n\r\n            /** ItalkChatMsg msginfo2. */\r\n            public msginfo2: string;\r\n\r\n            /** ItalkChatMsg msgint2. */\r\n            public msgint2: (number|Long);\r\n\r\n            /** ItalkChatMsg msginfo3. */\r\n            public msginfo3: string;\r\n\r\n            /** ItalkChatMsg uuid. */\r\n            public uuid: string;\r\n\r\n            /** ItalkChatMsg crc. */\r\n            public crc: (number|Long);\r\n\r\n            /** ItalkChatMsg errorinfo. */\r\n            public errorinfo: string;\r\n\r\n            /** ItalkChatMsg number. */\r\n            public number: (number|Long);\r\n\r\n            /** ItalkChatMsg msgidList. */\r\n            public msgidList: (number|Long)[];\r\n\r\n            /** ItalkChatMsg records. */\r\n            public records?: (italk.pb.IItalkRecordMsg|null);\r\n\r\n            /**\r\n             * Creates a new ItalkChatMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkChatMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkChatMsg): italk.pb.ItalkChatMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkChatMsg message. Does not implicitly {@link italk.pb.ItalkChatMsg.verify|verify} messages.\r\n             * @param message ItalkChatMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkChatMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkChatMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkChatMsg.verify|verify} messages.\r\n             * @param message ItalkChatMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkChatMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkChatMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkChatMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkChatMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkChatMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkChatMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkChatMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkChatMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkChatMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkChatMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkChatMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkChatMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkChatMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkChatMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkChatMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkChatEchoMsg. */\r\n        interface IItalkChatEchoMsg {\r\n\r\n            /** ItalkChatEchoMsg msgType */\r\n            msgType?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkChatEchoMsg echoInfo */\r\n            echoInfo?: (italk.pb.IItalkEchoInfo|null);\r\n\r\n            /** ItalkChatEchoMsg userid */\r\n            userid?: (string|null);\r\n\r\n            /** ItalkChatEchoMsg localid */\r\n            localid?: (number|Long|null);\r\n\r\n            /** ItalkChatEchoMsg fid */\r\n            fid?: (string|null);\r\n\r\n            /** ItalkChatEchoMsg msgid */\r\n            msgid?: (number|Long|null);\r\n\r\n            /** ItalkChatEchoMsg timestamp */\r\n            timestamp?: (number|Long|null);\r\n\r\n            /** ItalkChatEchoMsg burnsecond */\r\n            burnsecond?: (number|null);\r\n\r\n            /** ItalkChatEchoMsg burn */\r\n            burn?: (boolean|null);\r\n\r\n            /** ItalkChatEchoMsg chattype */\r\n            chattype?: (italk.pb.ItalkChatTypeEnum|null);\r\n\r\n            /** ItalkChatEchoMsg bussinesstype */\r\n            bussinesstype?: (italk.pb.ItalkBusinessTypeEnum|null);\r\n\r\n            /** ItalkChatEchoMsg status */\r\n            status?: (italk.pb.ItalkMsgStatusEnum|null);\r\n\r\n            /** ItalkChatEchoMsg msgindex */\r\n            msgindex?: (number|Long|null);\r\n\r\n            /** ItalkChatEchoMsg msgorder */\r\n            msgorder?: (number|Long|null);\r\n\r\n            /** ItalkChatEchoMsg msguserorder */\r\n            msguserorder?: (number|Long|null);\r\n\r\n            /** ItalkChatEchoMsg text1 */\r\n            text1?: (string|null);\r\n\r\n            /** ItalkChatEchoMsg text2 */\r\n            text2?: (string|null);\r\n\r\n            /** ItalkChatEchoMsg text3 */\r\n            text3?: (string|null);\r\n\r\n            /** ItalkChatEchoMsg uuid */\r\n            uuid?: (string|null);\r\n\r\n            /** ItalkChatEchoMsg crc */\r\n            crc?: (number|Long|null);\r\n\r\n            /** ItalkChatEchoMsg number */\r\n            number?: (number|Long|null);\r\n        }\r\n\r\n        /** Represents an ItalkChatEchoMsg. */\r\n        class ItalkChatEchoMsg implements IItalkChatEchoMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkChatEchoMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkChatEchoMsg);\r\n\r\n            /** ItalkChatEchoMsg msgType. */\r\n            public msgType: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkChatEchoMsg echoInfo. */\r\n            public echoInfo?: (italk.pb.IItalkEchoInfo|null);\r\n\r\n            /** ItalkChatEchoMsg userid. */\r\n            public userid: string;\r\n\r\n            /** ItalkChatEchoMsg localid. */\r\n            public localid: (number|Long);\r\n\r\n            /** ItalkChatEchoMsg fid. */\r\n            public fid: string;\r\n\r\n            /** ItalkChatEchoMsg msgid. */\r\n            public msgid: (number|Long);\r\n\r\n            /** ItalkChatEchoMsg timestamp. */\r\n            public timestamp: (number|Long);\r\n\r\n            /** ItalkChatEchoMsg burnsecond. */\r\n            public burnsecond: number;\r\n\r\n            /** ItalkChatEchoMsg burn. */\r\n            public burn: boolean;\r\n\r\n            /** ItalkChatEchoMsg chattype. */\r\n            public chattype: italk.pb.ItalkChatTypeEnum;\r\n\r\n            /** ItalkChatEchoMsg bussinesstype. */\r\n            public bussinesstype: italk.pb.ItalkBusinessTypeEnum;\r\n\r\n            /** ItalkChatEchoMsg status. */\r\n            public status: italk.pb.ItalkMsgStatusEnum;\r\n\r\n            /** ItalkChatEchoMsg msgindex. */\r\n            public msgindex: (number|Long);\r\n\r\n            /** ItalkChatEchoMsg msgorder. */\r\n            public msgorder: (number|Long);\r\n\r\n            /** ItalkChatEchoMsg msguserorder. */\r\n            public msguserorder: (number|Long);\r\n\r\n            /** ItalkChatEchoMsg text1. */\r\n            public text1: string;\r\n\r\n            /** ItalkChatEchoMsg text2. */\r\n            public text2: string;\r\n\r\n            /** ItalkChatEchoMsg text3. */\r\n            public text3: string;\r\n\r\n            /** ItalkChatEchoMsg uuid. */\r\n            public uuid: string;\r\n\r\n            /** ItalkChatEchoMsg crc. */\r\n            public crc: (number|Long);\r\n\r\n            /** ItalkChatEchoMsg number. */\r\n            public number: (number|Long);\r\n\r\n            /**\r\n             * Creates a new ItalkChatEchoMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkChatEchoMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkChatEchoMsg): italk.pb.ItalkChatEchoMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkChatEchoMsg message. Does not implicitly {@link italk.pb.ItalkChatEchoMsg.verify|verify} messages.\r\n             * @param message ItalkChatEchoMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkChatEchoMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkChatEchoMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkChatEchoMsg.verify|verify} messages.\r\n             * @param message ItalkChatEchoMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkChatEchoMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkChatEchoMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkChatEchoMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkChatEchoMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkChatEchoMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkChatEchoMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkChatEchoMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkChatEchoMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkChatEchoMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkChatEchoMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkChatEchoMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkChatEchoMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkChatEchoMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkChatEchoMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkChatEchoMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkLoginMsg. */\r\n        interface IItalkLoginMsg {\r\n\r\n            /** ItalkLoginMsg msgType */\r\n            msgType?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkLoginMsg userid */\r\n            userid?: (string|null);\r\n\r\n            /** ItalkLoginMsg localid */\r\n            localid?: (number|Long|null);\r\n\r\n            /** ItalkLoginMsg token */\r\n            token?: (string|null);\r\n\r\n            /** ItalkLoginMsg clientid */\r\n            clientid?: (string|null);\r\n\r\n            /** ItalkLoginMsg number */\r\n            number?: (number|Long|null);\r\n        }\r\n\r\n        /** Represents an ItalkLoginMsg. */\r\n        class ItalkLoginMsg implements IItalkLoginMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkLoginMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkLoginMsg);\r\n\r\n            /** ItalkLoginMsg msgType. */\r\n            public msgType: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkLoginMsg userid. */\r\n            public userid: string;\r\n\r\n            /** ItalkLoginMsg localid. */\r\n            public localid: (number|Long);\r\n\r\n            /** ItalkLoginMsg token. */\r\n            public token: string;\r\n\r\n            /** ItalkLoginMsg clientid. */\r\n            public clientid: string;\r\n\r\n            /** ItalkLoginMsg number. */\r\n            public number: (number|Long);\r\n\r\n            /**\r\n             * Creates a new ItalkLoginMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkLoginMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkLoginMsg): italk.pb.ItalkLoginMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkLoginMsg message. Does not implicitly {@link italk.pb.ItalkLoginMsg.verify|verify} messages.\r\n             * @param message ItalkLoginMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkLoginMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkLoginMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkLoginMsg.verify|verify} messages.\r\n             * @param message ItalkLoginMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkLoginMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkLoginMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkLoginMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkLoginMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkLoginMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkLoginMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkLoginMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkLoginMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkLoginMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkLoginMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkLoginMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkLoginMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkLoginMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkLoginMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkLoginMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkLoginEchoMsg. */\r\n        interface IItalkLoginEchoMsg {\r\n\r\n            /** ItalkLoginEchoMsg msgType */\r\n            msgType?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkLoginEchoMsg echoInfo */\r\n            echoInfo?: (italk.pb.IItalkEchoInfo|null);\r\n\r\n            /** ItalkLoginEchoMsg localid */\r\n            localid?: (number|Long|null);\r\n\r\n            /** ItalkLoginEchoMsg userid */\r\n            userid?: (string|null);\r\n\r\n            /** ItalkLoginEchoMsg token */\r\n            token?: (string|null);\r\n\r\n            /** ItalkLoginEchoMsg userno */\r\n            userno?: (number|Long|null);\r\n\r\n            /** ItalkLoginEchoMsg number */\r\n            number?: (number|Long|null);\r\n        }\r\n\r\n        /** Represents an ItalkLoginEchoMsg. */\r\n        class ItalkLoginEchoMsg implements IItalkLoginEchoMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkLoginEchoMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkLoginEchoMsg);\r\n\r\n            /** ItalkLoginEchoMsg msgType. */\r\n            public msgType: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkLoginEchoMsg echoInfo. */\r\n            public echoInfo?: (italk.pb.IItalkEchoInfo|null);\r\n\r\n            /** ItalkLoginEchoMsg localid. */\r\n            public localid: (number|Long);\r\n\r\n            /** ItalkLoginEchoMsg userid. */\r\n            public userid: string;\r\n\r\n            /** ItalkLoginEchoMsg token. */\r\n            public token: string;\r\n\r\n            /** ItalkLoginEchoMsg userno. */\r\n            public userno: (number|Long);\r\n\r\n            /** ItalkLoginEchoMsg number. */\r\n            public number: (number|Long);\r\n\r\n            /**\r\n             * Creates a new ItalkLoginEchoMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkLoginEchoMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkLoginEchoMsg): italk.pb.ItalkLoginEchoMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkLoginEchoMsg message. Does not implicitly {@link italk.pb.ItalkLoginEchoMsg.verify|verify} messages.\r\n             * @param message ItalkLoginEchoMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkLoginEchoMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkLoginEchoMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkLoginEchoMsg.verify|verify} messages.\r\n             * @param message ItalkLoginEchoMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkLoginEchoMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkLoginEchoMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkLoginEchoMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkLoginEchoMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkLoginEchoMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkLoginEchoMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkLoginEchoMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkLoginEchoMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkLoginEchoMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkLoginEchoMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkLoginEchoMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkLoginEchoMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkLoginEchoMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkLoginEchoMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkLoginEchoMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkCommonMsg. */\r\n        interface IItalkCommonMsg {\r\n\r\n            /** ItalkCommonMsg msgType */\r\n            msgType?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkCommonMsg userid */\r\n            userid?: (string|null);\r\n\r\n            /** ItalkCommonMsg localid */\r\n            localid?: (number|Long|null);\r\n\r\n            /** ItalkCommonMsg text */\r\n            text?: (string|null);\r\n\r\n            /** ItalkCommonMsg number */\r\n            number?: (number|Long|null);\r\n        }\r\n\r\n        /** Represents an ItalkCommonMsg. */\r\n        class ItalkCommonMsg implements IItalkCommonMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkCommonMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkCommonMsg);\r\n\r\n            /** ItalkCommonMsg msgType. */\r\n            public msgType: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkCommonMsg userid. */\r\n            public userid: string;\r\n\r\n            /** ItalkCommonMsg localid. */\r\n            public localid: (number|Long);\r\n\r\n            /** ItalkCommonMsg text. */\r\n            public text: string;\r\n\r\n            /** ItalkCommonMsg number. */\r\n            public number: (number|Long);\r\n\r\n            /**\r\n             * Creates a new ItalkCommonMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkCommonMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkCommonMsg): italk.pb.ItalkCommonMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkCommonMsg message. Does not implicitly {@link italk.pb.ItalkCommonMsg.verify|verify} messages.\r\n             * @param message ItalkCommonMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkCommonMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkCommonMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkCommonMsg.verify|verify} messages.\r\n             * @param message ItalkCommonMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkCommonMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkCommonMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkCommonMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkCommonMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkCommonMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkCommonMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkCommonMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkCommonMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkCommonMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkCommonMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkCommonMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkCommonMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkCommonMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkCommonMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkCommonMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n\r\n        /** Properties of an ItalkCommonEchoMsg. */\r\n        interface IItalkCommonEchoMsg {\r\n\r\n            /** ItalkCommonEchoMsg msgType */\r\n            msgType?: (italk.pb.ItalkTypeEnum|null);\r\n\r\n            /** ItalkCommonEchoMsg echoInfo */\r\n            echoInfo?: (italk.pb.IItalkEchoInfo|null);\r\n\r\n            /** ItalkCommonEchoMsg localid */\r\n            localid?: (number|Long|null);\r\n\r\n            /** ItalkCommonEchoMsg text */\r\n            text?: (string|null);\r\n\r\n            /** ItalkCommonEchoMsg number */\r\n            number?: (number|Long|null);\r\n        }\r\n\r\n        /** Represents an ItalkCommonEchoMsg. */\r\n        class ItalkCommonEchoMsg implements IItalkCommonEchoMsg {\r\n\r\n            /**\r\n             * Constructs a new ItalkCommonEchoMsg.\r\n             * @param [properties] Properties to set\r\n             */\r\n            constructor(properties?: italk.pb.IItalkCommonEchoMsg);\r\n\r\n            /** ItalkCommonEchoMsg msgType. */\r\n            public msgType: italk.pb.ItalkTypeEnum;\r\n\r\n            /** ItalkCommonEchoMsg echoInfo. */\r\n            public echoInfo?: (italk.pb.IItalkEchoInfo|null);\r\n\r\n            /** ItalkCommonEchoMsg localid. */\r\n            public localid: (number|Long);\r\n\r\n            /** ItalkCommonEchoMsg text. */\r\n            public text: string;\r\n\r\n            /** ItalkCommonEchoMsg number. */\r\n            public number: (number|Long);\r\n\r\n            /**\r\n             * Creates a new ItalkCommonEchoMsg instance using the specified properties.\r\n             * @param [properties] Properties to set\r\n             * @returns ItalkCommonEchoMsg instance\r\n             */\r\n            public static create(properties?: italk.pb.IItalkCommonEchoMsg): italk.pb.ItalkCommonEchoMsg;\r\n\r\n            /**\r\n             * Encodes the specified ItalkCommonEchoMsg message. Does not implicitly {@link italk.pb.ItalkCommonEchoMsg.verify|verify} messages.\r\n             * @param message ItalkCommonEchoMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encode(message: italk.pb.IItalkCommonEchoMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Encodes the specified ItalkCommonEchoMsg message, length delimited. Does not implicitly {@link italk.pb.ItalkCommonEchoMsg.verify|verify} messages.\r\n             * @param message ItalkCommonEchoMsg message or plain object to encode\r\n             * @param [writer] Writer to encode to\r\n             * @returns Writer\r\n             */\r\n            public static encodeDelimited(message: italk.pb.IItalkCommonEchoMsg, writer?: $protobuf.Writer): $protobuf.Writer;\r\n\r\n            /**\r\n             * Decodes an ItalkCommonEchoMsg message from the specified reader or buffer.\r\n             * @param reader Reader or buffer to decode from\r\n             * @param [length] Message length if known beforehand\r\n             * @returns ItalkCommonEchoMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): italk.pb.ItalkCommonEchoMsg;\r\n\r\n            /**\r\n             * Decodes an ItalkCommonEchoMsg message from the specified reader or buffer, length delimited.\r\n             * @param reader Reader or buffer to decode from\r\n             * @returns ItalkCommonEchoMsg\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): italk.pb.ItalkCommonEchoMsg;\r\n\r\n            /**\r\n             * Verifies an ItalkCommonEchoMsg message.\r\n             * @param message Plain object to verify\r\n             * @returns `null` if valid, otherwise the reason why it is not\r\n             */\r\n            public static verify(message: { [k: string]: any }): (string|null);\r\n\r\n            /**\r\n             * Creates an ItalkCommonEchoMsg message from a plain object. Also converts values to their respective internal types.\r\n             * @param object Plain object\r\n             * @returns ItalkCommonEchoMsg\r\n             */\r\n            public static fromObject(object: { [k: string]: any }): italk.pb.ItalkCommonEchoMsg;\r\n\r\n            /**\r\n             * Creates a plain object from an ItalkCommonEchoMsg message. Also converts values to other types if specified.\r\n             * @param message ItalkCommonEchoMsg\r\n             * @param [options] Conversion options\r\n             * @returns Plain object\r\n             */\r\n            public static toObject(message: italk.pb.ItalkCommonEchoMsg, options?: $protobuf.IConversionOptions): { [k: string]: any };\r\n\r\n            /**\r\n             * Converts this ItalkCommonEchoMsg to JSON.\r\n             * @returns JSON object\r\n             */\r\n            public toJSON(): { [k: string]: any };\r\n        }\r\n    }\r\n}\r\n"
}